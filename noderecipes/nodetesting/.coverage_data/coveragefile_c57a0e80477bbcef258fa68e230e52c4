{"version":"0.2.9","files":{"/home/ryan/Desktop/node/nodetesting/should.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":21,"total":21,"coverage":{},"source":"var should = require('should');\n\nvar three = 3;\n\nshould.equal(three, '3', '3 == \"3\"');\n\nshould.strictEqual('3', three.toString(), '3 and \"3\" are not strict equal');\n\ntrue.should.be.ok;\nfalse.should.not.be.ok;\n\nthree.should.be.a.Number\n\nvar squareAsync = function(a, cb) {\n\tresult = a *a;\n\tcb(result);\n};\n\nsquareAsync(three, function(result) {\n\tresult.should.equal(9, 'three ^ 2 is nine');\n});","blocks":{"total":2,"seen":2,"missing":0,"percentage":1}},"hash":"087b15e68a14b44ccd0e3ec1cd9daf6a"},"/home/ryan/Desktop/node/node_modules/should/index.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":14,"total":14,"coverage":{},"source":"var should = require('./lib/should');\n\nvar defaultProto = Object.prototype;\nvar defaultProperty = 'should';\n\n//Expose api via `Object#should`.\ntry {\n  var prevShould = should.extend(defaultProperty, defaultProto);\n  should._prevShould = prevShould;\n} catch(e) {\n  //ignore errors\n}\n\nmodule.exports = should;","blocks":{"total":2,"seen":1,"missing":1,"percentage":0.5}},"hash":"e34e61e281b55b397b6aca617a96b720"},"/home/ryan/Desktop/node/node_modules/should/lib/should.js":{"stats":{"percentage":0.9620253164556962,"lines":[{"lineno":85},{"lineno":113},{"lineno":115},{"lineno":116},{"lineno":119},{"lineno":122}],"missing":6,"seen":152,"total":158,"coverage":{"85":{"partial":true,"source":"      return should(util.isWrapperType(this) ? this.valueOf() : this);","missing":[{"startCol":64,"endCol":68}]},"113":{"partial":false,"source":"  desc = desc || should._prevShould;","missing":[{"startCol":2,"endCol":36},{"startCol":9,"endCol":13}]},"115":{"partial":false,"source":"  if(desc) {","missing":[{"startCol":5,"endCol":9}]},"116":{"partial":false,"source":"    delete desc.proto[desc.name];","missing":[{"startCol":4,"endCol":32}]},"119":{"partial":false,"source":"      Object.defineProperty(desc.proto, desc.name, desc.descriptor);","missing":[{"startCol":6,"endCol":67}]},"122":{"partial":false,"source":"  return should;","missing":[{"startCol":2,"endCol":16}]}},"source":"/*\n * Should\n * Copyright(c) 2010-2014 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n\nvar util = require('./util');\n\n/**\n * Our function should\n *\n * @param {*} obj Object to assert\n * @returns {should.Assertion} Returns new Assertion for beginning assertion chain\n * @example\n *\n * var should = require('should');\n * should('abc').be.a.String();\n */\nvar should = function should(obj) {\n  return (new should.Assertion(obj));\n};\n\nshould.AssertionError = require('./assertion-error');\nshould.Assertion = require('./assertion');\n\nshould.format = util.format;\nshould.type = require('should-type');\nshould.util = util;\n\n/**\n * Object with configuration.\n * It contains such properties:\n * * `checkProtoEql` boolean - Affect if `.eql` will check objects prototypes\n * Also it can contain options for should-format.\n *\n * @type {Object}\n * @memberOf should\n * @static\n * @example\n *\n * var a = { a: 10 }, b = Object.create(null);\n * b.a = 10;\n *\n * a.should.be.eql(b);\n * //not throws\n *\n * should.config.checkProtoEql = true;\n * a.should.be.eql(b);\n * //throws AssertionError: expected { a: 10 } to equal { a: 10 } (because A and B have different prototypes)\n */\nshould.config = require('./config');\n\n//Expose should to external world.\nexports = module.exports = should;\n\n/**\n * Allow to extend given prototype with should property using given name. This getter will **unwrap** all standard wrappers like `Number`, `Boolean`, `String`.\n * Using `should(obj)` is the equivalent of using `obj.should` with known issues (like nulls and method calls etc).\n *\n * @param {string} [propertyName] Name of property to add. Default is `'should'`.\n * @param {Object} [proto] Prototype to extend with. Default is `Object.prototype`.\n * @memberOf should\n * @returns {{ name: string, descriptor: Object, proto: Object }} Descriptor enough to return all back\n * @static\n * @example\n *\n * var prev = should.extend('must', Object.prototype);\n *\n * 'abc'.must.startWith('a');\n *\n * var should = should.noConflict(prev);\n * should.not.exist(Object.prototype.must);\n */\nshould.extend = function(propertyName, proto) {\n  propertyName = propertyName || 'should';\n  proto = proto || Object.prototype;\n\n  var prevDescriptor = Object.getOwnPropertyDescriptor(proto, propertyName);\n\n  Object.defineProperty(proto, propertyName, {\n    set: function() {\n    },\n    get: function() {\n      return should(util.isWrapperType(this) ? this.valueOf() : this);\n    },\n    configurable: true\n  });\n\n  return { name: propertyName, descriptor: prevDescriptor, proto: proto };\n};\n\n/**\n * Delete previous extension. If `desc` missing it will remove default extension.\n *\n * @param {{ name: string, descriptor: Object, proto: Object }} [desc] Returned from `should.extend` object\n * @memberOf should\n * @returns {Function} Returns should function\n * @static\n * @example\n *\n * var should = require('should').noConflict();\n *\n * should(Object.prototype).not.have.property('should');\n *\n * var prev = should.extend('must', Object.prototype);\n * 'abc'.must.startWith('a');\n * should.noConflict(prev);\n *\n * should(Object.prototype).not.have.property('must');\n */\nshould.noConflict = function(desc) {\n  desc = desc || should._prevShould;\n\n  if(desc) {\n    delete desc.proto[desc.name];\n\n    if(desc.descriptor) {\n      Object.defineProperty(desc.proto, desc.name, desc.descriptor);\n    }\n  }\n  return should;\n};\n\n/**\n * Simple utility function for a bit more easier should assertion extension\n * @param {Function} f So called plugin function. It should accept 2 arguments: `should` function and `Assertion` constructor\n * @memberOf should\n * @returns {Function} Returns `should` function\n * @static\n * @example\n *\n * should.use(function(should, Assertion) {\n *   Assertion.add('asset', function() {\n *      this.params = { operator: 'to be asset' };\n *\n *      this.obj.should.have.property('id').which.is.a.Number();\n *      this.obj.should.have.property('path');\n *  })\n * })\n */\nshould.use = function(f) {\n  f(should, should.Assertion);\n  return this;\n};\n\nshould\n  .use(require('./ext/assert'))\n  .use(require('./ext/chain'))\n  .use(require('./ext/bool'))\n  .use(require('./ext/number'))\n  .use(require('./ext/eql'))\n  .use(require('./ext/type'))\n  .use(require('./ext/string'))\n  .use(require('./ext/property'))\n  .use(require('./ext/error'))\n  .use(require('./ext/match'))\n  .use(require('./ext/contain'));","blocks":{"total":8,"seen":4,"missing":4,"percentage":0.5}},"hash":"8fc94871bdee4c379d381aedb854fd84"},"/home/ryan/Desktop/node/node_modules/should/lib/util.js":{"stats":{"percentage":0.674074074074074,"lines":[{"lineno":32},{"lineno":33},{"lineno":34},{"lineno":35},{"lineno":36},{"lineno":37},{"lineno":38},{"lineno":39},{"lineno":43},{"lineno":44},{"lineno":45},{"lineno":52},{"lineno":53},{"lineno":54},{"lineno":55},{"lineno":56},{"lineno":59},{"lineno":64},{"lineno":65},{"lineno":68},{"lineno":72},{"lineno":73},{"lineno":74},{"lineno":75},{"lineno":76},{"lineno":77},{"lineno":78},{"lineno":79},{"lineno":80},{"lineno":84},{"lineno":87},{"lineno":93},{"lineno":99},{"lineno":105},{"lineno":106},{"lineno":108},{"lineno":113},{"lineno":115},{"lineno":116},{"lineno":117},{"lineno":122},{"lineno":124},{"lineno":128},{"lineno":134}],"missing":44,"seen":91,"total":135,"coverage":{"32":{"partial":false,"source":"  if(exports.isGeneratorFunction(obj)) {","missing":[{"startCol":5,"endCol":37}]},"33":{"partial":false,"source":"    return forEach(obj(), f, context);","missing":[{"startCol":4,"endCol":38},{"startCol":11,"endCol":37},{"startCol":19,"endCol":24}]},"34":{"partial":false,"source":"  } else if (exports.isGeneratorObject(obj)) {","missing":[{"startCol":13,"endCol":43}]},"35":{"partial":false,"source":"    var value = obj.next();","missing":[{"startCol":4,"endCol":27},{"startCol":16,"endCol":26}]},"36":{"partial":false,"source":"    while(!value.done) {","missing":[{"startCol":10,"endCol":21}]},"37":{"partial":false,"source":"      if(f.call(context, value.value, 'value', obj) === false)","missing":[{"startCol":9,"endCol":51}]},"38":{"partial":false,"source":"        return;","missing":[{"startCol":8,"endCol":15}]},"39":{"partial":false,"source":"      value = obj.next();","missing":[{"startCol":6,"endCol":25},{"startCol":14,"endCol":24}]},"43":{"partial":false,"source":"      if(hasOwnProperty.call(obj, prop)) {","missing":[{"startCol":9,"endCol":39}]},"44":{"partial":false,"source":"        if(f.call(context, obj[prop], prop, obj) === false)","missing":[{"startCol":11,"endCol":48}]},"45":{"partial":false,"source":"          return;","missing":[{"startCol":10,"endCol":17}]},"52":{"partial":false,"source":"  var res = false;","missing":[{"startCol":2,"endCol":18}]},"53":{"partial":false,"source":"  exports.forEach(obj, function(value, key) {","missing":[{}]},"54":{"partial":false,"source":"    if(f.call(context, value, key, obj)) {","missing":[{},{"startCol":7,"endCol":39}]},"55":{"partial":false,"source":"      res = true;","missing":[{},{"startCol":6,"endCol":17}]},"56":{"partial":false,"source":"      return false;","missing":[{},{"startCol":6,"endCol":19}]},"57":{"partial":false,"source":"    }","missing":[{}]},"58":{"partial":false,"source":"  }, context);","missing":[{}]},"59":{"partial":false,"source":"  return res;","missing":[{"startCol":2,"endCol":13}]},"64":{"partial":false,"source":"    if(hasOwnProperty.call(obj, prop)) {","missing":[{"startCol":7,"endCol":37}]},"65":{"partial":false,"source":"      return false;","missing":[{"startCol":6,"endCol":19}]},"68":{"partial":false,"source":"  return true;","missing":[{"startCol":2,"endCol":14}]},"72":{"partial":false,"source":"  var t = type(obj);","missing":[{"startCol":2,"endCol":20},{"startCol":10,"endCol":19}]},"73":{"partial":false,"source":"  return (t.type === type.OBJECT && t.cls === type.ARRAY) ||","missing":[{"startCol":10,"endCol":56},{},{"startCol":36,"endCol":56}]},"74":{"partial":false,"source":"   (t.type === type.OBJECT && t.cls === type.BUFFER) ||","missing":[{"startCol":4,"endCol":26},{},{"startCol":30,"endCol":51}]},"75":{"partial":false,"source":"   (t.type === type.OBJECT && t.cls === type.ARGUMENTS) ||","missing":[{},{"startCol":30,"endCol":54},{"startCol":4,"endCol":26}]},"76":{"partial":false,"source":"   (t.type === type.OBJECT && t.cls === type.ARRAY_BUFFER) ||","missing":[{},{"startCol":30,"endCol":57},{"startCol":4,"endCol":57}]},"77":{"partial":false,"source":"   (t.type === type.OBJECT && t.cls === type.TYPED_ARRAY) ||","missing":[{},{"startCol":30,"endCol":56},{"startCol":4,"endCol":56}]},"78":{"partial":false,"source":"   (t.type === type.OBJECT && t.cls === type.DATA_VIEW) ||","missing":[{},{"startCol":4,"endCol":26},{"startCol":30,"endCol":54}]},"79":{"partial":false,"source":"   (t.type === type.OBJECT && t.cls === type.STRING) ||","missing":[{},{"startCol":4,"endCol":51},{"startCol":30,"endCol":51}]},"80":{"partial":false,"source":"   (t.type === type.STRING);","missing":[{},{"startCol":4,"endCol":26}]},"84":{"partial":false,"source":"  var t = type(obj);","missing":[{"startCol":2,"endCol":20},{"startCol":10,"endCol":19}]},"87":{"partial":false,"source":"      return obj.length;","missing":[{"startCol":6,"endCol":24}]},"93":{"partial":false,"source":"          return obj.byteLength;","missing":[{"startCol":10,"endCol":32}]},"99":{"partial":false,"source":"          return obj.length;","missing":[{"startCol":10,"endCol":28}]},"105":{"partial":false,"source":"  if(typeof name == 'symbol') {","missing":[{"startCol":5,"endCol":16}]},"106":{"partial":false,"source":"    return name;","missing":[{"startCol":4,"endCol":16}]},"108":{"partial":false,"source":"    return String(name);","missing":[{"startCol":4,"endCol":24},{"startCol":11,"endCol":23}]},"113":{"partial":false,"source":"  if(!obj) return false;","missing":[{"startCol":5,"endCol":9},{"startCol":6,"endCol":9},{"startCol":11,"endCol":24}]},"115":{"partial":false,"source":"  return typeof obj.next == 'function' &&","missing":[{"startCol":9,"endCol":24},{}]},"116":{"partial":false,"source":"          typeof obj[Symbol.iterator] == 'function' &&","missing":[{"startCol":10,"endCol":51},{}]},"117":{"partial":false,"source":"          obj[Symbol.iterator]() === obj;","missing":[{"startCol":10,"endCol":32},{},{"startCol":37,"endCol":40}]},"122":{"partial":false,"source":"  if(typeof f != 'function') return false;","missing":[{"startCol":5,"endCol":13},{"startCol":29,"endCol":42}]},"124":{"partial":false,"source":"  return /^function\\s*\\*\\s*/.test(f.toString());","missing":[{"startCol":2,"endCol":48},{"startCol":9,"endCol":47},{"startCol":34,"endCol":46}]},"128":{"partial":false,"source":"  return config.getFormatter(opts).format(value);","missing":[{"startCol":2,"endCol":49},{"startCol":9,"endCol":34}]},"134":{"partial":false,"source":"  return config.getFormatter().formatPropertyName(String(value));","missing":[{"startCol":2,"endCol":65},{"startCol":9,"endCol":30},{"startCol":50,"endCol":63}]}},"source":"/*\n * Should\n * Copyright(c) 2010-2014 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar type = require('should-type');\nvar config = require('./config');\n\n/**\n * Check if given obj just a primitive type wrapper\n * @param {Object} obj\n * @returns {boolean}\n * @private\n */\nexports.isWrapperType = function(obj) {\n  return obj instanceof Number || obj instanceof String || obj instanceof Boolean;\n};\n\nexports.merge = function(a, b) {\n  if(a && b) {\n    for(var key in b) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n};\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexports.forEach = function forEach(obj, f, context) {\n  if(exports.isGeneratorFunction(obj)) {\n    return forEach(obj(), f, context);\n  } else if (exports.isGeneratorObject(obj)) {\n    var value = obj.next();\n    while(!value.done) {\n      if(f.call(context, value.value, 'value', obj) === false)\n        return;\n      value = obj.next();\n    }\n  } else {\n    for(var prop in obj) {\n      if(hasOwnProperty.call(obj, prop)) {\n        if(f.call(context, obj[prop], prop, obj) === false)\n          return;\n      }\n    }\n  }\n};\n\nexports.some = function(obj, f, context) {\n  var res = false;\n  exports.forEach(obj, function(value, key) {\n    if(f.call(context, value, key, obj)) {\n      res = true;\n      return false;\n    }\n  }, context);\n  return res;\n};\n\nexports.isEmptyObject = function(obj) {\n  for(var prop in obj) {\n    if(hasOwnProperty.call(obj, prop)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexports.isIndexable = function(obj) {\n  var t = type(obj);\n  return (t.type === type.OBJECT && t.cls === type.ARRAY) ||\n   (t.type === type.OBJECT && t.cls === type.BUFFER) ||\n   (t.type === type.OBJECT && t.cls === type.ARGUMENTS) ||\n   (t.type === type.OBJECT && t.cls === type.ARRAY_BUFFER) ||\n   (t.type === type.OBJECT && t.cls === type.TYPED_ARRAY) ||\n   (t.type === type.OBJECT && t.cls === type.DATA_VIEW) ||\n   (t.type === type.OBJECT && t.cls === type.STRING) ||\n   (t.type === type.STRING);\n};\n\nexports.length = function(obj) {\n  var t = type(obj);\n  switch(t.type) {\n    case type.STRING:\n      return obj.length;\n    case type.OBJECT:\n      switch(t.cls) {\n        case type.ARRAY_BUFFER:\n        case type.TYPED_ARRAY:\n        case type.DATA_VIEW:\n          return obj.byteLength;\n\n        case type.ARRAY:\n        case type.BUFFER:\n        case type.ARGUMENTS:\n        case type.FUNCTION:\n          return obj.length;\n      }\n  }\n};\n\nexports.convertPropertyName = function(name) {\n  if(typeof name == 'symbol') {\n    return name;\n  } else {\n    return String(name);\n  }\n};\n\nexports.isGeneratorObject = function(obj) {\n  if(!obj) return false;\n\n  return typeof obj.next == 'function' &&\n          typeof obj[Symbol.iterator] == 'function' &&\n          obj[Symbol.iterator]() === obj;\n};\n\n//TODO find better way\nexports.isGeneratorFunction = function(f) {\n  if(typeof f != 'function') return false;\n\n  return /^function\\s*\\*\\s*/.test(f.toString());\n};\n\nexports.format = function(value, opts) {\n  return config.getFormatter(opts).format(value);\n};\n\nexports.functionName = require('should-format').Formatter.functionName;\n\nexports.formatProp = function(value) {\n  return config.getFormatter().formatPropertyName(String(value));\n};","blocks":{"total":34,"seen":4,"missing":30,"percentage":0.11764705882352941}},"hash":"710a811e41209fe6f2a94ecf77b473ee"},"/home/ryan/Desktop/node/node_modules/should/node_modules/should-type/index.js":{"stats":{"percentage":0.9433962264150944,"lines":[{"lineno":54},{"lineno":83},{"lineno":116},{"lineno":118},{"lineno":123},{"lineno":127},{"lineno":128},{"lineno":133},{"lineno":134}],"missing":9,"seen":150,"total":159,"coverage":{"54":{"partial":false,"source":"        return new Type(types.OBJECT, res, sub);\r","missing":[{"startCol":8,"endCol":48}]},"83":{"partial":true,"source":"    if(obj === null) return new Type(types.NULL);\r","missing":[{"startCol":21,"endCol":49}]},"116":{"partial":true,"source":"    if((typeof Promise === types.FUNCTION && obj instanceof Promise) ||\r","missing":[{"startCol":45,"endCol":48},{"startCol":60,"endCol":67}]},"118":{"partial":false,"source":"          return new Type(types.OBJECT, types.PROMISE);\r","missing":[{"startCol":10,"endCol":55}]},"123":{"partial":false,"source":"      return new Type(types.OBJECT, types.BUFFER);\r","missing":[{"startCol":6,"endCol":50}]},"127":{"partial":true,"source":"    if(typeof Node !== 'undefined' && obj instanceof Node) {\r","missing":[{"startCol":38,"endCol":41},{"startCol":53,"endCol":57}]},"128":{"partial":false,"source":"      return new Type(types.OBJECT, types.HTML_ELEMENT, obj.nodeName);\r","missing":[{"startCol":6,"endCol":70}]},"133":{"partial":true,"source":"    if(obj.Boolean === Boolean && obj.Number === Number && obj.String === String && obj.Date === Date) {\r","missing":[{"startCol":34,"endCol":55},{"startCol":49,"endCol":55},{"startCol":59,"endCol":80},{"startCol":74,"endCol":80},{"startCol":84,"endCol":101},{"startCol":97,"endCol":101}]},"134":{"partial":false,"source":"      return new Type(types.OBJECT, types.HOST);\r","missing":[{"startCol":6,"endCol":48}]}},"source":"var toString = Object.prototype.toString;\r\n\r\nvar types = require('./types');\r\n\r\n/**\r\n * Simple data function to store type information\r\n * @param {string} type Usually what is returned from typeof\r\n * @param {string} cls  Sanitized @Class via Object.prototype.toString\r\n * @param {string} sub  If type and cls the same, and need to specify somehow\r\n * @private\r\n * @example\r\n *\r\n * //for null\r\n * new Type('null');\r\n *\r\n * //for Date\r\n * new Type('object', 'date');\r\n *\r\n * //for Uint8Array\r\n *\r\n * new Type('object', 'typed-array', 'uint8');\r\n */\r\nfunction Type(type, cls, sub) {\r\n  this.type = type;\r\n  this.cls = cls;\r\n  this.sub = sub;\r\n}\r\n\r\n/**\r\n * Function to store type checks\r\n * @private\r\n */\r\nfunction TypeChecker() {\r\n  this.checks = [];\r\n}\r\n\r\nTypeChecker.prototype = {\r\n  add: function(func) {\r\n    this.checks.push(func);\r\n    return this;\r\n  },\r\n\r\n  addTypeOf: function(type, res) {\r\n    return this.add(function(obj, tpeOf) {\r\n      if(tpeOf === type) {\r\n        return new Type(res);\r\n      }\r\n    });\r\n  },\r\n\r\n  addClass: function(cls, res, sub) {\r\n    return this.add(function(obj, tpeOf, objCls) {\r\n      if(objCls === cls) {\r\n        return new Type(types.OBJECT, res, sub);\r\n      }\r\n    });\r\n  },\r\n\r\n  getType: function(obj) {\r\n    var typeOf = typeof obj;\r\n    var cls = toString.call(obj);\r\n\r\n    for(var i = 0, l = this.checks.length; i < l; i++) {\r\n      var res = this.checks[i].call(this, obj, typeOf, cls);\r\n      if(typeof res !== 'undefined') return res;\r\n    }\r\n\r\n  }\r\n};\r\n\r\nvar main = new TypeChecker();\r\n\r\n//TODO add iterators\r\n\r\nmain\r\n  .addTypeOf(types.NUMBER, types.NUMBER)\r\n  .addTypeOf(types.UNDEFINED, types.UNDEFINED)\r\n  .addTypeOf(types.STRING, types.STRING)\r\n  .addTypeOf(types.BOOLEAN, types.BOOLEAN)\r\n  .addTypeOf(types.FUNCTION, types.FUNCTION)\r\n  .addTypeOf(types.SYMBOL, types.SYMBOL)\r\n  .add(function(obj, tpeOf) {\r\n    if(obj === null) return new Type(types.NULL);\r\n  })\r\n  .addClass('[object String]', types.STRING)\r\n  .addClass('[object Boolean]', types.BOOLEAN)\r\n  .addClass('[object Number]', types.NUMBER)\r\n  .addClass('[object Array]', types.ARRAY)\r\n  .addClass('[object RegExp]', types.REGEXP)\r\n  .addClass('[object Error]', types.ERROR)\r\n  .addClass('[object Date]', types.DATE)\r\n  .addClass('[object Arguments]', types.ARGUMENTS)\r\n  .addClass('[object Math]')\r\n  .addClass('[object JSON]')\r\n  .addClass('[object ArrayBuffer]', types.ARRAY_BUFFER)\r\n  .addClass('[object Int8Array]', types.TYPED_ARRAY, 'int8')\r\n  .addClass('[object Uint8Array]', types.TYPED_ARRAY, 'uint8')\r\n  .addClass('[object Uint8ClampedArray]', types.TYPED_ARRAY, 'uint8clamped')\r\n  .addClass('[object Int16Array]', types.TYPED_ARRAY, 'int16')\r\n  .addClass('[object Uint16Array]', types.TYPED_ARRAY, 'uint16')\r\n  .addClass('[object Int32Array]', types.TYPED_ARRAY, 'int32')\r\n  .addClass('[object Uint32Array]', types.TYPED_ARRAY, 'uint32')\r\n  .addClass('[object Float32Array]', types.TYPED_ARRAY, 'float32')\r\n  .addClass('[object Float64Array]', types.TYPED_ARRAY, 'float64')\r\n  .addClass('[object DataView]', types.DATA_VIEW)\r\n  .addClass('[object Map]', types.MAP)\r\n  .addClass('[object WeakMap]', types.WEAK_MAP)\r\n  .addClass('[object Set]', types.SET)\r\n  .addClass('[object WeakSet]', types.WEAK_SET)\r\n  .addClass('[object Promise]', types.PROMISE)\r\n  .addClass('[object Blob]', types.BLOB)\r\n  .addClass('[object File]', types.FILE)\r\n  .addClass('[object FileList]', types.FILE_LIST)\r\n  .addClass('[object XMLHttpRequest]', types.XHR)\r\n  .add(function(obj) {\r\n    if((typeof Promise === types.FUNCTION && obj instanceof Promise) ||\r\n        (typeof obj.then === types.FUNCTION)) {\r\n          return new Type(types.OBJECT, types.PROMISE);\r\n        }\r\n  })\r\n  .add(function(obj) {\r\n    if(typeof Buffer !== 'undefined' && obj instanceof Buffer) {\r\n      return new Type(types.OBJECT, types.BUFFER);\r\n    }\r\n  })\r\n  .add(function(obj) {\r\n    if(typeof Node !== 'undefined' && obj instanceof Node) {\r\n      return new Type(types.OBJECT, types.HTML_ELEMENT, obj.nodeName);\r\n    }\r\n  })\r\n  .add(function(obj) {\r\n    // probably at the begginging should be enough these checks\r\n    if(obj.Boolean === Boolean && obj.Number === Number && obj.String === String && obj.Date === Date) {\r\n      return new Type(types.OBJECT, types.HOST);\r\n    }\r\n  })\r\n  .add(function() {\r\n    return new Type(types.OBJECT);\r\n  });\r\n\r\n/**\r\n * Get type information of anything\r\n *\r\n * @param  {any} obj Anything that could require type information\r\n * @return {Type}    type info\r\n */\r\nfunction getGlobalType(obj) {\r\n  return main.getType(obj);\r\n}\r\n\r\ngetGlobalType.checker = main;\r\ngetGlobalType.TypeChecker = TypeChecker;\r\ngetGlobalType.Type = Type;\r\n\r\nObject.keys(types).forEach(function(typeName) {\r\n  getGlobalType[typeName] = types[typeName];\r\n});\r\n\r\nmodule.exports = getGlobalType;","blocks":{"total":25,"seen":19,"missing":6,"percentage":0.76}},"hash":"3b170190bf83ccdfa5b896da01027d7f"},"/home/ryan/Desktop/node/node_modules/should/node_modules/should-type/types.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":41,"total":41,"coverage":{},"source":"var types = {\r\n  NUMBER: 'number',\r\n  UNDEFINED: 'undefined',\r\n  STRING: 'string',\r\n  BOOLEAN: 'boolean',\r\n  OBJECT: 'object',\r\n  FUNCTION: 'function',\r\n  NULL: 'null',\r\n  ARRAY: 'array',\r\n  REGEXP: 'regexp',\r\n  DATE: 'date',\r\n  ERROR: 'error',\r\n  ARGUMENTS: 'arguments',\r\n  SYMBOL: 'symbol',\r\n  ARRAY_BUFFER: 'array-buffer',\r\n  TYPED_ARRAY: 'typed-array',\r\n  DATA_VIEW: 'data-view',\r\n  MAP: 'map',\r\n  SET: 'set',\r\n  WEAK_SET: 'weak-set',\r\n  WEAK_MAP: 'weak-map',\r\n  PROMISE: 'promise',\r\n\r\n// node buffer\r\n  BUFFER: 'buffer',\r\n\r\n// dom html element\r\n  HTML_ELEMENT: 'html-element',\r\n  HTML_ELEMENT_TEXT: 'html-element-text',\r\n  DOCUMENT: 'document',\r\n  WINDOW: 'window',\r\n  FILE: 'file',\r\n  FILE_LIST: 'file-list',\r\n  BLOB: 'blob',\r\n\r\n  HOST: 'host',\r\n\r\n  XHR: 'xhr'\r\n};\r\n\r\nmodule.exports = types;","blocks":{"total":0,"seen":0,"missing":0,"percentage":1}},"hash":"317fd05ce364eb81036ff8c3d948a899"},"/home/ryan/Desktop/node/node_modules/should/lib/config.js":{"stats":{"percentage":0.9090909090909091,"lines":[{"lineno":7}],"missing":1,"seen":10,"total":11,"coverage":{"7":{"partial":false,"source":"    return new Formatter(opts || config);","missing":[{"startCol":4,"endCol":41},{"startCol":25,"endCol":29},{"startCol":33,"endCol":39}]}},"source":"var Formatter = require('should-format').Formatter;\n\nvar config = {\n  checkProtoEql: false,\n\n  getFormatter: function(opts) {\n    return new Formatter(opts || config);\n  }\n};\n\nmodule.exports = config;","blocks":{"total":1,"seen":0,"missing":1,"percentage":0}},"hash":"d6c7d40d4a0bdbb72725e1fdd101a9ed"},"/home/ryan/Desktop/node/node_modules/should/node_modules/should-format/index.js":{"stats":{"percentage":0.5692307692307692,"lines":[{"lineno":5},{"lineno":6},{"lineno":7},{"lineno":8},{"lineno":14},{"lineno":16},{"lineno":17},{"lineno":19},{"lineno":20},{"lineno":22},{"lineno":29},{"lineno":30},{"lineno":32},{"lineno":33},{"lineno":36},{"lineno":38},{"lineno":39},{"lineno":43},{"lineno":44},{"lineno":46},{"lineno":48},{"lineno":49},{"lineno":50},{"lineno":51},{"lineno":53},{"lineno":54},{"lineno":56},{"lineno":57},{"lineno":59},{"lineno":61},{"lineno":62},{"lineno":63},{"lineno":65},{"lineno":67},{"lineno":68},{"lineno":69},{"lineno":70},{"lineno":73},{"lineno":74},{"lineno":76},{"lineno":77},{"lineno":78},{"lineno":79},{"lineno":81},{"lineno":82},{"lineno":85},{"lineno":87},{"lineno":88},{"lineno":90},{"lineno":91},{"lineno":93},{"lineno":98},{"lineno":100},{"lineno":102},{"lineno":103},{"lineno":104},{"lineno":105},{"lineno":106},{"lineno":108},{"lineno":110},{"lineno":112},{"lineno":113},{"lineno":115},{"lineno":120},{"lineno":124},{"lineno":126},{"lineno":128},{"lineno":129},{"lineno":130},{"lineno":131},{"lineno":132},{"lineno":133},{"lineno":135},{"lineno":139},{"lineno":141},{"lineno":142},{"lineno":143},{"lineno":144},{"lineno":145},{"lineno":146},{"lineno":148},{"lineno":159},{"lineno":160},{"lineno":161},{"lineno":162},{"lineno":163},{"lineno":171},{"lineno":173},{"lineno":174},{"lineno":178},{"lineno":179},{"lineno":180},{"lineno":181},{"lineno":183},{"lineno":184},{"lineno":185},{"lineno":189},{"lineno":194},{"lineno":196},{"lineno":198},{"lineno":200},{"lineno":205},{"lineno":206},{"lineno":207},{"lineno":208},{"lineno":209},{"lineno":210},{"lineno":211},{"lineno":212},{"lineno":213},{"lineno":215},{"lineno":216},{"lineno":218},{"lineno":219},{"lineno":221},{"lineno":222},{"lineno":224},{"lineno":235},{"lineno":236},{"lineno":242},{"lineno":244},{"lineno":247},{"lineno":254},{"lineno":255},{"lineno":260},{"lineno":261},{"lineno":265},{"lineno":271},{"lineno":275},{"lineno":278},{"lineno":279},{"lineno":287},{"lineno":289},{"lineno":290},{"lineno":299},{"lineno":301},{"lineno":303},{"lineno":305},{"lineno":307},{"lineno":309},{"lineno":311},{"lineno":313},{"lineno":315},{"lineno":316},{"lineno":317},{"lineno":318},{"lineno":319},{"lineno":321},{"lineno":325},{"lineno":329},{"lineno":330},{"lineno":335},{"lineno":358},{"lineno":362},{"lineno":366},{"lineno":370},{"lineno":374},{"lineno":378},{"lineno":382},{"lineno":383},{"lineno":385},{"lineno":387},{"lineno":389},{"lineno":390},{"lineno":391},{"lineno":392},{"lineno":393},{"lineno":394},{"lineno":396},{"lineno":399},{"lineno":401},{"lineno":403},{"lineno":404},{"lineno":406},{"lineno":411},{"lineno":412},{"lineno":414},{"lineno":416},{"lineno":418},{"lineno":419},{"lineno":420},{"lineno":421},{"lineno":422},{"lineno":424},{"lineno":425},{"lineno":426},{"lineno":428},{"lineno":431},{"lineno":432},{"lineno":434},{"lineno":437},{"lineno":439},{"lineno":441},{"lineno":442},{"lineno":444},{"lineno":451}],"missing":196,"seen":259,"total":455,"coverage":{"5":{"partial":false,"source":"  return function(value) {\r","missing":[{}]},"6":{"partial":false,"source":"    var k = f(value);\r","missing":[{"startCol":4,"endCol":21},{"startCol":12,"endCol":20},{}]},"7":{"partial":false,"source":"    k.sort();\r","missing":[{},{"startCol":4,"endCol":12}]},"8":{"partial":false,"source":"    return k;\r","missing":[{},{"startCol":4,"endCol":13}]},"9":{"partial":false,"source":"  };\r","missing":[{}]},"14":{"partial":false,"source":"  opts = opts || {};\r","missing":[{"startCol":2,"endCol":20},{"startCol":9,"endCol":13}]},"16":{"partial":false,"source":"  this.seen = [];\r","missing":[{"startCol":2,"endCol":17}]},"17":{"partial":false,"source":"  this.keys = genKeysFunc(opts.keys === false ? Object.getOwnPropertyNames : Object.keys);\r","missing":[{"startCol":2,"endCol":90},{"startCol":14,"endCol":89},{"startCol":26,"endCol":45},{"startCol":48,"endCol":74},{"startCol":77,"endCol":88}]},"19":{"partial":false,"source":"  this.maxLineLength = typeof opts.maxLineLength === 'number' ? opts.maxLineLength : 60;\r","missing":[{"startCol":2,"endCol":88},{"startCol":23,"endCol":48},{"startCol":64,"endCol":82},{"startCol":85,"endCol":87}]},"20":{"partial":false,"source":"  this.propSep = opts.propSep || ',';\r","missing":[{"startCol":2,"endCol":37},{"startCol":17,"endCol":36}]},"22":{"partial":false,"source":"  this.isUTCdate = !!opts.isUTCdate;\r","missing":[{"startCol":2,"endCol":36},{"startCol":19,"endCol":35},{"startCol":20,"endCol":35}]},"29":{"partial":false,"source":"    var t = getType(value);\r","missing":[{"startCol":4,"endCol":27},{"startCol":12,"endCol":26}]},"30":{"partial":false,"source":"    var name1 = t.type, name2 = t.type;\r","missing":[{"startCol":4,"endCol":39}]},"32":{"partial":false,"source":"      name1 += '_' + t.cls;\r","missing":[{"startCol":6,"endCol":27},{"startCol":15,"endCol":26}]},"33":{"partial":false,"source":"      name2 += '_' + t.cls;\r","missing":[{"startCol":6,"endCol":27},{"startCol":15,"endCol":26}]},"36":{"partial":false,"source":"      name2 += '_' + t.sub;\r","missing":[{"startCol":6,"endCol":27},{"startCol":15,"endCol":26}]},"38":{"partial":false,"source":"    var f = this['_format_' + name2] || this['_format_' + name1] || this['_format_' + t.type] || this.defaultFormat;\r","missing":[{"startCol":4,"endCol":116},{"startCol":12,"endCol":64},{"startCol":17,"endCol":35},{"startCol":30,"endCol":35},{"startCol":45,"endCol":63},{"startCol":58,"endCol":63},{"startCol":73,"endCol":92}]},"39":{"partial":false,"source":"    return f.call(this, value).trim();\r","missing":[{"startCol":4,"endCol":38},{"startCol":11,"endCol":30}]},"43":{"partial":false,"source":"    opts = opts || {};\r","missing":[{"startCol":4,"endCol":22},{"startCol":11,"endCol":15}]},"44":{"partial":false,"source":"    var mainKeys = opts.keys || this.keys(value);\r","missing":[{"startCol":4,"endCol":49},{"startCol":19,"endCol":48},{"startCol":32,"endCol":48}]},"46":{"partial":false,"source":"    var len = 0;\r","missing":[{"startCol":4,"endCol":16}]},"48":{"partial":false,"source":"    var formatPropertyValue = opts.formatPropertyValue || this.formatPropertyValue;\r","missing":[{"startCol":4,"endCol":83},{"startCol":30,"endCol":82}]},"49":{"partial":false,"source":"    var formatPropertyName = opts.formatPropertyName || this.formatPropertyName;\r","missing":[{"startCol":4,"endCol":80},{"startCol":29,"endCol":79}]},"50":{"partial":false,"source":"    var keyValueSep = opts.keyValueSep || ': ';\r","missing":[{"startCol":4,"endCol":47},{"startCol":22,"endCol":46}]},"51":{"partial":false,"source":"    var keyFilter = opts.keyFilter || function() { return true; };\r","missing":[{"startCol":4,"endCol":66},{"startCol":20,"endCol":65},{"startCol":51,"endCol":63}]},"53":{"partial":false,"source":"    this.seen.push(value);\r","missing":[{"startCol":4,"endCol":25}]},"54":{"partial":false,"source":"    var keys = [];\r","missing":[{"startCol":4,"endCol":18}]},"56":{"partial":false,"source":"    mainKeys.forEach(function(key) {\r","missing":[{}]},"57":{"partial":false,"source":"      if(!keyFilter(key)) return;\r","missing":[{"startCol":10,"endCol":24},{},{"startCol":9,"endCol":24},{"startCol":26,"endCol":33}]},"58":{"partial":false,"source":"\r","missing":[{}]},"59":{"partial":false,"source":"      var fName = formatPropertyName.call(this, key);\r","missing":[{},{"startCol":6,"endCol":53},{"startCol":18,"endCol":52}]},"60":{"partial":false,"source":"\r","missing":[{}]},"61":{"partial":false,"source":"      var f = (fName ? fName + keyValueSep : '') + formatPropertyValue.call(this, value, key);\r","missing":[{"startCol":6,"endCol":94},{"startCol":14,"endCol":93},{"startCol":15,"endCol":20},{"startCol":23,"endCol":28},{"startCol":31,"endCol":42},{},{"startCol":45,"endCol":47},{"startCol":51,"endCol":93}]},"62":{"partial":false,"source":"      len += f.length;\r","missing":[{},{"startCol":6,"endCol":22}]},"63":{"partial":false,"source":"      keys.push(f);\r","missing":[{},{"startCol":6,"endCol":18}]},"64":{"partial":false,"source":"    }, this);\r","missing":[{}]},"65":{"partial":false,"source":"    this.seen.pop();\r","missing":[{"startCol":4,"endCol":19}]},"67":{"partial":false,"source":"    (opts.additionalProperties || []).forEach(function(keyValue) {\r","missing":[{},{"startCol":5,"endCol":36}]},"68":{"partial":false,"source":"      var f = keyValue[0] + keyValueSep + this.format(keyValue[1]);\r","missing":[{"startCol":6,"endCol":67},{"startCol":42,"endCol":66},{},{"startCol":14,"endCol":39},{"startCol":28,"endCol":39}]},"69":{"partial":false,"source":"      len += f.length;\r","missing":[{"startCol":6,"endCol":22},{}]},"70":{"partial":false,"source":"      keys.push(f);\r","missing":[{},{"startCol":6,"endCol":18}]},"71":{"partial":false,"source":"    }, this);\r","missing":[{}]},"73":{"partial":false,"source":"    var prefix = opts.prefix || Formatter.constructorName(value) || '';\r","missing":[{"startCol":4,"endCol":71},{"startCol":17,"endCol":64},{"startCol":32,"endCol":64}]},"74":{"partial":false,"source":"    if(prefix.length > 0) prefix += ' ';\r","missing":[{"startCol":7,"endCol":24},{"startCol":26,"endCol":40}]},"76":{"partial":false,"source":"    var lbracket, rbracket;\r","missing":[{"startCol":4,"endCol":27}]},"77":{"partial":false,"source":"    if(Array.isArray(opts.brackets)) {\r","missing":[{"startCol":7,"endCol":35}]},"78":{"partial":false,"source":"      lbracket = opts.brackets && opts.brackets[0];\r","missing":[{"startCol":6,"endCol":51},{"startCol":17,"endCol":50}]},"79":{"partial":false,"source":"      rbracket = opts.brackets && opts.brackets[1];\r","missing":[{"startCol":6,"endCol":51},{"startCol":17,"endCol":50}]},"81":{"partial":false,"source":"      lbracket = '{';\r","missing":[{"startCol":6,"endCol":21}]},"82":{"partial":false,"source":"      rbracket = '}';\r","missing":[{"startCol":6,"endCol":21}]},"85":{"partial":false,"source":"    var rootValue = opts.value || '';\r","missing":[{"startCol":4,"endCol":37},{"startCol":20,"endCol":36}]},"87":{"partial":false,"source":"    if(keys.length === 0)\r","missing":[{"startCol":7,"endCol":24}]},"88":{"partial":false,"source":"      return rootValue || (prefix + lbracket + rbracket);\r","missing":[{"startCol":6,"endCol":57},{"startCol":13,"endCol":22},{"startCol":27,"endCol":33},{"startCol":36,"endCol":44},{"startCol":47,"endCol":55}]},"90":{"partial":false,"source":"    if(len <= this.maxLineLength) {\r","missing":[{"startCol":7,"endCol":10}]},"91":{"partial":false,"source":"      return prefix + lbracket + ' ' + (rootValue ? rootValue + ' ' : '') + keys.join(this.propSep + ' ') + ' ' + rbracket;\r","missing":[{"startCol":6,"endCol":123},{"startCol":13,"endCol":19},{"startCol":22,"endCol":30},{"startCol":40,"endCol":49},{"startCol":52,"endCol":61},{"startCol":70,"endCol":72},{"startCol":76,"endCol":105},{"startCol":86,"endCol":104},{"startCol":114,"endCol":122}]},"93":{"partial":false,"source":"      return prefix + lbracket + '\\n' + (rootValue ? '  ' + rootValue + '\\n' : '') + keys.map(util.addSpaces).join(this.propSep + '\\n') + '\\n' + rbracket;\r","missing":[{"startCol":6,"endCol":154},{"startCol":13,"endCol":19},{"startCol":22,"endCol":30},{"startCol":41,"endCol":50},{"startCol":53,"endCol":69},{"startCol":60,"endCol":69},{"startCol":79,"endCol":81},{"startCol":85,"endCol":109},{"startCol":115,"endCol":134},{"startCol":145,"endCol":153}]},"98":{"partial":false,"source":"    props = props || this.keys(value);\r","missing":[{"startCol":4,"endCol":38},{"startCol":12,"endCol":17},{"startCol":21,"endCol":37}]},"100":{"partial":false,"source":"    var len = 0;\r","missing":[{"startCol":4,"endCol":16}]},"102":{"partial":false,"source":"    this.seen.push(value);\r","missing":[{"startCol":4,"endCol":25}]},"103":{"partial":false,"source":"    props = props.map(function(prop) {\r","missing":[{}]},"104":{"partial":false,"source":"      var f = this.formatProperty(value, prop);\r","missing":[{"startCol":6,"endCol":47},{},{"startCol":14,"endCol":46}]},"105":{"partial":false,"source":"      len += f.length;\r","missing":[{},{"startCol":6,"endCol":22}]},"106":{"partial":false,"source":"      return f;\r","missing":[{"startCol":6,"endCol":15},{}]},"107":{"partial":false,"source":"    }, this);\r","missing":[{}]},"108":{"partial":false,"source":"    this.seen.pop();\r","missing":[{"startCol":4,"endCol":19}]},"110":{"partial":false,"source":"    if(props.length === 0) return '{}';\r","missing":[{"startCol":7,"endCol":25},{"startCol":27,"endCol":39}]},"112":{"partial":false,"source":"    if(len <= this.maxLineLength) {\r","missing":[{"startCol":7,"endCol":10}]},"113":{"partial":false,"source":"      return '{ ' + (prefix ? prefix + ' ' : '') + props.join(this.propSep + ' ') + ' }';\r","missing":[{"startCol":6,"endCol":89},{"startCol":13,"endCol":48},{"startCol":21,"endCol":27},{"startCol":30,"endCol":36},{"startCol":45,"endCol":47},{"startCol":51,"endCol":81},{"startCol":62,"endCol":80}]},"115":{"partial":false,"source":"      return '{' + '\\n' + (prefix ? '  ' + prefix + '\\n' : '') + props.map(util.addSpaces).join(this.propSep + '\\n') + '\\n' + '}';\r","missing":[{"startCol":6,"endCol":130},{"startCol":13,"endCol":23},{"startCol":27,"endCol":33},{"startCol":36,"endCol":49},{"startCol":43,"endCol":49},{"startCol":59,"endCol":61},{"startCol":65,"endCol":90},{"startCol":96,"endCol":115}]},"120":{"partial":false,"source":"    return name.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*$/) ? name : this.format(name);\r","missing":[{"startCol":4,"endCol":79},{"startCol":11,"endCol":51},{"startCol":54,"endCol":58},{"startCol":61,"endCol":78}]},"124":{"partial":false,"source":"    var desc = Formatter.getPropertyDescriptor(value, prop);\r","missing":[{"startCol":4,"endCol":60},{"startCol":15,"endCol":59}]},"126":{"partial":false,"source":"    var propName = this.formatPropertyName(prop);\r","missing":[{"startCol":4,"endCol":49},{"startCol":19,"endCol":48}]},"128":{"partial":false,"source":"    var propValue = desc.get && desc.set ?\r","missing":[{"startCol":20,"endCol":40},{}]},"129":{"partial":false,"source":"      '[Getter/Setter]' : desc.get ?\r","missing":[{},{"startCol":6,"endCol":23}]},"130":{"partial":false,"source":"      '[Getter]' : desc.set ?\r","missing":[{},{"startCol":6,"endCol":16}]},"131":{"partial":false,"source":"      '[Setter]' : this.seen.indexOf(desc.value) >= 0 ?\r","missing":[{"startCol":6,"endCol":16},{"startCol":19,"endCol":48},{}]},"132":{"partial":false,"source":"      '[Circular]' :\r","missing":[{"startCol":6,"endCol":18},{}]},"133":{"partial":false,"source":"      this.format(desc.value);\r","missing":[{},{"startCol":6,"endCol":29}]},"135":{"partial":false,"source":"    return propName + ': ' + propValue;\r","missing":[{"startCol":4,"endCol":39},{"startCol":11,"endCol":19},{"startCol":29,"endCol":38}]},"139":{"partial":false,"source":"    var desc = Formatter.getPropertyDescriptor(value, prop);\r","missing":[{"startCol":4,"endCol":60},{"startCol":15,"endCol":59}]},"141":{"partial":false,"source":"    var propValue = desc.get && desc.set ?\r","missing":[{"startCol":20,"endCol":40},{}]},"142":{"partial":false,"source":"      '[Getter/Setter]' : desc.get ?\r","missing":[{"startCol":6,"endCol":23},{}]},"143":{"partial":false,"source":"      '[Getter]' : desc.set ?\r","missing":[{},{"startCol":6,"endCol":16}]},"144":{"partial":false,"source":"      '[Setter]' : this.seen.indexOf(desc.value) >= 0 ?\r","missing":[{"startCol":19,"endCol":48},{},{"startCol":6,"endCol":16}]},"145":{"partial":false,"source":"      '[Circular]' :\r","missing":[{},{"startCol":6,"endCol":18}]},"146":{"partial":false,"source":"      this.format(desc.value);\r","missing":[{"startCol":6,"endCol":29},{}]},"148":{"partial":false,"source":"    return propValue;\r","missing":[{"startCol":4,"endCol":21}]},"159":{"partial":false,"source":"  return function(value) {\r","missing":[{}]},"160":{"partial":false,"source":"    var prefix = f.call(this, value);\r","missing":[{},{"startCol":4,"endCol":37},{"startCol":17,"endCol":36}]},"161":{"partial":false,"source":"    var props = this.keys(value);\r","missing":[{"startCol":4,"endCol":33},{"startCol":16,"endCol":32},{}]},"162":{"partial":false,"source":"    if(props.length == 0) return prefix;\r","missing":[{"startCol":7,"endCol":24},{},{"startCol":26,"endCol":40}]},"163":{"partial":false,"source":"    else return this.formatObject(value, prefix, props);\r","missing":[{},{"startCol":9,"endCol":56},{"startCol":16,"endCol":55}]},"164":{"partial":false,"source":"  };\r","missing":[{}]},"171":{"partial":false,"source":"    return f.name;\r","missing":[{"startCol":4,"endCol":18}]},"173":{"partial":false,"source":"  var name = f.toString().match(functionNameRE)[1];\r","missing":[{"startCol":2,"endCol":51},{"startCol":13,"endCol":25}]},"174":{"partial":false,"source":"  return name;\r","missing":[{"startCol":2,"endCol":14}]},"178":{"partial":false,"source":"  while (obj) {\r","missing":[{"startCol":9,"endCol":12}]},"179":{"partial":false,"source":"    var descriptor = Object.getOwnPropertyDescriptor(obj, 'constructor');\r","missing":[{"startCol":4,"endCol":73},{"startCol":21,"endCol":72}]},"180":{"partial":false,"source":"    if (descriptor !== undefined &&\r","missing":[{},{"startCol":23,"endCol":32},{"startCol":8,"endCol":18}]},"181":{"partial":false,"source":"        typeof descriptor.value === 'function') {\r","missing":[{"startCol":8,"endCol":46},{}]},"183":{"partial":false,"source":"        var name = Formatter.functionName(descriptor.value);\r","missing":[{"startCol":8,"endCol":60},{"startCol":19,"endCol":59}]},"184":{"partial":false,"source":"        if(name !== '') {\r","missing":[{"startCol":11,"endCol":15}]},"185":{"partial":false,"source":"          return name;\r","missing":[{"startCol":10,"endCol":22}]},"189":{"partial":false,"source":"    obj = Object.getPrototypeOf(obj);\r","missing":[{"startCol":4,"endCol":37},{"startCol":10,"endCol":36}]},"194":{"partial":false,"source":"  var desc;\r","missing":[{"startCol":2,"endCol":11}]},"196":{"partial":false,"source":"    desc = Object.getOwnPropertyDescriptor(obj, value) || {value: obj[value]};\r","missing":[{"startCol":4,"endCol":78},{"startCol":11,"endCol":54}]},"198":{"partial":false,"source":"    desc = {value: e};\r","missing":[{"startCol":4,"endCol":22}]},"200":{"partial":false,"source":"  return desc;\r","missing":[{"startCol":2,"endCol":14}]},"205":{"partial":false,"source":"    var max = this.byteArrayMaxLength || 50;\r","missing":[{"startCol":4,"endCol":44},{"startCol":14,"endCol":43}]},"206":{"partial":false,"source":"    var length = value[lengthProp];\r","missing":[{"startCol":4,"endCol":35}]},"207":{"partial":false,"source":"    var formattedValues = [];\r","missing":[{"startCol":4,"endCol":29}]},"208":{"partial":false,"source":"    var len = 0;\r","missing":[{"startCol":4,"endCol":16}]},"209":{"partial":false,"source":"    for(var i = 0; i < max && i < length; i++) {\r","missing":[{"startCol":19,"endCol":20},{"startCol":23,"endCol":26},{"startCol":30,"endCol":31},{"startCol":34,"endCol":40},{"startCol":42,"endCol":45}]},"210":{"partial":false,"source":"      var b = value[i] || 0;\r","missing":[{"startCol":6,"endCol":28},{"startCol":14,"endCol":27}]},"211":{"partial":false,"source":"      var v = util.pad0(b.toString(16), padding);\r","missing":[{"startCol":6,"endCol":49},{"startCol":14,"endCol":48},{"startCol":24,"endCol":38}]},"212":{"partial":false,"source":"      len += v.length;\r","missing":[{"startCol":6,"endCol":22}]},"213":{"partial":false,"source":"      formattedValues.push(v);\r","missing":[{"startCol":6,"endCol":29}]},"215":{"partial":false,"source":"    var prefix = value.constructor.name || name || '';\r","missing":[{"startCol":4,"endCol":54},{"startCol":17,"endCol":47},{"startCol":43,"endCol":47}]},"216":{"partial":false,"source":"    if(prefix) prefix += ' ';\r","missing":[{"startCol":7,"endCol":13},{"startCol":15,"endCol":29}]},"218":{"partial":false,"source":"    if(formattedValues.length === 0)\r","missing":[{"startCol":7,"endCol":35}]},"219":{"partial":false,"source":"      return prefix + '[]';\r","missing":[{"startCol":6,"endCol":27},{"startCol":13,"endCol":19}]},"221":{"partial":false,"source":"    if(len <= this.maxLineLength) {\r","missing":[{"startCol":7,"endCol":10}]},"222":{"partial":false,"source":"      return prefix + '[ ' + formattedValues.join(this.propSep + ' ') + ' ' + ']';\r","missing":[{"startCol":6,"endCol":82},{"startCol":13,"endCol":19},{"startCol":29,"endCol":69},{"startCol":50,"endCol":68}]},"224":{"partial":false,"source":"      return prefix + '[\\n' + formattedValues.map(util.addSpaces).join(this.propSep + '\\n') + '\\n' + ']';\r","missing":[{"startCol":6,"endCol":105},{"startCol":13,"endCol":19},{"startCol":30,"endCol":65},{"startCol":71,"endCol":90}]},"235":{"partial":false,"source":"    return this._formatObject(value, {\r","missing":[{}]},"236":{"partial":false,"source":"      additionalProperties: [['[[PrimitiveValue]]', value.valueOf()]]\r","missing":[{"startCol":52,"endCol":67},{}]},"237":{"partial":false,"source":"    });\r","missing":[{}]},"242":{"partial":false,"source":"  var realValue = value.valueOf();\r","missing":[{"startCol":2,"endCol":34},{"startCol":18,"endCol":33}]},"244":{"partial":false,"source":"  return this._formatObject(value, {\r","missing":[{}]},"245":{"partial":false,"source":"    keyFilter: function(key) {\r","missing":[{}]},"246":{"partial":false,"source":"      //skip useless indexed properties\r","missing":[{}]},"247":{"partial":false,"source":"      return !(key.match(/\\d+/) && parseInt(key, 10) < realValue.length);\r","missing":[{"startCol":6,"endCol":73},{},{"startCol":15,"endCol":71},{"startCol":35,"endCol":71},{"startCol":13,"endCol":72}]},"248":{"partial":false,"source":"    },\r","missing":[{}]},"249":{"partial":false,"source":"    additionalProperties: [['[[PrimitiveValue]]', realValue]]\r","missing":[{}]},"250":{"partial":false,"source":"  });\r","missing":[{}]},"254":{"partial":false,"source":"  return this._formatObject(value, {\r","missing":[{}]},"255":{"partial":false,"source":"    value: String(value)\r","missing":[{"startCol":11,"endCol":24},{}]},"256":{"partial":false,"source":"  });\r","missing":[{}]},"260":{"partial":false,"source":"  if(value === 0 && 1 / value < 0) return '-0';\r","missing":[{"startCol":5,"endCol":10},{"startCol":20,"endCol":29},{"startCol":24,"endCol":29},{"startCol":35,"endCol":47}]},"261":{"partial":false,"source":"  return String(value);\r","missing":[{"startCol":2,"endCol":23},{"startCol":9,"endCol":22}]},"265":{"partial":false,"source":"  return '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\r","missing":[{},{"startCol":16,"endCol":37}]},"266":{"partial":false,"source":"      .replace(/'/g, \"\\\\'\")\r","missing":[{}]},"267":{"partial":false,"source":"      .replace(/\\\\\"/g, '\"') + '\\'';\r","missing":[{}]},"271":{"partial":false,"source":"  return this._formatObject(value);\r","missing":[{"startCol":2,"endCol":35},{"startCol":9,"endCol":34}]},"275":{"partial":false,"source":"  return this._formatObject(value, {\r","missing":[{}]},"276":{"partial":false,"source":"    prefix: 'Arguments',\r","missing":[{}]},"277":{"partial":false,"source":"    formatPropertyName: function(key) {\r","missing":[{}]},"278":{"partial":false,"source":"      if(!key.match(/\\d+/)) {\r","missing":[{},{"startCol":9,"endCol":26},{"startCol":10,"endCol":26}]},"279":{"partial":false,"source":"        return this.formatPropertyName(key);\r","missing":[{},{"startCol":8,"endCol":44},{"startCol":15,"endCol":43}]},"280":{"partial":false,"source":"      }\r","missing":[{}]},"281":{"partial":false,"source":"    },\r","missing":[{}]},"282":{"partial":false,"source":"    brackets: ['[', ']']\r","missing":[{}]},"283":{"partial":false,"source":"  });\r","missing":[{}]},"287":{"partial":false,"source":"  return this._formatObject(value, {\r","missing":[{}]},"288":{"partial":false,"source":"    formatPropertyName: function(key) {\r","missing":[{}]},"289":{"partial":false,"source":"      if(!key.match(/\\d+/)) {\r","missing":[{"startCol":9,"endCol":26},{"startCol":10,"endCol":26},{}]},"290":{"partial":false,"source":"        return this.formatPropertyName(key);\r","missing":[{},{"startCol":15,"endCol":43},{"startCol":8,"endCol":44}]},"291":{"partial":false,"source":"      }\r","missing":[{}]},"292":{"partial":false,"source":"    },\r","missing":[{}]},"293":{"partial":false,"source":"    brackets: ['[', ']']\r","missing":[{}]},"294":{"partial":false,"source":"  });\r","missing":[{}]},"299":{"partial":false,"source":"  var prefix = isUTC ? 'UTC' : '';\r","missing":[{"startCol":2,"endCol":34},{"startCol":15,"endCol":20},{"startCol":23,"endCol":28},{"startCol":31,"endCol":33}]},"301":{"partial":false,"source":"  var date = value['get' + prefix + 'FullYear']() +\r","missing":[{"startCol":13,"endCol":49},{"startCol":19,"endCol":33},{},{"startCol":27,"endCol":33}]},"302":{"partial":false,"source":"    '-' +\r","missing":[{}]},"303":{"partial":false,"source":"    util.pad0(value['get' + prefix + 'Month']() + 1, 2) +\r","missing":[{"startCol":4,"endCol":55},{"startCol":14,"endCol":47},{"startCol":20,"endCol":34},{"startCol":28,"endCol":34},{}]},"304":{"partial":false,"source":"    '-' +\r","missing":[{}]},"305":{"partial":false,"source":"    util.pad0(value['get' + prefix + 'Date'](), 2);\r","missing":[{},{"startCol":28,"endCol":34},{"startCol":20,"endCol":34},{"startCol":14,"endCol":46},{"startCol":4,"endCol":50}]},"307":{"partial":false,"source":"  var time = util.pad0(value['get' + prefix + 'Hours'](), 2) +\r","missing":[{"startCol":13,"endCol":60},{},{"startCol":37,"endCol":43},{"startCol":29,"endCol":43},{"startCol":23,"endCol":56}]},"308":{"partial":false,"source":"    ':' +\r","missing":[{}]},"309":{"partial":false,"source":"    util.pad0(value['get' + prefix + 'Minutes'](), 2) +\r","missing":[{"startCol":28,"endCol":34},{},{"startCol":4,"endCol":53},{"startCol":14,"endCol":49},{"startCol":20,"endCol":34}]},"310":{"partial":false,"source":"    ':' +\r","missing":[{}]},"311":{"partial":false,"source":"    util.pad0(value['get' + prefix + 'Seconds'](), 2) +\r","missing":[{},{"startCol":28,"endCol":34},{"startCol":20,"endCol":34},{"startCol":14,"endCol":49},{"startCol":4,"endCol":53}]},"312":{"partial":false,"source":"    '.' +\r","missing":[{}]},"313":{"partial":false,"source":"    util.pad0(value['get' + prefix + 'Milliseconds'](), 3);\r","missing":[{"startCol":28,"endCol":34},{},{"startCol":4,"endCol":58},{"startCol":14,"endCol":54},{"startCol":20,"endCol":34}]},"315":{"partial":false,"source":"  var to = value.getTimezoneOffset();\r","missing":[{"startCol":2,"endCol":37},{"startCol":11,"endCol":36}]},"316":{"partial":false,"source":"  var absTo = Math.abs(to);\r","missing":[{"startCol":2,"endCol":27},{"startCol":14,"endCol":26}]},"317":{"partial":false,"source":"  var hours = Math.floor(absTo / 60);\r","missing":[{"startCol":2,"endCol":37},{"startCol":14,"endCol":36},{"startCol":25,"endCol":30}]},"318":{"partial":false,"source":"  var minutes = absTo - hours * 60;\r","missing":[{"startCol":2,"endCol":35},{"startCol":16,"endCol":21},{"startCol":24,"endCol":29}]},"319":{"partial":false,"source":"  var tzFormat = (to < 0 ? '+' : '-') + util.pad0(hours, 2) + util.pad0(minutes, 2);\r","missing":[{"startCol":2,"endCol":84},{"startCol":17,"endCol":59},{"startCol":18,"endCol":20},{"startCol":27,"endCol":30},{"startCol":33,"endCol":36},{"startCol":40,"endCol":59},{"startCol":62,"endCol":83}]},"321":{"partial":false,"source":"  return date + ' ' + time + (isUTC ? '' : ' ' + tzFormat);\r","missing":[{"startCol":2,"endCol":59},{"startCol":9,"endCol":13},{"startCol":22,"endCol":26},{"startCol":30,"endCol":35},{"startCol":38,"endCol":40},{"startCol":43,"endCol":57},{"startCol":49,"endCol":57}]},"325":{"partial":false,"source":"  return this._formatObject(value, { value: formatDate(value, this.isUTCdate) });\r","missing":[{"startCol":2,"endCol":81},{"startCol":9,"endCol":80},{"startCol":44,"endCol":77}]},"329":{"partial":false,"source":"  return this._formatObject(value, {\r","missing":[{}]},"330":{"partial":false,"source":"    additionalProperties: [['name', Formatter.functionName(value)]]\r","missing":[{},{"startCol":36,"endCol":65}]},"331":{"partial":false,"source":"  });\r","missing":[{}]},"335":{"partial":false,"source":"  return this._formatObject(value, {\r","missing":[{}]},"336":{"partial":false,"source":"    prefix: value.name,\r","missing":[{}]},"337":{"partial":false,"source":"    additionalProperties: [['message', value.message]]\r","missing":[{}]},"338":{"partial":false,"source":"  });\r","missing":[{}]},"358":{"partial":false,"source":"  return '[Promise]';//TODO it could be nice to inspect its state and value\r","missing":[{"startCol":2,"endCol":21}]},"362":{"partial":false,"source":"  return '[XMLHttpRequest]';//TODO it could be nice to inspect its state\r","missing":[{"startCol":2,"endCol":28}]},"366":{"partial":false,"source":"  return value.outerHTML;\r","missing":[{"startCol":2,"endCol":25}]},"370":{"partial":false,"source":"  return value.nodeValue;\r","missing":[{"startCol":2,"endCol":25}]},"374":{"partial":false,"source":"  return value.documentElement.outerHTML;\r","missing":[{"startCol":2,"endCol":41}]},"378":{"partial":false,"source":"  return '[Host]';\r","missing":[{"startCol":2,"endCol":18}]},"382":{"partial":false,"source":"  var iter = value.values();\r","missing":[{"startCol":2,"endCol":28},{"startCol":13,"endCol":27}]},"383":{"partial":false,"source":"  var len = 0;\r","missing":[{"startCol":2,"endCol":14}]},"385":{"partial":false,"source":"  this.seen.push(value);\r","missing":[{"startCol":2,"endCol":23}]},"387":{"partial":false,"source":"  var props = [];\r","missing":[{"startCol":2,"endCol":17}]},"389":{"partial":false,"source":"  var next = iter.next();\r","missing":[{"startCol":2,"endCol":25},{"startCol":13,"endCol":24}]},"390":{"partial":false,"source":"  while(!next.done) {\r","missing":[{"startCol":8,"endCol":18}]},"391":{"partial":false,"source":"    var val = next.value;\r","missing":[{"startCol":4,"endCol":25}]},"392":{"partial":false,"source":"    var f = this.format(val);\r","missing":[{"startCol":4,"endCol":29},{"startCol":12,"endCol":28}]},"393":{"partial":false,"source":"    len += f.length;\r","missing":[{"startCol":4,"endCol":20}]},"394":{"partial":false,"source":"    props.push(f);\r","missing":[{"startCol":4,"endCol":17}]},"396":{"partial":false,"source":"    next = iter.next();\r","missing":[{"startCol":4,"endCol":23},{"startCol":11,"endCol":22}]},"399":{"partial":false,"source":"  this.seen.pop();\r","missing":[{"startCol":2,"endCol":17}]},"401":{"partial":false,"source":"  if(props.length === 0) return 'Set {}';\r","missing":[{"startCol":5,"endCol":23},{"startCol":25,"endCol":41}]},"403":{"partial":false,"source":"  if(len <= this.maxLineLength) {\r","missing":[{"startCol":5,"endCol":8}]},"404":{"partial":false,"source":"    return 'Set { ' + props.join(this.propSep + ' ') + ' }';\r","missing":[{"startCol":4,"endCol":60},{"startCol":11,"endCol":52},{"startCol":22,"endCol":52},{"startCol":33,"endCol":51}]},"406":{"partial":false,"source":"    return 'Set {\\n' + props.map(util.addSpaces).join(this.propSep + '\\n') + '\\n' + '}';\r","missing":[{"startCol":4,"endCol":88},{"startCol":11,"endCol":74},{"startCol":23,"endCol":48},{"startCol":54,"endCol":73}]},"411":{"partial":false,"source":"  var iter = value.entries();\r","missing":[{"startCol":2,"endCol":29},{"startCol":13,"endCol":28}]},"412":{"partial":false,"source":"  var len = 0;\r","missing":[{"startCol":2,"endCol":14}]},"414":{"partial":false,"source":"  this.seen.push(value);\r","missing":[{"startCol":2,"endCol":23}]},"416":{"partial":false,"source":"  var props = [];\r","missing":[{"startCol":2,"endCol":17}]},"418":{"partial":false,"source":"  var next = iter.next();\r","missing":[{"startCol":2,"endCol":25},{"startCol":13,"endCol":24}]},"419":{"partial":false,"source":"  while(!next.done) {\r","missing":[{"startCol":8,"endCol":18}]},"420":{"partial":false,"source":"    var val = next.value;\r","missing":[{"startCol":4,"endCol":25}]},"421":{"partial":false,"source":"    var fK = this.format(val[0]);\r","missing":[{"startCol":4,"endCol":33},{"startCol":13,"endCol":32}]},"422":{"partial":false,"source":"    var fV = this.format(val[1]);\r","missing":[{"startCol":4,"endCol":33},{"startCol":13,"endCol":32}]},"424":{"partial":false,"source":"    var f;\r","missing":[{"startCol":4,"endCol":10}]},"425":{"partial":false,"source":"    if((fK.length + fV.length + 4) <= this.maxLineLength) {\r","missing":[{"startCol":7,"endCol":56},{"startCol":8,"endCol":29}]},"426":{"partial":false,"source":"      f = fK + ' => ' + fV;\r","missing":[{"startCol":6,"endCol":27},{"startCol":10,"endCol":12},{"startCol":24,"endCol":26}]},"428":{"partial":false,"source":"      f = fK + ' =>\\n' + fV;\r","missing":[{"startCol":6,"endCol":28},{"startCol":10,"endCol":12},{"startCol":25,"endCol":27}]},"431":{"partial":false,"source":"    len += fK.length + fV.length + 4;\r","missing":[{"startCol":4,"endCol":37},{"startCol":11,"endCol":32}]},"432":{"partial":false,"source":"    props.push(f);\r","missing":[{"startCol":4,"endCol":17}]},"434":{"partial":false,"source":"    next = iter.next();\r","missing":[{"startCol":4,"endCol":23},{"startCol":11,"endCol":22}]},"437":{"partial":false,"source":"  this.seen.pop();\r","missing":[{"startCol":2,"endCol":17}]},"439":{"partial":false,"source":"  if(props.length === 0) return 'Map {}';\r","missing":[{"startCol":5,"endCol":23},{"startCol":25,"endCol":41}]},"441":{"partial":false,"source":"  if(len <= this.maxLineLength) {\r","missing":[{"startCol":5,"endCol":8}]},"442":{"partial":false,"source":"    return 'Map { ' + props.join(this.propSep + ' ') + ' }';\r","missing":[{"startCol":4,"endCol":60},{"startCol":11,"endCol":52},{"startCol":22,"endCol":52},{"startCol":33,"endCol":51}]},"444":{"partial":false,"source":"    return 'Map {\\n' + props.map(util.addSpaces).join(this.propSep + '\\n') + '\\n' + '}';\r","missing":[{"startCol":4,"endCol":88},{"startCol":11,"endCol":74},{"startCol":23,"endCol":48},{"startCol":54,"endCol":73}]},"451":{"partial":false,"source":"  return new Formatter(opts).format(value);\r","missing":[{"startCol":2,"endCol":43},{"startCol":9,"endCol":42}]}},"source":"var getType = require('should-type');\r\nvar util = require('./util');\r\n\r\nfunction genKeysFunc(f) {\r\n  return function(value) {\r\n    var k = f(value);\r\n    k.sort();\r\n    return k;\r\n  };\r\n}\r\n\r\n\r\nfunction Formatter(opts) {\r\n  opts = opts || {};\r\n\r\n  this.seen = [];\r\n  this.keys = genKeysFunc(opts.keys === false ? Object.getOwnPropertyNames : Object.keys);\r\n\r\n  this.maxLineLength = typeof opts.maxLineLength === 'number' ? opts.maxLineLength : 60;\r\n  this.propSep = opts.propSep || ',';\r\n\r\n  this.isUTCdate = !!opts.isUTCdate;\r\n}\r\n\r\nFormatter.prototype = {\r\n  constructor: Formatter,\r\n\r\n  format: function(value) {\r\n    var t = getType(value);\r\n    var name1 = t.type, name2 = t.type;\r\n    if(t.cls) {\r\n      name1 += '_' + t.cls;\r\n      name2 += '_' + t.cls;\r\n    }\r\n    if(t.sub) {\r\n      name2 += '_' + t.sub;\r\n    }\r\n    var f = this['_format_' + name2] || this['_format_' + name1] || this['_format_' + t.type] || this.defaultFormat;\r\n    return f.call(this, value).trim();\r\n  },\r\n\r\n  _formatObject: function(value, opts) {\r\n    opts = opts || {};\r\n    var mainKeys = opts.keys || this.keys(value);\r\n\r\n    var len = 0;\r\n\r\n    var formatPropertyValue = opts.formatPropertyValue || this.formatPropertyValue;\r\n    var formatPropertyName = opts.formatPropertyName || this.formatPropertyName;\r\n    var keyValueSep = opts.keyValueSep || ': ';\r\n    var keyFilter = opts.keyFilter || function() { return true; };\r\n\r\n    this.seen.push(value);\r\n    var keys = [];\r\n\r\n    mainKeys.forEach(function(key) {\r\n      if(!keyFilter(key)) return;\r\n\r\n      var fName = formatPropertyName.call(this, key);\r\n\r\n      var f = (fName ? fName + keyValueSep : '') + formatPropertyValue.call(this, value, key);\r\n      len += f.length;\r\n      keys.push(f);\r\n    }, this);\r\n    this.seen.pop();\r\n\r\n    (opts.additionalProperties || []).forEach(function(keyValue) {\r\n      var f = keyValue[0] + keyValueSep + this.format(keyValue[1]);\r\n      len += f.length;\r\n      keys.push(f);\r\n    }, this);\r\n\r\n    var prefix = opts.prefix || Formatter.constructorName(value) || '';\r\n    if(prefix.length > 0) prefix += ' ';\r\n\r\n    var lbracket, rbracket;\r\n    if(Array.isArray(opts.brackets)) {\r\n      lbracket = opts.brackets && opts.brackets[0];\r\n      rbracket = opts.brackets && opts.brackets[1];\r\n    } else {\r\n      lbracket = '{';\r\n      rbracket = '}';\r\n    }\r\n\r\n    var rootValue = opts.value || '';\r\n\r\n    if(keys.length === 0)\r\n      return rootValue || (prefix + lbracket + rbracket);\r\n\r\n    if(len <= this.maxLineLength) {\r\n      return prefix + lbracket + ' ' + (rootValue ? rootValue + ' ' : '') + keys.join(this.propSep + ' ') + ' ' + rbracket;\r\n    } else {\r\n      return prefix + lbracket + '\\n' + (rootValue ? '  ' + rootValue + '\\n' : '') + keys.map(util.addSpaces).join(this.propSep + '\\n') + '\\n' + rbracket;\r\n    }\r\n  },\r\n\r\n  formatObject: function(value, prefix, props) {\r\n    props = props || this.keys(value);\r\n\r\n    var len = 0;\r\n\r\n    this.seen.push(value);\r\n    props = props.map(function(prop) {\r\n      var f = this.formatProperty(value, prop);\r\n      len += f.length;\r\n      return f;\r\n    }, this);\r\n    this.seen.pop();\r\n\r\n    if(props.length === 0) return '{}';\r\n\r\n    if(len <= this.maxLineLength) {\r\n      return '{ ' + (prefix ? prefix + ' ' : '') + props.join(this.propSep + ' ') + ' }';\r\n    } else {\r\n      return '{' + '\\n' + (prefix ? '  ' + prefix + '\\n' : '') + props.map(util.addSpaces).join(this.propSep + '\\n') + '\\n' + '}';\r\n    }\r\n  },\r\n\r\n  formatPropertyName: function(name) {\r\n    return name.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*$/) ? name : this.format(name);\r\n  },\r\n\r\n  formatProperty: function(value, prop) {\r\n    var desc = Formatter.getPropertyDescriptor(value, prop);\r\n\r\n    var propName = this.formatPropertyName(prop);\r\n\r\n    var propValue = desc.get && desc.set ?\r\n      '[Getter/Setter]' : desc.get ?\r\n      '[Getter]' : desc.set ?\r\n      '[Setter]' : this.seen.indexOf(desc.value) >= 0 ?\r\n      '[Circular]' :\r\n      this.format(desc.value);\r\n\r\n    return propName + ': ' + propValue;\r\n  },\r\n\r\n  formatPropertyValue: function(value, prop) {\r\n    var desc = Formatter.getPropertyDescriptor(value, prop);\r\n\r\n    var propValue = desc.get && desc.set ?\r\n      '[Getter/Setter]' : desc.get ?\r\n      '[Getter]' : desc.set ?\r\n      '[Setter]' : this.seen.indexOf(desc.value) >= 0 ?\r\n      '[Circular]' :\r\n      this.format(desc.value);\r\n\r\n    return propValue;\r\n  }\r\n};\r\n\r\nFormatter.add = function add(type, cls, sub, f) {\r\n  var args = Array.prototype.slice.call(arguments);\r\n  f = args.pop();\r\n  Formatter.prototype['_format_' + args.join('_')] = f;\r\n};\r\n\r\nFormatter.formatObjectWithPrefix = function formatObjectWithPrefix(f) {\r\n  return function(value) {\r\n    var prefix = f.call(this, value);\r\n    var props = this.keys(value);\r\n    if(props.length == 0) return prefix;\r\n    else return this.formatObject(value, prefix, props);\r\n  };\r\n};\r\n\r\nvar functionNameRE = /^\\s*function\\s*(\\S*)\\s*\\(/;\r\n\r\nFormatter.functionName = function functionName(f) {\r\n  if(f.name) {\r\n    return f.name;\r\n  }\r\n  var name = f.toString().match(functionNameRE)[1];\r\n  return name;\r\n};\r\n\r\nFormatter.constructorName = function(obj) {\r\n  while (obj) {\r\n    var descriptor = Object.getOwnPropertyDescriptor(obj, 'constructor');\r\n    if (descriptor !== undefined &&\r\n        typeof descriptor.value === 'function') {\r\n\r\n        var name = Formatter.functionName(descriptor.value);\r\n        if(name !== '') {\r\n          return name;\r\n        }\r\n    }\r\n\r\n    obj = Object.getPrototypeOf(obj);\r\n  }\r\n};\r\n\r\nFormatter.getPropertyDescriptor = function(obj, value) {\r\n  var desc;\r\n  try {\r\n    desc = Object.getOwnPropertyDescriptor(obj, value) || {value: obj[value]};\r\n  } catch(e) {\r\n    desc = {value: e};\r\n  }\r\n  return desc;\r\n};\r\n\r\nFormatter.generateFunctionForIndexedArray = function generateFunctionForIndexedArray(lengthProp, name, padding) {\r\n  return function(value) {\r\n    var max = this.byteArrayMaxLength || 50;\r\n    var length = value[lengthProp];\r\n    var formattedValues = [];\r\n    var len = 0;\r\n    for(var i = 0; i < max && i < length; i++) {\r\n      var b = value[i] || 0;\r\n      var v = util.pad0(b.toString(16), padding);\r\n      len += v.length;\r\n      formattedValues.push(v);\r\n    }\r\n    var prefix = value.constructor.name || name || '';\r\n    if(prefix) prefix += ' ';\r\n\r\n    if(formattedValues.length === 0)\r\n      return prefix + '[]';\r\n\r\n    if(len <= this.maxLineLength) {\r\n      return prefix + '[ ' + formattedValues.join(this.propSep + ' ') + ' ' + ']';\r\n    } else {\r\n      return prefix + '[\\n' + formattedValues.map(util.addSpaces).join(this.propSep + '\\n') + '\\n' + ']';\r\n    }\r\n  };\r\n};\r\n\r\n['undefined', 'boolean', 'null', 'symbol'].forEach(function(name) {\r\n  Formatter.add(name, String);\r\n});\r\n\r\n['number', 'boolean'].forEach(function(name) {\r\n  Formatter.add('object', name, function(value) {\r\n    return this._formatObject(value, {\r\n      additionalProperties: [['[[PrimitiveValue]]', value.valueOf()]]\r\n    });\r\n  });\r\n});\r\n\r\nFormatter.add('object', 'string', function(value) {\r\n  var realValue = value.valueOf();\r\n\r\n  return this._formatObject(value, {\r\n    keyFilter: function(key) {\r\n      //skip useless indexed properties\r\n      return !(key.match(/\\d+/) && parseInt(key, 10) < realValue.length);\r\n    },\r\n    additionalProperties: [['[[PrimitiveValue]]', realValue]]\r\n  });\r\n});\r\n\r\nFormatter.add('object', 'regexp', function(value) {\r\n  return this._formatObject(value, {\r\n    value: String(value)\r\n  });\r\n});\r\n\r\nFormatter.add('number', function(value) {\r\n  if(value === 0 && 1 / value < 0) return '-0';\r\n  return String(value);\r\n});\r\n\r\nFormatter.add('string', function(value) {\r\n  return '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\r\n      .replace(/'/g, \"\\\\'\")\r\n      .replace(/\\\\\"/g, '\"') + '\\'';\r\n});\r\n\r\nFormatter.add('object', function(value) {\r\n  return this._formatObject(value);\r\n});\r\n\r\nFormatter.add('object', 'arguments', function(value) {\r\n  return this._formatObject(value, {\r\n    prefix: 'Arguments',\r\n    formatPropertyName: function(key) {\r\n      if(!key.match(/\\d+/)) {\r\n        return this.formatPropertyName(key);\r\n      }\r\n    },\r\n    brackets: ['[', ']']\r\n  });\r\n});\r\n\r\nFormatter.add('object', 'array', function(value) {\r\n  return this._formatObject(value, {\r\n    formatPropertyName: function(key) {\r\n      if(!key.match(/\\d+/)) {\r\n        return this.formatPropertyName(key);\r\n      }\r\n    },\r\n    brackets: ['[', ']']\r\n  });\r\n});\r\n\r\n\r\nfunction formatDate(value, isUTC) {\r\n  var prefix = isUTC ? 'UTC' : '';\r\n\r\n  var date = value['get' + prefix + 'FullYear']() +\r\n    '-' +\r\n    util.pad0(value['get' + prefix + 'Month']() + 1, 2) +\r\n    '-' +\r\n    util.pad0(value['get' + prefix + 'Date'](), 2);\r\n\r\n  var time = util.pad0(value['get' + prefix + 'Hours'](), 2) +\r\n    ':' +\r\n    util.pad0(value['get' + prefix + 'Minutes'](), 2) +\r\n    ':' +\r\n    util.pad0(value['get' + prefix + 'Seconds'](), 2) +\r\n    '.' +\r\n    util.pad0(value['get' + prefix + 'Milliseconds'](), 3);\r\n\r\n  var to = value.getTimezoneOffset();\r\n  var absTo = Math.abs(to);\r\n  var hours = Math.floor(absTo / 60);\r\n  var minutes = absTo - hours * 60;\r\n  var tzFormat = (to < 0 ? '+' : '-') + util.pad0(hours, 2) + util.pad0(minutes, 2);\r\n\r\n  return date + ' ' + time + (isUTC ? '' : ' ' + tzFormat);\r\n}\r\n\r\nFormatter.add('object', 'date', function(value) {\r\n  return this._formatObject(value, { value: formatDate(value, this.isUTCdate) });\r\n});\r\n\r\nFormatter.add('function', function(value) {\r\n  return this._formatObject(value, {\r\n    additionalProperties: [['name', Formatter.functionName(value)]]\r\n  });\r\n});\r\n\r\nFormatter.add('object', 'error', function(value) {\r\n  return this._formatObject(value, {\r\n    prefix: value.name,\r\n    additionalProperties: [['message', value.message]]\r\n  });\r\n});\r\n\r\nFormatter.add('object', 'buffer', Formatter.generateFunctionForIndexedArray('length', 'Buffer', 2));\r\n\r\nFormatter.add('object', 'array-buffer', Formatter.generateFunctionForIndexedArray('byteLength', 'ArrayBuffer', 2));\r\n\r\nFormatter.add('object', 'typed-array', 'int8', Formatter.generateFunctionForIndexedArray('length', 'Int8Array', 2));\r\nFormatter.add('object', 'typed-array', 'uint8', Formatter.generateFunctionForIndexedArray('length', 'Uint8Array', 2));\r\nFormatter.add('object', 'typed-array', 'uint8clamped', Formatter.generateFunctionForIndexedArray('length', 'Uint8ClampedArray', 2));\r\n\r\nFormatter.add('object', 'typed-array', 'int16', Formatter.generateFunctionForIndexedArray('length', 'Int16Array', 4));\r\nFormatter.add('object', 'typed-array', 'uint16', Formatter.generateFunctionForIndexedArray('length', 'Uint16Array', 4));\r\n\r\nFormatter.add('object', 'typed-array', 'int32', Formatter.generateFunctionForIndexedArray('length', 'Int32Array', 8));\r\nFormatter.add('object', 'typed-array', 'uint32', Formatter.generateFunctionForIndexedArray('length', 'Uint32Array', 8));\r\n\r\n//TODO add float32 and float64\r\n\r\nFormatter.add('object', 'promise', function() {\r\n  return '[Promise]';//TODO it could be nice to inspect its state and value\r\n});\r\n\r\nFormatter.add('object', 'xhr', function() {\r\n  return '[XMLHttpRequest]';//TODO it could be nice to inspect its state\r\n});\r\n\r\nFormatter.add('object', 'html-element', function(value) {\r\n  return value.outerHTML;\r\n});\r\n\r\nFormatter.add('object', 'html-element', '#text', function(value) {\r\n  return value.nodeValue;\r\n});\r\n\r\nFormatter.add('object', 'html-element', '#document', function(value) {\r\n  return value.documentElement.outerHTML;\r\n});\r\n\r\nFormatter.add('object', 'host', function() {\r\n  return '[Host]';\r\n});\r\n\r\nFormatter.add('object', 'set', function(value) {\r\n  var iter = value.values();\r\n  var len = 0;\r\n\r\n  this.seen.push(value);\r\n\r\n  var props = [];\r\n\r\n  var next = iter.next();\r\n  while(!next.done) {\r\n    var val = next.value;\r\n    var f = this.format(val);\r\n    len += f.length;\r\n    props.push(f);\r\n\r\n    next = iter.next();\r\n  }\r\n\r\n  this.seen.pop();\r\n\r\n  if(props.length === 0) return 'Set {}';\r\n\r\n  if(len <= this.maxLineLength) {\r\n    return 'Set { ' + props.join(this.propSep + ' ') + ' }';\r\n  } else {\r\n    return 'Set {\\n' + props.map(util.addSpaces).join(this.propSep + '\\n') + '\\n' + '}';\r\n  }\r\n});\r\n\r\nFormatter.add('object', 'map', function(value) {\r\n  var iter = value.entries();\r\n  var len = 0;\r\n\r\n  this.seen.push(value);\r\n\r\n  var props = [];\r\n\r\n  var next = iter.next();\r\n  while(!next.done) {\r\n    var val = next.value;\r\n    var fK = this.format(val[0]);\r\n    var fV = this.format(val[1]);\r\n\r\n    var f;\r\n    if((fK.length + fV.length + 4) <= this.maxLineLength) {\r\n      f = fK + ' => ' + fV;\r\n    } else {\r\n      f = fK + ' =>\\n' + fV;\r\n    }\r\n\r\n    len += fK.length + fV.length + 4;\r\n    props.push(f);\r\n\r\n    next = iter.next();\r\n  }\r\n\r\n  this.seen.pop();\r\n\r\n  if(props.length === 0) return 'Map {}';\r\n\r\n  if(len <= this.maxLineLength) {\r\n    return 'Map { ' + props.join(this.propSep + ' ') + ' }';\r\n  } else {\r\n    return 'Map {\\n' + props.map(util.addSpaces).join(this.propSep + '\\n') + '\\n' + '}';\r\n  }\r\n});\r\n\r\nFormatter.prototype.defaultFormat = Formatter.prototype._format_object;\r\n\r\nfunction defaultFormat(value, opts) {\r\n  return new Formatter(opts).format(value);\r\n}\r\n\r\ndefaultFormat.Formatter = Formatter;\r\nmodule.exports = defaultFormat;","blocks":{"total":85,"seen":4,"missing":81,"percentage":0.047058823529411764}},"hash":"4a26a61f9ef01f0a671adcadbbf80bc7"},"/home/ryan/Desktop/node/node_modules/should/node_modules/should-format/util.js":{"stats":{"percentage":0.6071428571428571,"lines":[{"lineno":2},{"lineno":6},{"lineno":7},{"lineno":9},{"lineno":10},{"lineno":11},{"lineno":14},{"lineno":15},{"lineno":16},{"lineno":18},{"lineno":26}],"missing":11,"seen":17,"total":28,"coverage":{"2":{"partial":false,"source":"  return v.split('\\n').map(function(vv) { return '  ' + vv; }).join('\\n');\r","missing":[{"startCol":2,"endCol":74},{"startCol":9,"endCol":22},{"startCol":42,"endCol":59},{"startCol":49,"endCol":58},{"startCol":56,"endCol":58}]},"6":{"partial":false,"source":"  str = String(str)\r","missing":[{"startCol":8,"endCol":19},{}]},"7":{"partial":false,"source":"  var isRight = false;\r","missing":[{},{"startCol":2,"endCol":22}]},"9":{"partial":false,"source":"  if(value < 0) {\r","missing":[{"startCol":5,"endCol":10}]},"10":{"partial":false,"source":"    isRight = true;\r","missing":[{"startCol":4,"endCol":19}]},"11":{"partial":false,"source":"    value = -value;\r","missing":[{"startCol":4,"endCol":19},{"startCol":12,"endCol":18},{"startCol":13,"endCol":18}]},"14":{"partial":false,"source":"  if(str.length < value) {\r","missing":[{"startCol":5,"endCol":23},{"startCol":18,"endCol":23}]},"15":{"partial":false,"source":"    var padding = new Array(value - str.length + 1).join(filler);\r","missing":[{"startCol":4,"endCol":65},{"startCol":18,"endCol":64},{"startCol":28,"endCol":33}]},"16":{"partial":false,"source":"    return isRight ? str + padding : padding + str;\r","missing":[{"startCol":4,"endCol":51},{"startCol":11,"endCol":18},{"startCol":21,"endCol":24},{"startCol":27,"endCol":34},{"startCol":37,"endCol":44},{"startCol":47,"endCol":50}]},"18":{"partial":false,"source":"    return str;\r","missing":[{"startCol":4,"endCol":15}]},"26":{"partial":false,"source":"    return pad(str, value, '0');\r","missing":[{"startCol":4,"endCol":32},{"startCol":11,"endCol":31}]}},"source":"function addSpaces(v) {\r\n  return v.split('\\n').map(function(vv) { return '  ' + vv; }).join('\\n');\r\n}\r\n\r\nfunction pad(str, value, filler) {\r\n  str = String(str)\r\n  var isRight = false;\r\n\r\n  if(value < 0) {\r\n    isRight = true;\r\n    value = -value;\r\n  }\r\n\r\n  if(str.length < value) {\r\n    var padding = new Array(value - str.length + 1).join(filler);\r\n    return isRight ? str + padding : padding + str;\r\n  } else{\r\n    return str;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  addSpaces: addSpaces,\r\n  pad: pad,\r\n  pad0: function(str, value) {\r\n    return pad(str, value, '0');\r\n  }\r\n};","blocks":{"total":7,"seen":0,"missing":7,"percentage":0}},"hash":"6d41f205824565fd473ef0880e6df6c3"},"/home/ryan/Desktop/node/node_modules/should/lib/assertion-error.js":{"stats":{"percentage":0.7093023255813954,"lines":[{"lineno":11},{"lineno":13},{"lineno":14},{"lineno":16},{"lineno":17},{"lineno":18},{"lineno":20},{"lineno":29},{"lineno":32},{"lineno":34},{"lineno":38},{"lineno":39},{"lineno":40},{"lineno":43},{"lineno":44},{"lineno":48},{"lineno":56},{"lineno":60},{"lineno":72},{"lineno":73},{"lineno":75},{"lineno":76},{"lineno":77},{"lineno":79},{"lineno":81}],"missing":25,"seen":61,"total":86,"coverage":{"11":{"partial":false,"source":"  util.merge(this, options);","missing":[{"startCol":2,"endCol":27}]},"13":{"partial":false,"source":"  if(!options.message) {","missing":[{"startCol":5,"endCol":21}]},"14":{"partial":false,"source":"    Object.defineProperty(this, 'message', {","missing":[{}]},"15":{"partial":false,"source":"        get: function() {","missing":[{}]},"16":{"partial":false,"source":"          if(!this._message) {","missing":[{"startCol":13,"endCol":27},{}]},"17":{"partial":false,"source":"            this._message = this.generateMessage();","missing":[{},{"startCol":12,"endCol":51},{"startCol":28,"endCol":50}]},"18":{"partial":false,"source":"            this.generatedMessage = true;","missing":[{},{"startCol":12,"endCol":41}]},"19":{"partial":false,"source":"          }","missing":[{}]},"20":{"partial":false,"source":"          return this._message;","missing":[{},{"startCol":10,"endCol":31}]},"21":{"partial":false,"source":"        },","missing":[{}]},"22":{"partial":false,"source":"        configurable: true,","missing":[{}]},"23":{"partial":false,"source":"        enumerable: false","missing":[{}]},"24":{"partial":false,"source":"      }","missing":[{}]},"25":{"partial":false,"source":"    );","missing":[{}]},"29":{"partial":false,"source":"    Error.captureStackTrace(this, this.stackStartFunction);","missing":[{"startCol":4,"endCol":58}]},"32":{"partial":false,"source":"    var err = new Error();","missing":[{"startCol":4,"endCol":26}]},"34":{"partial":false,"source":"      var out = err.stack;","missing":[{"startCol":6,"endCol":26}]},"38":{"partial":false,"source":"        var fn_name = util.functionName(this.stackStartFunction);","missing":[{"startCol":8,"endCol":65},{"startCol":22,"endCol":64}]},"39":{"partial":false,"source":"        var idx = out.indexOf('\\n' + fn_name);","missing":[{"startCol":8,"endCol":46},{"startCol":18,"endCol":45},{"startCol":30,"endCol":44},{"startCol":37,"endCol":44}]},"40":{"partial":false,"source":"        if(idx >= 0) {","missing":[{"startCol":11,"endCol":14}]},"43":{"partial":false,"source":"          var next_line = out.indexOf('\\n', idx + 1);","missing":[{"startCol":10,"endCol":53},{"startCol":26,"endCol":52},{"startCol":44,"endCol":47}]},"44":{"partial":false,"source":"          out = out.substring(next_line + 1);","missing":[{"startCol":10,"endCol":45},{"startCol":16,"endCol":44},{"startCol":30,"endCol":39}]},"48":{"partial":false,"source":"      this.stack = out;","missing":[{"startCol":6,"endCol":23}]},"56":{"partial":false,"source":"  return indent + line;","missing":[{"startCol":2,"endCol":23},{"startCol":9,"endCol":15},{"startCol":18,"endCol":22}]},"60":{"partial":false,"source":"  return text.split('\\n').map(prependIndent).join('\\n');","missing":[{"startCol":2,"endCol":56},{"startCol":9,"endCol":25}]},"72":{"partial":false,"source":"      if(!this.operator && this.previous) {","missing":[{"startCol":9,"endCol":23}]},"73":{"partial":false,"source":"        return this.previous.message;","missing":[{"startCol":8,"endCol":37}]},"75":{"partial":false,"source":"      var actual = util.format(this.actual);","missing":[{"startCol":6,"endCol":44},{"startCol":19,"endCol":43}]},"76":{"partial":false,"source":"      var expected = 'expected' in this ? ' ' + util.format(this.expected) : '';","missing":[{"startCol":6,"endCol":80},{"startCol":21,"endCol":39},{"startCol":42,"endCol":74},{"startCol":48,"endCol":74},{"startCol":77,"endCol":79}]},"77":{"partial":false,"source":"      var details = 'details' in this && this.details ? ' (' + this.details + ')' : '';","missing":[{"startCol":6,"endCol":87},{"startCol":20,"endCol":37},{"startCol":56,"endCol":75},{"startCol":84,"endCol":86}]},"79":{"partial":false,"source":"      var previous = this.previous ? '\\n' + indentLines(this.previous.message) : '';","missing":[{"startCol":6,"endCol":84},{"startCol":37,"endCol":78},{"startCol":44,"endCol":78},{"startCol":81,"endCol":83}]},"81":{"partial":false,"source":"      return 'expected ' + actual + (this.negate ? ' not ' : ' ') + this.operator + expected + details + previous;","missing":[{"startCol":6,"endCol":114},{"startCol":13,"endCol":33},{"startCol":27,"endCol":33},{"startCol":51,"endCol":58},{"startCol":61,"endCol":64},{"startCol":84,"endCol":92},{"startCol":95,"endCol":102},{"startCol":105,"endCol":113}]}},"source":"var util = require('./util');\n\n/**\n * should AssertionError\n * @param {Object} options\n * @constructor\n * @memberOf should\n * @static\n */\nvar AssertionError = function AssertionError(options) {\n  util.merge(this, options);\n\n  if(!options.message) {\n    Object.defineProperty(this, 'message', {\n        get: function() {\n          if(!this._message) {\n            this._message = this.generateMessage();\n            this.generatedMessage = true;\n          }\n          return this._message;\n        },\n        configurable: true,\n        enumerable: false\n      }\n    );\n  }\n\n  if(Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if(err.stack) {\n      var out = err.stack;\n\n      if(this.stackStartFunction) {\n        // try to strip useless frames\n        var fn_name = util.functionName(this.stackStartFunction);\n        var idx = out.indexOf('\\n' + fn_name);\n        if(idx >= 0) {\n          // once we have located the function frame\n          // we need to strip out everything before it (and its line)\n          var next_line = out.indexOf('\\n', idx + 1);\n          out = out.substring(next_line + 1);\n        }\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n\nvar indent = '    ';\nfunction prependIndent(line) {\n  return indent + line;\n}\n\nfunction indentLines(text) {\n  return text.split('\\n').map(prependIndent).join('\\n');\n}\n\n\n// assert.AssertionError instanceof Error\nAssertionError.prototype = Object.create(Error.prototype, {\n  name: {\n    value: 'AssertionError'\n  },\n\n  generateMessage: {\n    value: function() {\n      if(!this.operator && this.previous) {\n        return this.previous.message;\n      }\n      var actual = util.format(this.actual);\n      var expected = 'expected' in this ? ' ' + util.format(this.expected) : '';\n      var details = 'details' in this && this.details ? ' (' + this.details + ')' : '';\n\n      var previous = this.previous ? '\\n' + indentLines(this.previous.message) : '';\n\n      return 'expected ' + actual + (this.negate ? ' not ' : ' ') + this.operator + expected + details + previous;\n    }\n  }\n});\n\nmodule.exports = AssertionError;","blocks":{"total":13,"seen":0,"missing":13,"percentage":0}},"hash":"04640df3df62701c8127d8c78be6344d"},"/home/ryan/Desktop/node/node_modules/should/lib/assertion.js":{"stats":{"percentage":0.8786407766990292,"lines":[{"lineno":51},{"lineno":54},{"lineno":55},{"lineno":56},{"lineno":59},{"lineno":60},{"lineno":64},{"lineno":65},{"lineno":68},{"lineno":73},{"lineno":74},{"lineno":75},{"lineno":114},{"lineno":147},{"lineno":149},{"lineno":150},{"lineno":151},{"lineno":152},{"lineno":155},{"lineno":156},{"lineno":158},{"lineno":160},{"lineno":180},{"lineno":201},{"lineno":202}],"missing":25,"seen":181,"total":206,"coverage":{"51":{"partial":false,"source":"      if(e instanceof AssertionError) {","missing":[{"startCol":9,"endCol":10},{"startCol":22,"endCol":36}]},"54":{"partial":false,"source":"          this.obj = context.obj;","missing":[{"startCol":10,"endCol":33}]},"55":{"partial":false,"source":"          this.negate = false;","missing":[{"startCol":10,"endCol":30}]},"56":{"partial":false,"source":"          return this;","missing":[{"startCol":10,"endCol":22}]},"59":{"partial":false,"source":"        if(context !== e.assertion) {","missing":[{"startCol":11,"endCol":18}]},"60":{"partial":false,"source":"          context.params.previous = e;","missing":[{"startCol":10,"endCol":38}]},"64":{"partial":false,"source":"        context.negate = false;","missing":[{"startCol":8,"endCol":31}]},"65":{"partial":false,"source":"        context.fail();","missing":[{"startCol":8,"endCol":22}]},"68":{"partial":false,"source":"      throw e;","missing":[{"startCol":6,"endCol":14}]},"73":{"partial":false,"source":"      context.negate = true;//because .fail will set negate","missing":[{"startCol":6,"endCol":28}]},"74":{"partial":false,"source":"      context.params.details = 'false negative fail';","missing":[{"startCol":6,"endCol":53}]},"75":{"partial":false,"source":"      context.fail();","missing":[{"startCol":6,"endCol":20}]},"114":{"partial":true,"source":"  if(!desc) throw new Error('Alias ' + from + ' -> ' + to + ' could not be created as ' + from + ' not defined');","missing":[{"startCol":12,"endCol":113},{"startCol":28,"endCol":43},{"startCol":39,"endCol":43},{"startCol":55,"endCol":57},{"startCol":90,"endCol":94}]},"147":{"partial":false,"source":"    var params = this.params;","missing":[{"startCol":4,"endCol":29}]},"149":{"partial":false,"source":"    if('obj' in params && !('actual' in params)) {","missing":[{"startCol":7,"endCol":22},{"startCol":16,"endCol":22},{"startCol":26,"endCol":47},{"startCol":28,"endCol":46},{"startCol":40,"endCol":46}]},"150":{"partial":false,"source":"      params.actual = params.obj;","missing":[{"startCol":6,"endCol":33}]},"151":{"partial":false,"source":"    } else if(!('obj' in params) && !('actual' in params)) {","missing":[{"startCol":14,"endCol":32},{"startCol":16,"endCol":31},{"startCol":25,"endCol":31},{"startCol":36,"endCol":57},{"startCol":38,"endCol":56},{"startCol":50,"endCol":56}]},"152":{"partial":false,"source":"      params.actual = this.obj;","missing":[{"startCol":6,"endCol":31}]},"155":{"partial":false,"source":"    params.stackStartFunction = params.stackStartFunction || this.assert;","missing":[{"startCol":4,"endCol":73},{"startCol":32,"endCol":72}]},"156":{"partial":false,"source":"    params.negate = this.negate;","missing":[{"startCol":4,"endCol":32}]},"158":{"partial":false,"source":"    params.assertion = this;","missing":[{"startCol":4,"endCol":28}]},"160":{"partial":false,"source":"    throw new AssertionError(params);","missing":[{"startCol":4,"endCol":37}]},"180":{"partial":false,"source":"    return this.assert(false);","missing":[{"startCol":4,"endCol":30},{"startCol":11,"endCol":29}]},"201":{"partial":false,"source":"    this.anyOne = true;","missing":[{"startCol":4,"endCol":23}]},"202":{"partial":false,"source":"    return this;","missing":[{"startCol":4,"endCol":16}]}},"source":"var AssertionError = require('./assertion-error');\nvar util = require('./util');\n\n/**\n * should Assertion\n * @param {*} obj Given object for assertion\n * @constructor\n * @memberOf should\n * @static\n */\nfunction Assertion(obj) {\n  this.obj = obj;\n\n  this.anyOne = false;\n  this.negate = false;\n\n  this.params = {actual: obj};\n}\n\n/**\n * Way to extend Assertion function. It uses some logic\n * to define only positive assertions and itself rule with negative assertion.\n *\n * All actions happen in subcontext and this method take care about negation.\n * Potentially we can add some more modifiers that does not depends from state of assertion.\n * @memberOf Assertion\n * @category assertion\n * @static\n * @param {String} name Name of assertion. It will be used for defining method or getter on Assertion.prototype\n * @param {Function} func Function that will be called on executing assertion\n * @example\n *\n * Assertion.add('asset', function() {\n *      this.params = { operator: 'to be asset' };\n *\n *      this.obj.should.have.property('id').which.is.a.Number();\n *      this.obj.should.have.property('path');\n * });\n */\nAssertion.add = function(name, func) {\n  var prop = {enumerable: true, configurable: true};\n\n  prop.value = function() {\n    var context = new Assertion(this.obj, this, name);\n    context.anyOne = this.anyOne;\n\n    try {\n      func.apply(context, arguments);\n    } catch(e) {\n      //check for fail\n      if(e instanceof AssertionError) {\n        //negative fail\n        if(this.negate) {\n          this.obj = context.obj;\n          this.negate = false;\n          return this;\n        }\n\n        if(context !== e.assertion) {\n          context.params.previous = e;\n        }\n\n        //positive fail\n        context.negate = false;\n        context.fail();\n      }\n      // throw if it is another exception\n      throw e;\n    }\n\n    //negative pass\n    if(this.negate) {\n      context.negate = true;//because .fail will set negate\n      context.params.details = 'false negative fail';\n      context.fail();\n    }\n\n    //positive pass\n    if(!this.params.operator) this.params = context.params;//shortcut\n    this.obj = context.obj;\n    this.negate = false;\n    return this;\n  };\n\n  Object.defineProperty(Assertion.prototype, name, prop);\n};\n\nAssertion.addChain = function(name, onCall) {\n  onCall = onCall || function() {\n  };\n  Object.defineProperty(Assertion.prototype, name, {\n    get: function() {\n      onCall();\n      return this;\n    },\n    enumerable: true\n  });\n};\n\n/**\n * Create alias for some `Assertion` property\n *\n * @memberOf Assertion\n * @category assertion\n * @static\n * @param {String} from Name of to map\n * @param {String} to Name of alias\n * @example\n *\n * Assertion.alias('true', 'True');\n */\nAssertion.alias = function(from, to) {\n  var desc = Object.getOwnPropertyDescriptor(Assertion.prototype, from);\n  if(!desc) throw new Error('Alias ' + from + ' -> ' + to + ' could not be created as ' + from + ' not defined');\n  Object.defineProperty(Assertion.prototype, to, desc);\n};\n\nAssertion.prototype = {\n  constructor: Assertion,\n\n  /**\n   * Base method for assertions. Before calling this method need to fill Assertion#params object. This method usually called from other assertion methods.\n   * `Assertion#params` can contain such properties:\n   * * `operator` - required string containing description of this assertion\n   * * `obj` - optional replacement for this.obj, it usefull if you prepare more clear object then given\n   * * `message` - if this property filled with string any others will be ignored and this one used as assertion message\n   * * `expected` - any object used when you need to assert relation between given object and expected. Like given == expected (== is a relation)\n   * * `details` - additional string with details to generated message\n   *\n   * @memberOf Assertion\n   * @category assertion\n   * @param {*} expr Any expression that will be used as a condition for asserting.\n   * @example\n   *\n   * var a = new should.Assertion(42);\n   *\n   * a.params = {\n   *  operator: 'to be magic number',\n   * }\n   *\n   * a.assert(false);\n   * //throws AssertionError: expected 42 to be magic number\n   */\n  assert: function(expr) {\n    if(expr) return this;\n\n    var params = this.params;\n\n    if('obj' in params && !('actual' in params)) {\n      params.actual = params.obj;\n    } else if(!('obj' in params) && !('actual' in params)) {\n      params.actual = this.obj;\n    }\n\n    params.stackStartFunction = params.stackStartFunction || this.assert;\n    params.negate = this.negate;\n\n    params.assertion = this;\n\n    throw new AssertionError(params);\n  },\n\n  /**\n   * Shortcut for `Assertion#assert(false)`.\n   *\n   * @memberOf Assertion\n   * @category assertion\n   * @example\n   *\n   * var a = new should.Assertion(42);\n   *\n   * a.params = {\n   *  operator: 'to be magic number',\n   * }\n   *\n   * a.fail();\n   * //throws AssertionError: expected 42 to be magic number\n   */\n  fail: function() {\n    return this.assert(false);\n  },\n\n  /**\n   * Negation modifier. Current assertion chain become negated. Each call invert negation on current assertion.\n   *\n   * @memberOf Assertion\n   * @category assertion\n   */\n  get not() {\n    this.negate = !this.negate;\n    return this;\n  },\n\n  /**\n   * Any modifier - it affect on execution of sequenced assertion to do not `check all`, but `check any of`.\n   *\n   * @memberOf Assertion\n   * @category assertion\n   */\n  get any() {\n    this.anyOne = true;\n    return this;\n  }\n};\n\nmodule.exports = Assertion;","blocks":{"total":22,"seen":12,"missing":10,"percentage":0.5454545454545454}},"hash":"79bd5bd0cf066c540a1aa02581e5160d"},"/home/ryan/Desktop/node/node_modules/should/lib/ext/assert.js":{"stats":{"percentage":0.9142857142857143,"lines":[{"lineno":40},{"lineno":41},{"lineno":42},{"lineno":64},{"lineno":65},{"lineno":66}],"missing":6,"seen":64,"total":70,"coverage":{"40":{"partial":false,"source":"    if(null == obj) {","missing":[{"startCol":7,"endCol":18},{"startCol":15,"endCol":18}]},"41":{"partial":false,"source":"      throw new AssertionError({","missing":[{}]},"42":{"partial":false,"source":"        message: msg || ('expected ' + i(obj) + ' to exist'), stackStartFunction: should.exist","missing":[{"startCol":25,"endCol":59},{"startCol":39,"endCol":45},{},{"startCol":17,"endCol":60}]},"43":{"partial":false,"source":"      });","missing":[{}]},"64":{"partial":false,"source":"    if(null != obj) {","missing":[{"startCol":7,"endCol":18},{"startCol":15,"endCol":18}]},"65":{"partial":false,"source":"      throw new AssertionError({","missing":[{}]},"66":{"partial":false,"source":"        message: msg || ('expected ' + i(obj) + ' to not exist'), stackStartFunction: should.not.exist","missing":[{"startCol":17,"endCol":20},{},{"startCol":25,"endCol":45},{"startCol":39,"endCol":45}]},"67":{"partial":false,"source":"      });","missing":[{}]}},"source":"/*\n * Should\n * Copyright(c) 2010-2014 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar util = require('../util')\n  , assert = require('./_assert')\n  , AssertionError = require('../assertion-error');\n\nmodule.exports = function(should) {\n  var i = should.format;\n\n  /*\n   * Expose assert to should\n   *\n   * This allows you to do things like below\n   * without require()ing the assert module.\n   *\n   *    should.equal(foo.bar, undefined);\n   *\n   */\n  util.merge(should, assert);\n\n  /**\n   * Assert _obj_ exists, with optional message.\n   *\n   * @static\n   * @memberOf should\n   * @category assertion assert\n   * @alias should.exists\n   * @param {*} obj\n   * @param {String} [msg]\n   * @example\n   *\n   * should.exist(1);\n   * should.exist(new Date());\n   */\n  should.exist = should.exists = function(obj, msg) {\n    if(null == obj) {\n      throw new AssertionError({\n        message: msg || ('expected ' + i(obj) + ' to exist'), stackStartFunction: should.exist\n      });\n    }\n  };\n\n  should.not = {};\n  /**\n   * Asserts _obj_ does not exist, with optional message.\n   *\n   * @name not.exist\n   * @static\n   * @memberOf should\n   * @category assertion assert\n   * @alias should.not.exists\n   * @param {*} obj\n   * @param {String} [msg]\n   * @example\n   *\n   * should.not.exist(null);\n   * should.not.exist(void 0);\n   */\n  should.not.exist = should.not.exists = function(obj, msg) {\n    if(null != obj) {\n      throw new AssertionError({\n        message: msg || ('expected ' + i(obj) + ' to not exist'), stackStartFunction: should.not.exist\n      });\n    }\n  };\n};","blocks":{"total":5,"seen":1,"missing":4,"percentage":0.2}},"hash":"038146fbea9fde89302405e944d2cd35"},"/home/ryan/Desktop/node/node_modules/should/lib/ext/_assert.js":{"stats":{"percentage":0.8494623655913979,"lines":[{"lineno":58},{"lineno":59},{"lineno":63},{"lineno":66},{"lineno":87},{"lineno":105},{"lineno":120},{"lineno":121},{"lineno":137},{"lineno":138},{"lineno":155},{"lineno":156},{"lineno":173},{"lineno":189},{"lineno":190},{"lineno":195},{"lineno":196},{"lineno":199},{"lineno":200},{"lineno":201},{"lineno":202},{"lineno":203},{"lineno":204},{"lineno":207},{"lineno":211},{"lineno":213},{"lineno":214},{"lineno":215},{"lineno":219},{"lineno":221},{"lineno":224},{"lineno":225},{"lineno":227},{"lineno":228},{"lineno":231},{"lineno":232},{"lineno":235},{"lineno":236},{"lineno":252},{"lineno":265},{"lineno":276},{"lineno":277}],"missing":42,"seen":237,"total":279,"coverage":{"58":{"partial":false,"source":"  var a = new Assertion(actual);","missing":[{"startCol":2,"endCol":32}]},"59":{"partial":false,"source":"  a.params = {","missing":[{}]},"60":{"partial":false,"source":"    operator: operator,","missing":[{}]},"61":{"partial":false,"source":"    expected: expected,","missing":[{}]},"62":{"partial":false,"source":"    message: message,","missing":[{}]},"63":{"partial":false,"source":"    stackStartFunction: stackStartFunction || fail","missing":[{"startCol":24,"endCol":42},{"startCol":46,"endCol":50},{}]},"64":{"partial":false,"source":"  };","missing":[{}]},"66":{"partial":false,"source":"  a.fail();","missing":[{"startCol":2,"endCol":10}]},"87":{"partial":false,"source":"  if(!value) fail(value, true, message, '==', assert.ok);","missing":[{"startCol":5,"endCol":11},{"startCol":6,"endCol":11},{"startCol":13,"endCol":56}]},"105":{"partial":true,"source":"  if(actual != expected) fail(actual, expected, message, '==', assert.equal);","missing":[{"startCol":25,"endCol":76}]},"120":{"partial":false,"source":"  if(actual == expected) {","missing":[{"startCol":5,"endCol":11},{"startCol":15,"endCol":23}]},"121":{"partial":false,"source":"    fail(actual, expected, message, '!=', assert.notEqual);","missing":[{"startCol":4,"endCol":58}]},"137":{"partial":false,"source":"  if(!_deepEqual(actual, expected).result) {","missing":[{"startCol":5,"endCol":41},{"startCol":6,"endCol":34}]},"138":{"partial":false,"source":"    fail(actual, expected, message, 'deepEqual', assert.deepEqual);","missing":[{"startCol":4,"endCol":66}]},"155":{"partial":false,"source":"  if(_deepEqual(actual, expected).result) {","missing":[{"startCol":5,"endCol":33}]},"156":{"partial":false,"source":"    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);","missing":[{"startCol":4,"endCol":72}]},"173":{"partial":false,"source":"    fail(actual, expected, message, '===', assert.strictEqual);","missing":[{"startCol":4,"endCol":62}]},"189":{"partial":false,"source":"  if(actual === expected) {","missing":[{"startCol":5,"endCol":11},{"startCol":16,"endCol":24}]},"190":{"partial":false,"source":"    fail(actual, expected, message, '!==', assert.notStrictEqual);","missing":[{"startCol":4,"endCol":65}]},"195":{"partial":false,"source":"  if(!actual || !expected) {","missing":[{"startCol":5,"endCol":12},{"startCol":6,"endCol":12},{"startCol":16,"endCol":25},{"startCol":17,"endCol":25}]},"196":{"partial":false,"source":"    return false;","missing":[{"startCol":4,"endCol":17}]},"199":{"partial":false,"source":"  if(Object.prototype.toString.call(expected) == '[object RegExp]') {","missing":[{"startCol":5,"endCol":45}]},"200":{"partial":false,"source":"    return expected.test(actual);","missing":[{"startCol":4,"endCol":33},{"startCol":11,"endCol":32}]},"201":{"partial":false,"source":"  } else if(actual instanceof expected) {","missing":[{"startCol":12,"endCol":18},{"startCol":30,"endCol":38}]},"202":{"partial":false,"source":"    return true;","missing":[{"startCol":4,"endCol":16}]},"203":{"partial":false,"source":"  } else if(expected.call({}, actual) === true) {","missing":[{"startCol":12,"endCol":37}]},"204":{"partial":false,"source":"    return true;","missing":[{"startCol":4,"endCol":16}]},"207":{"partial":false,"source":"  return false;","missing":[{"startCol":2,"endCol":15}]},"211":{"partial":false,"source":"  var actual;","missing":[{"startCol":2,"endCol":13}]},"213":{"partial":false,"source":"  if(typeof expected == 'string') {","missing":[{"startCol":5,"endCol":20}]},"214":{"partial":false,"source":"    message = expected;","missing":[{"startCol":4,"endCol":23}]},"215":{"partial":false,"source":"    expected = null;","missing":[{"startCol":4,"endCol":20}]},"219":{"partial":false,"source":"    block();","missing":[{"startCol":4,"endCol":11}]},"221":{"partial":false,"source":"    actual = e;","missing":[{"startCol":4,"endCol":15}]},"224":{"partial":false,"source":"  message = (expected && expected.name ? ' (' + expected.name + ')' : '.') +","missing":[{"startCol":13,"endCol":21},{"startCol":41,"endCol":61},{},{"startCol":70,"endCol":73}]},"225":{"partial":false,"source":"  (message ? ' ' + message : '.');","missing":[{},{"startCol":3,"endCol":10},{"startCol":13,"endCol":26},{"startCol":19,"endCol":26},{"startCol":29,"endCol":32}]},"227":{"partial":false,"source":"  if(shouldThrow && !actual) {","missing":[{"startCol":5,"endCol":16},{"startCol":20,"endCol":27},{"startCol":21,"endCol":27}]},"228":{"partial":false,"source":"    fail(actual, expected, 'Missing expected exception' + message);","missing":[{"startCol":4,"endCol":66},{"startCol":27,"endCol":65},{"startCol":58,"endCol":65}]},"231":{"partial":false,"source":"  if(!shouldThrow && expectedException(actual, expected)) {","missing":[{"startCol":5,"endCol":17},{"startCol":6,"endCol":17},{"startCol":21,"endCol":56}]},"232":{"partial":false,"source":"    fail(actual, expected, 'Got unwanted exception' + message);","missing":[{"startCol":4,"endCol":62},{"startCol":27,"endCol":61},{"startCol":54,"endCol":61}]},"235":{"partial":false,"source":"  if((shouldThrow && actual && expected && !expectedException(actual, expected)) || (!shouldThrow && actual)) {","missing":[{"startCol":5,"endCol":108},{"startCol":6,"endCol":17},{"startCol":21,"endCol":27},{"startCol":31,"endCol":39},{"startCol":43,"endCol":79},{"startCol":44,"endCol":79},{"startCol":85,"endCol":97},{"startCol":86,"endCol":97},{"startCol":101,"endCol":107}]},"236":{"partial":false,"source":"    throw actual;","missing":[{"startCol":4,"endCol":17}]},"252":{"partial":false,"source":"  _throws.apply(this, [true].concat(pSlice.call(arguments)));","missing":[{"startCol":2,"endCol":60},{"startCol":22,"endCol":59},{"startCol":36,"endCol":58}]},"265":{"partial":false,"source":"  _throws.apply(this, [false].concat(pSlice.call(arguments)));","missing":[{"startCol":2,"endCol":61},{"startCol":22,"endCol":60},{"startCol":37,"endCol":59}]},"276":{"partial":false,"source":"  if(err) {","missing":[{"startCol":5,"endCol":8}]},"277":{"partial":false,"source":"    throw err;","missing":[{"startCol":4,"endCol":14}]}},"source":"// implement assert interface using already written peaces of should.js\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// when used in node, this will actually load the util module we depend on\n// versus loading the builtin util module as happens otherwise\n// this is a bug in node module loading as far as I am concerned\nvar Assertion = require('./../assertion');\n\nvar _deepEqual = require('should-equal');\n\nvar pSlice = Array.prototype.slice;\n\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n/**\n * Node.js standard [`assert.fail`](http://nodejs.org/api/assert.html#assert_assert_fail_actual_expected_message_operator).\n * @static\n * @memberOf should\n * @category assertion assert\n * @param {*} actual Actual object\n * @param {*} expected Expected object\n * @param {string} message Message for assertion\n * @param {string} operator Operator text\n */\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  var a = new Assertion(actual);\n  a.params = {\n    operator: operator,\n    expected: expected,\n    message: message,\n    stackStartFunction: stackStartFunction || fail\n  };\n\n  a.fail();\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n/**\n * Node.js standard [`assert.ok`](http://nodejs.org/api/assert.html#assert_assert_value_message_assert_ok_value_message).\n * @static\n * @memberOf should\n * @category assertion assert\n * @param {*} value\n * @param {string} [message]\n */\nfunction ok(value, message) {\n  if(!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\n/**\n * Node.js standard [`assert.equal`](http://nodejs.org/api/assert.html#assert_assert_equal_actual_expected_message).\n * @static\n * @memberOf should\n * @category assertion assert\n * @param {*} actual\n * @param {*} expected\n * @param {string} [message]\n */\nassert.equal = function equal(actual, expected, message) {\n  if(actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n/**\n * Node.js standard [`assert.notEqual`](http://nodejs.org/api/assert.html#assert_assert_notequal_actual_expected_message).\n * @static\n * @memberOf should\n * @category assertion assert\n * @param {*} actual\n * @param {*} expected\n * @param {string} [message]\n */\nassert.notEqual = function notEqual(actual, expected, message) {\n  if(actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n/**\n * Node.js standard [`assert.deepEqual`](http://nodejs.org/api/assert.html#assert_assert_deepequal_actual_expected_message).\n * @static\n * @memberOf should\n * @category assertion assert\n * @param {*} actual\n * @param {*} expected\n * @param {string} [message]\n */\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if(!_deepEqual(actual, expected).result) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n/**\n * Node.js standard [`assert.notDeepEqual`](http://nodejs.org/api/assert.html#assert_assert_notdeepequal_actual_expected_message).\n * @static\n * @memberOf should\n * @category assertion assert\n * @param {*} actual\n * @param {*} expected\n * @param {string} [message]\n */\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if(_deepEqual(actual, expected).result) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n/**\n * Node.js standard [`assert.strictEqual`](http://nodejs.org/api/assert.html#assert_assert_strictequal_actual_expected_message).\n * @static\n * @memberOf should\n * @category assertion assert\n * @param {*} actual\n * @param {*} expected\n * @param {string} [message]\n */\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if(actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n/**\n * Node.js standard [`assert.notStrictEqual`](http://nodejs.org/api/assert.html#assert_assert_notstrictequal_actual_expected_message).\n * @static\n * @memberOf should\n * @category assertion assert\n * @param {*} actual\n * @param {*} expected\n * @param {string} [message]\n */\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if(actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if(!actual || !expected) {\n    return false;\n  }\n\n  if(Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  } else if(actual instanceof expected) {\n    return true;\n  } else if(expected.call({}, actual) === true) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if(typeof expected == 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  try {\n    block();\n  } catch(e) {\n    actual = e;\n  }\n\n  message = (expected && expected.name ? ' (' + expected.name + ')' : '.') +\n  (message ? ' ' + message : '.');\n\n  if(shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  if(!shouldThrow && expectedException(actual, expected)) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if((shouldThrow && actual && expected && !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n/**\n * Node.js standard [`assert.throws`](http://nodejs.org/api/assert.html#assert_assert_throws_block_error_message).\n * @static\n * @memberOf should\n * @category assertion assert\n * @param {Function} block\n * @param {Function} [error]\n * @param {String} [message]\n */\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws.apply(this, [true].concat(pSlice.call(arguments)));\n};\n\n// EXTENSION! This is annoying to write outside this module.\n/**\n * Node.js standard [`assert.doesNotThrow`](http://nodejs.org/api/assert.html#assert_assert_doesnotthrow_block_message).\n * @static\n * @memberOf should\n * @category assertion assert\n * @param {Function} block\n * @param {String} [message]\n */\nassert.doesNotThrow = function(block, /*optional*/message) {\n  _throws.apply(this, [false].concat(pSlice.call(arguments)));\n};\n\n/**\n * Node.js standard [`assert.ifError`](http://nodejs.org/api/assert.html#assert_assert_iferror_value).\n * @static\n * @memberOf should\n * @category assertion assert\n * @param {Error} err\n */\nassert.ifError = function(err) {\n  if(err) {\n    throw err;\n  }\n};","blocks":{"total":31,"seen":2,"missing":29,"percentage":0.06451612903225806}},"hash":"5b95d353c305a97427b535346435a181"},"/home/ryan/Desktop/node/node_modules/should/node_modules/should-equal/index.js":{"stats":{"percentage":0.7323529411764705,"lines":[{"lineno":8},{"lineno":9},{"lineno":10},{"lineno":11},{"lineno":19},{"lineno":53},{"lineno":65},{"lineno":72},{"lineno":74},{"lineno":78},{"lineno":81},{"lineno":82},{"lineno":83},{"lineno":84},{"lineno":85},{"lineno":96},{"lineno":98},{"lineno":99},{"lineno":105},{"lineno":106},{"lineno":114},{"lineno":115},{"lineno":116},{"lineno":117},{"lineno":124},{"lineno":125},{"lineno":127},{"lineno":128},{"lineno":129},{"lineno":130},{"lineno":135},{"lineno":139},{"lineno":141},{"lineno":142},{"lineno":150},{"lineno":151},{"lineno":156},{"lineno":157},{"lineno":163},{"lineno":164},{"lineno":166},{"lineno":167},{"lineno":169},{"lineno":170},{"lineno":172},{"lineno":173},{"lineno":176},{"lineno":177},{"lineno":178},{"lineno":180},{"lineno":181},{"lineno":182},{"lineno":183},{"lineno":184},{"lineno":185},{"lineno":192},{"lineno":193},{"lineno":194},{"lineno":201},{"lineno":202},{"lineno":204},{"lineno":206},{"lineno":208},{"lineno":209},{"lineno":210},{"lineno":211},{"lineno":213},{"lineno":214},{"lineno":216},{"lineno":217},{"lineno":218},{"lineno":219},{"lineno":226},{"lineno":230},{"lineno":234},{"lineno":237},{"lineno":238},{"lineno":240},{"lineno":241},{"lineno":242},{"lineno":255},{"lineno":256},{"lineno":288},{"lineno":297},{"lineno":305},{"lineno":306},{"lineno":307},{"lineno":311},{"lineno":312},{"lineno":313},{"lineno":314}],"missing":91,"seen":249,"total":340,"coverage":{"8":{"partial":false,"source":"    o.path = path;\r","missing":[{"startCol":4,"endCol":18}]},"9":{"partial":false,"source":"    o.reason = reason;\r","missing":[{"startCol":4,"endCol":22}]},"10":{"partial":false,"source":"    o.a = a;\r","missing":[{"startCol":4,"endCol":12}]},"11":{"partial":false,"source":"    o.b = b;\r","missing":[{"startCol":4,"endCol":12}]},"19":{"partial":false,"source":"  return t.type + (t.cls ? '(' + t.cls + (t.sub ? ' ' + t.sub : '') + ')' : '');\r","missing":[{"startCol":2,"endCol":80},{"startCol":9,"endCol":79},{"startCol":27,"endCol":38},{"startCol":50,"endCol":61},{"startCol":64,"endCol":66},{"startCol":76,"endCol":78}]},"53":{"partial":true,"source":"    return result(a !== 0 || (1 / a == 1 / b), REASON.PLUS_0_AND_MINUS_0);\r","missing":[{"startCol":30,"endCol":35},{"startCol":34,"endCol":35},{"startCol":39,"endCol":44},{"startCol":43,"endCol":44}]},"65":{"partial":false,"source":"    return result(false, format(REASON.DIFFERENT_TYPES, typeToString(typeA), typeToString(typeB)));\r","missing":[{"startCol":4,"endCol":99},{"startCol":11,"endCol":98},{"startCol":25,"endCol":97},{"startCol":56,"endCol":75},{"startCol":77,"endCol":96}]},"72":{"partial":false,"source":"      return (a !== a) ? result(b !== b, REASON.NAN_NUMBER)\r","missing":[{"startCol":14,"endCol":15},{"startCol":20,"endCol":21},{},{"startCol":25,"endCol":59},{"startCol":32,"endCol":33},{"startCol":38,"endCol":39}]},"73":{"partial":false,"source":"        // but treat `+0` vs. `-0` as not equal\r","missing":[{}]},"74":{"partial":false,"source":"        : (a === 0 ? result(1 / a === 1 / b, REASON.PLUS_0_AND_MINUS_0) : result(a === b, REASON.EQUALITY));\r","missing":[{"startCol":74,"endCol":106},{"startCol":11,"endCol":18},{"startCol":21,"endCol":71},{"startCol":28,"endCol":43},{"startCol":32,"endCol":33},{"startCol":38,"endCol":43},{"startCol":42,"endCol":43},{"startCol":81,"endCol":88},{"startCol":87,"endCol":88},{}]},"78":{"partial":false,"source":"      return result(a === b, REASON.EQUALITY);\r","missing":[{"startCol":6,"endCol":46},{"startCol":13,"endCol":45},{"startCol":20,"endCol":21},{"startCol":26,"endCol":27}]},"81":{"partial":false,"source":"      var fA = a.toString(), fB = b.toString();\r","missing":[{"startCol":6,"endCol":47},{"startCol":15,"endCol":27},{"startCol":34,"endCol":46}]},"82":{"partial":false,"source":"      r = eqInternal(fA, fB, opts, stackA, stackB, path);\r","missing":[{"startCol":6,"endCol":57},{"startCol":10,"endCol":56}]},"83":{"partial":false,"source":"      if(!r.result) {\r","missing":[{"startCol":9,"endCol":18}]},"84":{"partial":false,"source":"        r.reason = REASON.FUNCTION_SOURCES;\r","missing":[{"startCol":8,"endCol":43}]},"85":{"partial":false,"source":"        return r;\r","missing":[{"startCol":8,"endCol":17}]},"96":{"partial":false,"source":"          p = ['source', 'global', 'multiline', 'lastIndex', 'ignoreCase'];\r","missing":[{"startCol":10,"endCol":75}]},"98":{"partial":false,"source":"            r = checkPropertyEquality(p.shift());\r","missing":[{"startCol":12,"endCol":49},{"startCol":16,"endCol":48},{"startCol":38,"endCol":47}]},"99":{"partial":false,"source":"            if(!r.result) return r;\r","missing":[{"startCol":15,"endCol":24},{"startCol":26,"endCol":35}]},"105":{"partial":false,"source":"          if(+a !== +b) {\r","missing":[{"startCol":13,"endCol":15},{"startCol":14,"endCol":15},{"startCol":20,"endCol":22},{"startCol":21,"endCol":22}]},"106":{"partial":false,"source":"            return result(false, REASON.EQUALITY);\r","missing":[{"startCol":12,"endCol":50},{"startCol":19,"endCol":49}]},"114":{"partial":false,"source":"          r = eqInternal(a.valueOf(), b.valueOf(), opts, stackA, stackB, path);\r","missing":[{"startCol":10,"endCol":79},{"startCol":14,"endCol":78},{"startCol":25,"endCol":36},{"startCol":38,"endCol":49}]},"115":{"partial":false,"source":"          if(!r.result) {\r","missing":[{"startCol":13,"endCol":22}]},"116":{"partial":false,"source":"            r.reason = REASON.WRAPPED_VALUE;\r","missing":[{"startCol":12,"endCol":44}]},"117":{"partial":false,"source":"            return r;\r","missing":[{"startCol":12,"endCol":21}]},"124":{"partial":false,"source":"          r = checkPropertyEquality('length');\r","missing":[{"startCol":10,"endCol":46},{"startCol":14,"endCol":45}]},"125":{"partial":false,"source":"          if(!r.result) return r;\r","missing":[{"startCol":13,"endCol":22},{"startCol":24,"endCol":33}]},"127":{"partial":false,"source":"          l = a.length;\r","missing":[{"startCol":10,"endCol":23}]},"128":{"partial":false,"source":"          while(l--) {\r","missing":[{"startCol":16,"endCol":19}]},"129":{"partial":false,"source":"            r = checkPropertyEquality(l);\r","missing":[{"startCol":12,"endCol":41},{"startCol":16,"endCol":40}]},"130":{"partial":false,"source":"            if(!r.result) return r;\r","missing":[{"startCol":15,"endCol":24},{"startCol":26,"endCol":35}]},"135":{"partial":false,"source":"          return EQUALS;\r","missing":[{"startCol":10,"endCol":24}]},"139":{"partial":false,"source":"          p = ['name', 'message'];\r","missing":[{"startCol":10,"endCol":34}]},"141":{"partial":false,"source":"            r = checkPropertyEquality(p.shift());\r","missing":[{"startCol":12,"endCol":49},{"startCol":16,"endCol":48},{"startCol":38,"endCol":47}]},"142":{"partial":false,"source":"            if(!r.result) return r;\r","missing":[{"startCol":15,"endCol":24},{"startCol":26,"endCol":35}]},"150":{"partial":false,"source":"          r = checkPropertyEquality('length');\r","missing":[{"startCol":10,"endCol":46},{"startCol":14,"endCol":45}]},"151":{"partial":false,"source":"          if(!r.result) return r;\r","missing":[{"startCol":13,"endCol":22},{"startCol":24,"endCol":33}]},"156":{"partial":false,"source":"          r = checkPropertyEquality('byteLength');\r","missing":[{"startCol":10,"endCol":50},{"startCol":14,"endCol":49}]},"157":{"partial":false,"source":"          if(!r.result) return r;\r","missing":[{"startCol":13,"endCol":22},{"startCol":24,"endCol":33}]},"163":{"partial":false,"source":"          r = checkPropertyEquality('size');\r","missing":[{"startCol":10,"endCol":44},{"startCol":14,"endCol":43}]},"164":{"partial":false,"source":"          if(!r.result) return r;\r","missing":[{"startCol":13,"endCol":22},{"startCol":24,"endCol":33}]},"166":{"partial":false,"source":"          stackA.push(a);\r","missing":[{"startCol":10,"endCol":24}]},"167":{"partial":false,"source":"          stackB.push(b);\r","missing":[{"startCol":10,"endCol":24}]},"169":{"partial":false,"source":"          var itA = a.entries();\r","missing":[{"startCol":10,"endCol":32},{"startCol":20,"endCol":31}]},"170":{"partial":false,"source":"          var nextA = itA.next();\r","missing":[{"startCol":10,"endCol":33},{"startCol":22,"endCol":32}]},"172":{"partial":false,"source":"          while(!nextA.done) {\r","missing":[{"startCol":16,"endCol":27}]},"173":{"partial":false,"source":"            var key = nextA.value[0];\r","missing":[{"startCol":12,"endCol":37}]},"176":{"partial":false,"source":"            if(getType(key).type != 'object') {\r","missing":[{"startCol":15,"endCol":27}]},"177":{"partial":false,"source":"              if(b.has(key)) {\r","missing":[{"startCol":17,"endCol":27}]},"178":{"partial":false,"source":"                if(typeA.cls == 'map') {\r","missing":[{"startCol":19,"endCol":37}]},"180":{"partial":false,"source":"                  var value = b.get(key);\r","missing":[{"startCol":18,"endCol":41},{"startCol":30,"endCol":40}]},"181":{"partial":false,"source":"                  r = eqInternal(nextA.value[1], value, opts, stackA, stackB, path);\r","missing":[{"startCol":18,"endCol":84},{"startCol":22,"endCol":83}]},"182":{"partial":false,"source":"                  if(!r.result) {\r","missing":[{"startCol":21,"endCol":30}]},"183":{"partial":false,"source":"                    r.a = nextA.value;\r","missing":[{"startCol":20,"endCol":38}]},"184":{"partial":false,"source":"                    r.b = value;\r","missing":[{"startCol":20,"endCol":32}]},"185":{"partial":false,"source":"                    r.reason = REASON.MAP_VALUE_EQUALITY;\r","missing":[{"startCol":20,"endCol":57}]},"192":{"partial":false,"source":"                r = result(false, REASON.SET_MAP_MISSING_KEY);\r","missing":[{"startCol":16,"endCol":62},{"startCol":20,"endCol":61}]},"193":{"partial":false,"source":"                r.a = key;\r","missing":[{"startCol":16,"endCol":26}]},"194":{"partial":false,"source":"                r.b = key;\r","missing":[{"startCol":16,"endCol":26}]},"201":{"partial":false,"source":"              var itB = b.entries();\r","missing":[{"startCol":14,"endCol":36},{"startCol":24,"endCol":35}]},"202":{"partial":false,"source":"              var nextB = itB.next();\r","missing":[{"startCol":14,"endCol":37},{"startCol":26,"endCol":36}]},"204":{"partial":false,"source":"              while(!nextB.done) {\r","missing":[{"startCol":20,"endCol":31}]},"206":{"partial":false,"source":"                r = eqInternal(nextA.value[0], nextB.value[0], opts, stackA, stackB, path);\r","missing":[{"startCol":16,"endCol":91},{"startCol":20,"endCol":90}]},"208":{"partial":false,"source":"                if(!r.result) {\r","missing":[{"startCol":19,"endCol":28}]},"209":{"partial":false,"source":"                  r.reason = REASON.SET_MAP_MISSING_KEY;\r","missing":[{"startCol":18,"endCol":56}]},"210":{"partial":false,"source":"                  r.a = key;\r","missing":[{"startCol":18,"endCol":28}]},"211":{"partial":false,"source":"                  r.b = key;\r","missing":[{"startCol":18,"endCol":28}]},"213":{"partial":false,"source":"                  if(typeA.cls == 'map') {\r","missing":[{"startCol":21,"endCol":39}]},"214":{"partial":false,"source":"                    r = eqInternal(nextA.value[1], nextB.value[1], opts, stackA, stackB, path);\r","missing":[{"startCol":20,"endCol":95},{"startCol":24,"endCol":94}]},"216":{"partial":false,"source":"                    if(!r.result) {\r","missing":[{"startCol":23,"endCol":32}]},"217":{"partial":false,"source":"                      r.a = nextA.value;\r","missing":[{"startCol":22,"endCol":40}]},"218":{"partial":false,"source":"                      r.b = nextB.value;\r","missing":[{"startCol":22,"endCol":40}]},"219":{"partial":false,"source":"                      r.reason = REASON.MAP_VALUE_EQUALITY;\r","missing":[{"startCol":22,"endCol":59}]},"226":{"partial":false,"source":"                nextB = itB.next();\r","missing":[{"startCol":16,"endCol":35},{"startCol":24,"endCol":34}]},"230":{"partial":false,"source":"            if(!r.result) {\r","missing":[{"startCol":15,"endCol":24}]},"234":{"partial":false,"source":"            nextA = itA.next();\r","missing":[{"startCol":12,"endCol":31},{"startCol":20,"endCol":30}]},"237":{"partial":false,"source":"          stackA.pop();\r","missing":[{"startCol":10,"endCol":22}]},"238":{"partial":false,"source":"          stackB.pop();\r","missing":[{"startCol":10,"endCol":22}]},"240":{"partial":false,"source":"          if(!r.result) {\r","missing":[{"startCol":13,"endCol":22}]},"241":{"partial":false,"source":"            r.reason = REASON.SET_MAP_MISSING_ENTRY;\r","missing":[{"startCol":12,"endCol":52}]},"242":{"partial":false,"source":"            return r;\r","missing":[{"startCol":12,"endCol":21}]},"255":{"partial":false,"source":"    if(stackA[l] == a) {\r","missing":[{"startCol":7,"endCol":21},{"startCol":20,"endCol":21}]},"256":{"partial":false,"source":"      return result(stackB[l] == b, REASON.CIRCULAR_VALUES);\r","missing":[{"startCol":6,"endCol":60},{"startCol":13,"endCol":59},{"startCol":20,"endCol":34},{"startCol":33,"endCol":34}]},"288":{"partial":false,"source":"          return r;\r","missing":[{"startCol":10,"endCol":19}]},"297":{"partial":true,"source":"  if(!r.result) return r;\r","missing":[{"startCol":16,"endCol":25}]},"305":{"partial":false,"source":"    } else if(a.__proto__ && b.__proto__) {\r","missing":[{"startCol":14,"endCol":40}]},"306":{"partial":false,"source":"      prototypesEquals = a.__proto__ === b.__proto__;\r","missing":[{"startCol":6,"endCol":53},{"startCol":25,"endCol":52}]},"307":{"partial":false,"source":"      canComparePrototypes = true;\r","missing":[{"startCol":6,"endCol":34}]},"311":{"partial":false,"source":"      r = result(prototypesEquals, REASON.EQUALITY_PROTOTYPE);\r","missing":[{"startCol":6,"endCol":62},{"startCol":10,"endCol":61}]},"312":{"partial":false,"source":"      r.showReason = true;\r","missing":[{"startCol":6,"endCol":26}]},"313":{"partial":false,"source":"      if(!r.result) {\r","missing":[{"startCol":9,"endCol":18}]},"314":{"partial":false,"source":"        return r;\r","missing":[{"startCol":8,"endCol":17}]}},"source":"var getType = require('should-type');\r\nvar format = require('./format');\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\nfunction makeResult(r, path, reason, a, b) {\r\n  var o = {result: r};\r\n  if(!r) {\r\n    o.path = path;\r\n    o.reason = reason;\r\n    o.a = a;\r\n    o.b = b;\r\n  }\r\n  return o;\r\n}\r\n\r\nvar EQUALS = makeResult(true);\r\n\r\nfunction typeToString(t) {\r\n  return t.type + (t.cls ? '(' + t.cls + (t.sub ? ' ' + t.sub : '') + ')' : '');\r\n}\r\n\r\n\r\n\r\nvar REASON = {\r\n  PLUS_0_AND_MINUS_0: '+0 is not equal to -0',\r\n  DIFFERENT_TYPES: 'A has type %s and B has type %s',\r\n  NAN_NUMBER: 'NaN is not equal to any number',\r\n  EQUALITY: 'A is not equal to B',\r\n  EQUALITY_PROTOTYPE: 'A and B have different prototypes',\r\n  WRAPPED_VALUE: 'A wrapped value is not equal to B wrapped value',\r\n  FUNCTION_SOURCES: 'function A is not equal to B by source code value (via .toString call)',\r\n  MISSING_KEY: '%s has no key %s',\r\n  CIRCULAR_VALUES: 'A has circular reference that was visited not in the same time as B',\r\n  SET_MAP_MISSING_KEY: 'Set/Map missing key',\r\n  MAP_VALUE_EQUALITY: 'Values of the same key in A and B is not equal'\r\n};\r\n\r\nfunction eqInternal(a, b, opts, stackA, stackB, path) {\r\n  var r = EQUALS;\r\n\r\n  function result(comparison, reason) {\r\n    return makeResult(comparison, path, reason, a, b);\r\n  }\r\n\r\n  function checkPropertyEquality(property) {\r\n    return eqInternal(a[property], b[property], opts, stackA, stackB, path.concat([property]));\r\n  }\r\n\r\n\r\n  // equal a and b exit early\r\n  if(a === b) {\r\n    // check for +0 !== -0;\r\n    return result(a !== 0 || (1 / a == 1 / b), REASON.PLUS_0_AND_MINUS_0);\r\n  }\r\n\r\n  var l, p;\r\n\r\n  var typeA = getType(a),\r\n    typeB = getType(b);\r\n\r\n  // if objects has different types they are not equals\r\n  var typeDifferents = typeA.type !== typeB.type || typeA.cls !== typeB.cls;\r\n\r\n  if(typeDifferents || ((opts.checkSubType && typeA.sub !== typeB.sub) || !opts.checkSubType)) {\r\n    return result(false, format(REASON.DIFFERENT_TYPES, typeToString(typeA), typeToString(typeB)));\r\n  }\r\n\r\n  //early checks for types\r\n  switch(typeA.type) {\r\n    case 'number':\r\n      // NaN !== NaN\r\n      return (a !== a) ? result(b !== b, REASON.NAN_NUMBER)\r\n        // but treat `+0` vs. `-0` as not equal\r\n        : (a === 0 ? result(1 / a === 1 / b, REASON.PLUS_0_AND_MINUS_0) : result(a === b, REASON.EQUALITY));\r\n\r\n    case 'boolean':\r\n    case 'string':\r\n      return result(a === b, REASON.EQUALITY);\r\n\r\n    case 'function':\r\n      var fA = a.toString(), fB = b.toString();\r\n      r = eqInternal(fA, fB, opts, stackA, stackB, path);\r\n      if(!r.result) {\r\n        r.reason = REASON.FUNCTION_SOURCES;\r\n        return r;\r\n      }\r\n\r\n      break;//check user properties\r\n\r\n    case 'object':\r\n      // additional checks for object instances\r\n      switch(typeA.cls) {\r\n        // check regexp flags\r\n        // TODO add es6 flags\r\n        case 'regexp':\r\n          p = ['source', 'global', 'multiline', 'lastIndex', 'ignoreCase'];\r\n          while(p.length) {\r\n            r = checkPropertyEquality(p.shift());\r\n            if(!r.result) return r;\r\n          }\r\n          break;//check user properties\r\n\r\n        //check by timestamp only\r\n        case 'date':\r\n          if(+a !== +b) {\r\n            return result(false, REASON.EQUALITY);\r\n          }\r\n          break;//check user properties\r\n\r\n        //primitive type wrappers\r\n        case 'number':\r\n        case 'boolean':\r\n        case 'string':\r\n          r = eqInternal(a.valueOf(), b.valueOf(), opts, stackA, stackB, path);\r\n          if(!r.result) {\r\n            r.reason = REASON.WRAPPED_VALUE;\r\n            return r;\r\n          }\r\n          break;//check user properties\r\n\r\n        //node buffer\r\n        case 'buffer':\r\n          //if length different it is obviously different\r\n          r = checkPropertyEquality('length');\r\n          if(!r.result) return r;\r\n\r\n          l = a.length;\r\n          while(l--) {\r\n            r = checkPropertyEquality(l);\r\n            if(!r.result) return r;\r\n          }\r\n\r\n          //we do not check for user properties because\r\n          //node Buffer have some strange hidden properties\r\n          return EQUALS;\r\n\r\n        case 'error':\r\n          //check defined properties\r\n          p = ['name', 'message'];\r\n          while(p.length) {\r\n            r = checkPropertyEquality(p.shift());\r\n            if(!r.result) return r;\r\n          }\r\n\r\n          break;//check user properties\r\n\r\n        case 'array':\r\n        case 'arguments':\r\n        case 'typed-array':\r\n          r = checkPropertyEquality('length');\r\n          if(!r.result) return r;\r\n\r\n          break;//check user properties\r\n\r\n        case 'array-buffer':\r\n          r = checkPropertyEquality('byteLength');\r\n          if(!r.result) return r;\r\n\r\n          break;//check user properties\r\n\r\n        case 'map':\r\n        case 'set':\r\n          r = checkPropertyEquality('size');\r\n          if(!r.result) return r;\r\n\r\n          stackA.push(a);\r\n          stackB.push(b);\r\n\r\n          var itA = a.entries();\r\n          var nextA = itA.next();\r\n\r\n          while(!nextA.done) {\r\n            var key = nextA.value[0];\r\n            //first check for primitive key if we can do light check\r\n            //using .has and .get\r\n            if(getType(key).type != 'object') {\r\n              if(b.has(key)) {\r\n                if(typeA.cls == 'map') {\r\n                  //for map we also check its value to be equal\r\n                  var value = b.get(key);\r\n                  r = eqInternal(nextA.value[1], value, opts, stackA, stackB, path);\r\n                  if(!r.result) {\r\n                    r.a = nextA.value;\r\n                    r.b = value;\r\n                    r.reason = REASON.MAP_VALUE_EQUALITY;\r\n\r\n                    break;\r\n                  }\r\n                }\r\n\r\n              } else {\r\n                r = result(false, REASON.SET_MAP_MISSING_KEY);\r\n                r.a = key;\r\n                r.b = key;\r\n\r\n                break;\r\n              }\r\n            } else {\r\n              //heavy check\r\n              //we search by iterator for key equality using equal\r\n              var itB = b.entries();\r\n              var nextB = itB.next();\r\n\r\n              while(!nextB.done) {\r\n                //first check for keys\r\n                r = eqInternal(nextA.value[0], nextB.value[0], opts, stackA, stackB, path);\r\n\r\n                if(!r.result) {\r\n                  r.reason = REASON.SET_MAP_MISSING_KEY;\r\n                  r.a = key;\r\n                  r.b = key;\r\n                } else {\r\n                  if(typeA.cls == 'map') {\r\n                    r = eqInternal(nextA.value[1], nextB.value[1], opts, stackA, stackB, path);\r\n\r\n                    if(!r.result) {\r\n                      r.a = nextA.value;\r\n                      r.b = nextB.value;\r\n                      r.reason = REASON.MAP_VALUE_EQUALITY;\r\n                    }\r\n                  }\r\n\r\n                  break;\r\n                }\r\n\r\n                nextB = itB.next();\r\n              }\r\n            }\r\n\r\n            if(!r.result) {\r\n              break;\r\n            }\r\n\r\n            nextA = itA.next();\r\n          }\r\n\r\n          stackA.pop();\r\n          stackB.pop();\r\n\r\n          if(!r.result) {\r\n            r.reason = REASON.SET_MAP_MISSING_ENTRY;\r\n            return r;\r\n          }\r\n\r\n          break; //check user properties\r\n      }\r\n  }\r\n\r\n  // compare deep objects and arrays\r\n  // stacks contain references only\r\n  //\r\n\r\n  l = stackA.length;\r\n  while(l--) {\r\n    if(stackA[l] == a) {\r\n      return result(stackB[l] == b, REASON.CIRCULAR_VALUES);\r\n    }\r\n  }\r\n\r\n  // add `a` and `b` to the stack of traversed objects\r\n  stackA.push(a);\r\n  stackB.push(b);\r\n\r\n  var key;\r\n\r\n  for(key in b) {\r\n    if(hasOwnProperty.call(b, key)) {\r\n      r = result(hasOwnProperty.call(a, key), format(REASON.MISSING_KEY, 'A', key));\r\n      if(!r.result) {\r\n        break;\r\n      }\r\n\r\n      if(r.result) {\r\n        r = checkPropertyEquality(key);\r\n        if(!r.result) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if(r.result) {\r\n    // ensure both objects have the same number of properties\r\n    for(key in a) {\r\n      if(hasOwnProperty.call(a, key)) {\r\n        r = result(hasOwnProperty.call(b, key), format(REASON.MISSING_KEY, 'B', key));\r\n        if(!r.result) {\r\n          return r;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  stackA.pop();\r\n  stackB.pop();\r\n\r\n  if(!r.result) return r;\r\n\r\n  var prototypesEquals = false, canComparePrototypes = false;\r\n\r\n  if(opts.checkProtoEql) {\r\n    if(Object.getPrototypeOf) {//TODO should i check prototypes for === or use eq?\r\n      prototypesEquals = Object.getPrototypeOf(a) === Object.getPrototypeOf(b);\r\n      canComparePrototypes = true;\r\n    } else if(a.__proto__ && b.__proto__) {\r\n      prototypesEquals = a.__proto__ === b.__proto__;\r\n      canComparePrototypes = true;\r\n    }\r\n\r\n    if(canComparePrototypes && !prototypesEquals) {\r\n      r = result(prototypesEquals, REASON.EQUALITY_PROTOTYPE);\r\n      r.showReason = true;\r\n      if(!r.result) {\r\n        return r;\r\n      }\r\n    }\r\n  }\r\n\r\n  return EQUALS;\r\n}\r\n\r\nvar defaultOptions = {\r\n  checkProtoEql: true,\r\n  checkSubType: true\r\n};\r\n\r\nfunction eq(a, b, opts) {\r\n  opts = opts || {};\r\n  if(typeof opts.checkProtoEql !== 'boolean')\r\n    opts.checkProtoEql = defaultOptions.checkProtoEql;\r\n  if(typeof opts.checkSubType !== 'boolean')\r\n    opts.checkSubType = defaultOptions.checkSubType;\r\n\r\n  var r = eqInternal(a, b, opts, [], [], []);\r\n  return r;\r\n}\r\n\r\nmodule.exports = eq;\r\n\r\neq.r = REASON;","blocks":{"total":67,"seen":17,"missing":50,"percentage":0.2537313432835821}},"hash":"1568b2aa44037b8fe2af03e449ca53c7"},"/home/ryan/Desktop/node/node_modules/should/node_modules/should-equal/format.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":7,"total":7,"coverage":{},"source":"module.exports = function format(msg) {\r\n  var args = arguments;\r\n  for(var i = 1, l = args.length; i < l; i++) {\r\n    msg = msg.replace(/%s/, args[i]);\r\n  }\r\n  return msg;\r\n}","blocks":{"total":2,"seen":2,"missing":0,"percentage":1}},"hash":"f2acfa0f7f03c3e5f83964adec625c88"},"/home/ryan/Desktop/node/node_modules/should/lib/ext/chain.js":{"stats":{"percentage":1,"lines":[],"missing":0,"seen":24,"total":24,"coverage":{},"source":"module.exports = function(should, Assertion) {\n  /**\n   * Simple chaining. It actually do nothing.\n   *\n   * @memberOf Assertion\n   * @name be\n   * @property {should.Assertion} be\n   * @alias Assertion#an\n   * @alias Assertion#of\n   * @alias Assertion#a\n   * @alias Assertion#and\n   * @alias Assertion#have\n   * @alias Assertion#has\n   * @alias Assertion#with\n   * @alias Assertion#is\n   * @alias Assertion#which\n   * @alias Assertion#the\n   * @alias Assertion#it\n   * @category assertion chaining\n   */\n  ['an', 'of', 'a', 'and', 'be', 'has', 'have', 'with', 'is', 'which', 'the', 'it'].forEach(function(name) {\n    Assertion.addChain(name);\n  });\n};","blocks":{"total":2,"seen":2,"missing":0,"percentage":1}},"hash":"9e612595364c11cd6218766f4240179d"},"/home/ryan/Desktop/node/node_modules/should/lib/ext/bool.js":{"stats":{"percentage":0.9402985074626866,"lines":[{"lineno":23},{"lineno":41},{"lineno":63},{"lineno":65}],"missing":4,"seen":63,"total":67,"coverage":{"23":{"partial":false,"source":"    this.is.exactly(true);","missing":[{"startCol":4,"endCol":25}]},"41":{"partial":false,"source":"    this.is.exactly(false);","missing":[{"startCol":4,"endCol":26}]},"63":{"partial":false,"source":"    this.params = { operator: 'to be truthy' };","missing":[{"startCol":4,"endCol":47}]},"65":{"partial":false,"source":"    this.assert(this.obj);","missing":[{"startCol":4,"endCol":25}]}},"source":"/*\n * Should\n * Copyright(c) 2010-2014 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nmodule.exports = function(should, Assertion) {\n  /**\n   * Assert given object is exactly `true`.\n   *\n   * @name true\n   * @memberOf Assertion\n   * @category assertion bool\n   * @alias Assertion#True\n   * @example\n   *\n   * (true).should.be.true();\n   * false.should.not.be.true();\n   *\n   * ({ a: 10}).should.not.be.true();\n   */\n  Assertion.add('true', function() {\n    this.is.exactly(true);\n  });\n\n  Assertion.alias('true', 'True');\n\n  /**\n   * Assert given object is exactly `false`.\n   *\n   * @name false\n   * @memberOf Assertion\n   * @category assertion bool\n   * @alias Assertion#False\n   * @example\n   *\n   * (true).should.not.be.false();\n   * false.should.be.false();\n   */\n  Assertion.add('false', function() {\n    this.is.exactly(false);\n  });\n\n  Assertion.alias('false', 'False');\n\n  /**\n   * Assert given object is thuthy according javascript type conversions.\n   *\n   * @name ok\n   * @memberOf Assertion\n   * @category assertion bool\n   * @example\n   *\n   * (true).should.be.ok();\n   * ''.should.not.be.ok();\n   * should(null).not.be.ok();\n   * should(void 0).not.be.ok();\n   *\n   * (10).should.be.ok();\n   * (0).should.not.be.ok();\n   */\n  Assertion.add('ok', function() {\n    this.params = { operator: 'to be truthy' };\n\n    this.assert(this.obj);\n  });\n};","blocks":{"total":4,"seen":1,"missing":3,"percentage":0.25}},"hash":"0fd8875d952ace0c3db55317ebcb527b"},"/home/ryan/Desktop/node/node_modules/should/lib/ext/number.js":{"stats":{"percentage":0.8975903614457831,"lines":[{"lineno":20},{"lineno":22},{"lineno":37},{"lineno":39},{"lineno":41},{"lineno":58},{"lineno":60},{"lineno":77},{"lineno":79},{"lineno":96},{"lineno":98},{"lineno":115},{"lineno":117},{"lineno":138},{"lineno":140},{"lineno":158},{"lineno":160}],"missing":17,"seen":149,"total":166,"coverage":{"20":{"partial":false,"source":"    this.params = { operator: 'to be NaN' };","missing":[{"startCol":4,"endCol":44}]},"22":{"partial":false,"source":"    this.assert(this.obj !== this.obj);","missing":[{"startCol":4,"endCol":38},{"startCol":16,"endCol":37}]},"37":{"partial":false,"source":"    this.params = { operator: 'to be Infinity' };","missing":[{"startCol":4,"endCol":49}]},"39":{"partial":false,"source":"    this.is.a.Number()","missing":[{"startCol":4,"endCol":22},{}]},"40":{"partial":false,"source":"      .and.not.a.NaN()","missing":[{}]},"41":{"partial":false,"source":"      .and.assert(!isFinite(this.obj));","missing":[{},{"startCol":19,"endCol":37},{"startCol":18,"endCol":37}]},"58":{"partial":false,"source":"    this.params = { operator: 'to be within ' + start + '..' + finish, message: description };","missing":[{"startCol":4,"endCol":94},{"startCol":30,"endCol":53},{"startCol":48,"endCol":53},{"startCol":63,"endCol":69}]},"60":{"partial":false,"source":"    this.assert(this.obj >= start && this.obj <= finish);","missing":[{"startCol":4,"endCol":56},{"startCol":16,"endCol":33},{"startCol":28,"endCol":33},{"startCol":37,"endCol":55},{"startCol":49,"endCol":55}]},"77":{"partial":false,"source":"    this.params = { operator: 'to be approximately ' + value + ' ±' + delta, message: description };","missing":[{"startCol":4,"endCol":100},{"startCol":30,"endCol":60},{"startCol":55,"endCol":60},{"startCol":70,"endCol":75}]},"79":{"partial":false,"source":"    this.assert(Math.abs(this.obj - value) <= delta);","missing":[{"startCol":4,"endCol":52},{"startCol":16,"endCol":42},{"startCol":25,"endCol":41},{"startCol":36,"endCol":41},{"startCol":46,"endCol":51}]},"96":{"partial":false,"source":"    this.params = { operator: 'to be above ' + n, message: description };","missing":[{"startCol":4,"endCol":73},{"startCol":30,"endCol":48},{"startCol":47,"endCol":48}]},"98":{"partial":false,"source":"    this.assert(this.obj > n);","missing":[{"startCol":4,"endCol":29},{"startCol":16,"endCol":28},{"startCol":27,"endCol":28}]},"115":{"partial":false,"source":"    this.params = { operator: 'to be below ' + n, message: description };","missing":[{"startCol":4,"endCol":73},{"startCol":30,"endCol":48},{"startCol":47,"endCol":48}]},"117":{"partial":false,"source":"    this.assert(this.obj < n);","missing":[{"startCol":4,"endCol":29},{"startCol":16,"endCol":28},{"startCol":27,"endCol":28}]},"138":{"partial":false,"source":"    this.params = { operator: 'to be above or equal' + n, message: description };","missing":[{"startCol":4,"endCol":81},{"startCol":30,"endCol":56},{"startCol":55,"endCol":56}]},"140":{"partial":false,"source":"    this.assert(this.obj >= n);","missing":[{"startCol":4,"endCol":30},{"startCol":16,"endCol":29},{"startCol":28,"endCol":29}]},"158":{"partial":false,"source":"    this.params = { operator: 'to be below or equal' + n, message: description };","missing":[{"startCol":4,"endCol":81},{"startCol":30,"endCol":56},{"startCol":55,"endCol":56}]},"160":{"partial":false,"source":"    this.assert(this.obj <= n);","missing":[{"startCol":4,"endCol":30},{"startCol":16,"endCol":29},{"startCol":28,"endCol":29}]}},"source":"/*\n * Should\n * Copyright(c) 2010-2014 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nmodule.exports = function(should, Assertion) {\n\n  /**\n   * Assert given object is NaN\n   * @name NaN\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @example\n   *\n   * (10).should.not.be.NaN();\n   * NaN.should.be.NaN();\n   */\n  Assertion.add('NaN', function() {\n    this.params = { operator: 'to be NaN' };\n\n    this.assert(this.obj !== this.obj);\n  });\n\n  /**\n   * Assert given object is not finite (positive or negative)\n   *\n   * @name Infinity\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @example\n   *\n   * (10).should.not.be.Infinity();\n   * NaN.should.not.be.Infinity();\n   */\n  Assertion.add('Infinity', function() {\n    this.params = { operator: 'to be Infinity' };\n\n    this.is.a.Number()\n      .and.not.a.NaN()\n      .and.assert(!isFinite(this.obj));\n  });\n\n  /**\n   * Assert given number between `start` and `finish` or equal one of them.\n   *\n   * @name within\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @param {number} start Start number\n   * @param {number} finish Finish number\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (10).should.be.within(0, 20);\n   */\n  Assertion.add('within', function(start, finish, description) {\n    this.params = { operator: 'to be within ' + start + '..' + finish, message: description };\n\n    this.assert(this.obj >= start && this.obj <= finish);\n  });\n\n  /**\n   * Assert given number near some other `value` within `delta`\n   *\n   * @name approximately\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @param {number} value Center number\n   * @param {number} delta Radius\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (9.99).should.be.approximately(10, 0.1);\n   */\n  Assertion.add('approximately', function(value, delta, description) {\n    this.params = { operator: 'to be approximately ' + value + ' ±' + delta, message: description };\n\n    this.assert(Math.abs(this.obj - value) <= delta);\n  });\n\n  /**\n   * Assert given number above `n`.\n   *\n   * @name above\n   * @alias Assertion#greaterThan\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @param {number} n Margin number\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (10).should.be.above(0);\n   */\n  Assertion.add('above', function(n, description) {\n    this.params = { operator: 'to be above ' + n, message: description };\n\n    this.assert(this.obj > n);\n  });\n\n  /**\n   * Assert given number below `n`.\n   *\n   * @name below\n   * @alias Assertion#lessThan\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @param {number} n Margin number\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (0).should.be.below(10);\n   */\n  Assertion.add('below', function(n, description) {\n    this.params = { operator: 'to be below ' + n, message: description };\n\n    this.assert(this.obj < n);\n  });\n\n  Assertion.alias('above', 'greaterThan');\n  Assertion.alias('below', 'lessThan');\n\n  /**\n   * Assert given number above `n`.\n   *\n   * @name aboveOrEqual\n   * @alias Assertion#greaterThanOrEqual\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @param {number} n Margin number\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (10).should.be.aboveOrEqual(0);\n   * (10).should.be.aboveOrEqual(10);\n   */\n  Assertion.add('aboveOrEqual', function(n, description) {\n    this.params = { operator: 'to be above or equal' + n, message: description };\n\n    this.assert(this.obj >= n);\n  });\n\n  /**\n   * Assert given number below `n`.\n   *\n   * @name belowOrEqual\n   * @alias Assertion#lessThanOrEqual\n   * @memberOf Assertion\n   * @category assertion numbers\n   * @param {number} n Margin number\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (0).should.be.belowOrEqual(10);\n   * (0).should.be.belowOrEqual(0);\n   */\n  Assertion.add('belowOrEqual', function(n, description) {\n    this.params = { operator: 'to be below or equal' + n, message: description };\n\n    this.assert(this.obj <= n);\n  });\n\n  Assertion.alias('aboveOrEqual', 'greaterThanOrEqual');\n  Assertion.alias('belowOrEqual', 'lessThanOrEqual');\n\n};","blocks":{"total":9,"seen":1,"missing":8,"percentage":0.1111111111111111}},"hash":"ddfbafb462c7dd69921f57e1600804b0"},"/home/ryan/Desktop/node/node_modules/should/lib/ext/eql.js":{"stats":{"percentage":0.8308823529411765,"lines":[{"lineno":12},{"lineno":13},{"lineno":14},{"lineno":15},{"lineno":41},{"lineno":43},{"lineno":44},{"lineno":46},{"lineno":48},{"lineno":80},{"lineno":81},{"lineno":83},{"lineno":86},{"lineno":88},{"lineno":89},{"lineno":91},{"lineno":93},{"lineno":94},{"lineno":95},{"lineno":97},{"lineno":98},{"lineno":100},{"lineno":104}],"missing":23,"seen":113,"total":136,"coverage":{"12":{"partial":false,"source":"  return ((r.path.length > 0 ? 'at ' + r.path.map(util.formatProp).join(' -> ') : '') +","missing":[{},{"startCol":11,"endCol":28},{"startCol":31,"endCol":79},{"startCol":39,"endCol":66},{"startCol":82,"endCol":84}]},"13":{"partial":false,"source":"  (r.a === a ? '' : ', A has ' + util.format(r.a)) +","missing":[{},{"startCol":15,"endCol":17},{"startCol":20,"endCol":49},{"startCol":3,"endCol":12},{"startCol":11,"endCol":12},{"startCol":33,"endCol":49}]},"14":{"partial":false,"source":"  (r.b === b ? '' : ' and B has ' + util.format(r.b)) +","missing":[{"startCol":11,"endCol":12},{},{"startCol":3,"endCol":12},{"startCol":20,"endCol":52},{"startCol":15,"endCol":17},{"startCol":36,"endCol":52}]},"15":{"partial":false,"source":"  (r.showReason ? ' because ' + r.reason : '')).trim();","missing":[{},{"startCol":18,"endCol":40},{"startCol":43,"endCol":45}]},"41":{"partial":false,"source":"    this.params = {operator: 'to equal', expected: val, message: description};","missing":[{"startCol":4,"endCol":78}]},"43":{"partial":false,"source":"    var result = eql(this.obj, val, should.config);","missing":[{"startCol":4,"endCol":51},{"startCol":17,"endCol":50}]},"44":{"partial":false,"source":"    this.params.details = result.result ? '' : formatEqlResult(result, this.obj, val);","missing":[{"startCol":4,"endCol":86},{"startCol":42,"endCol":44},{"startCol":47,"endCol":85}]},"46":{"partial":false,"source":"    this.params.showDiff = eql(type(this.obj), type(val)).result;","missing":[{"startCol":4,"endCol":65},{"startCol":27,"endCol":57},{"startCol":31,"endCol":45},{"startCol":47,"endCol":56}]},"48":{"partial":false,"source":"    this.assert(result.result);","missing":[{"startCol":4,"endCol":30}]},"80":{"partial":false,"source":"      if(arguments.length !== 1) {","missing":[{"startCol":9,"endCol":31}]},"81":{"partial":false,"source":"        vals = Array.prototype.slice.call(arguments);","missing":[{"startCol":8,"endCol":53},{"startCol":15,"endCol":52}]},"83":{"partial":false,"source":"        should(vals).be.Array();","missing":[{"startCol":8,"endCol":20}]},"86":{"partial":false,"source":"      this.params = {operator: message, expected: vals};","missing":[{"startCol":6,"endCol":56}]},"88":{"partial":false,"source":"      var obj = this.obj;","missing":[{"startCol":6,"endCol":25}]},"89":{"partial":false,"source":"      var found = false;","missing":[{"startCol":6,"endCol":24}]},"91":{"partial":false,"source":"      util.forEach(vals, function(val) {","missing":[{}]},"92":{"partial":false,"source":"        try {","missing":[{}]},"93":{"partial":false,"source":"          should(val)[method](obj);","missing":[{"startCol":10,"endCol":21},{}]},"94":{"partial":false,"source":"          found = true;","missing":[{},{"startCol":10,"endCol":23}]},"95":{"partial":false,"source":"          return false;","missing":[{},{"startCol":10,"endCol":23}]},"96":{"partial":false,"source":"        } catch(e) {","missing":[{}]},"97":{"partial":false,"source":"          if(e instanceof should.AssertionError) {","missing":[{"startCol":13,"endCol":47},{}]},"98":{"partial":false,"source":"            return;//do nothing","missing":[{},{"startCol":12,"endCol":19}]},"99":{"partial":false,"source":"          }","missing":[{}]},"100":{"partial":false,"source":"          throw e;","missing":[{},{"startCol":10,"endCol":18}]},"101":{"partial":false,"source":"        }","missing":[{}]},"102":{"partial":false,"source":"      });","missing":[{}]},"104":{"partial":false,"source":"      this.assert(found);","missing":[{"startCol":6,"endCol":24}]}},"source":"/*\n * Should\n * Copyright(c) 2010-2014 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar eql = require('should-equal');\nvar type = require('should-type');\nvar util = require('../util');\n\nfunction formatEqlResult(r, a, b) {\n  return ((r.path.length > 0 ? 'at ' + r.path.map(util.formatProp).join(' -> ') : '') +\n  (r.a === a ? '' : ', A has ' + util.format(r.a)) +\n  (r.b === b ? '' : ' and B has ' + util.format(r.b)) +\n  (r.showReason ? ' because ' + r.reason : '')).trim();\n}\n\nmodule.exports = function(should, Assertion) {\n\n  /**\n   * Deep object equality comparison. For full spec see [`should-equal tests`](https://github.com/shouldjs/equal/blob/master/test.js).\n   *\n   * @name eql\n   * @memberOf Assertion\n   * @category assertion equality\n   * @alias Assertion#deepEqual\n   * @param {*} val Expected value\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * (10).should.be.eql(10);\n   * ('10').should.not.be.eql(10);\n   * (-0).should.not.be.eql(+0);\n   *\n   * NaN.should.be.eql(NaN);\n   *\n   * ({ a: 10}).should.be.eql({ a: 10 });\n   * [ 'a' ].should.not.be.eql({ '0': 'a' });\n   */\n  Assertion.add('eql', function(val, description) {\n    this.params = {operator: 'to equal', expected: val, message: description};\n\n    var result = eql(this.obj, val, should.config);\n    this.params.details = result.result ? '' : formatEqlResult(result, this.obj, val);\n\n    this.params.showDiff = eql(type(this.obj), type(val)).result;\n\n    this.assert(result.result);\n  });\n\n  /**\n   * Exact comparison using ===.\n   *\n   * @name equal\n   * @memberOf Assertion\n   * @category assertion equality\n   * @alias Assertion#exactly\n   * @param {*} val Expected value\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * 10.should.be.equal(10);\n   * 'a'.should.be.exactly('a');\n   *\n   * should(null).be.exactly(null);\n   */\n  Assertion.add('equal', function(val, description) {\n    this.params = {operator: 'to be', expected: val, message: description};\n\n    this.params.showDiff = eql(type(this.obj), type(val)).result;\n\n    this.assert(val === this.obj);\n  });\n\n  Assertion.alias('equal', 'exactly');\n  Assertion.alias('eql', 'deepEqual');\n\n  function addOneOf(name, message, method) {\n    Assertion.add(name, function(vals) {\n      if(arguments.length !== 1) {\n        vals = Array.prototype.slice.call(arguments);\n      } else {\n        should(vals).be.Array();\n      }\n\n      this.params = {operator: message, expected: vals};\n\n      var obj = this.obj;\n      var found = false;\n\n      util.forEach(vals, function(val) {\n        try {\n          should(val)[method](obj);\n          found = true;\n          return false;\n        } catch(e) {\n          if(e instanceof should.AssertionError) {\n            return;//do nothing\n          }\n          throw e;\n        }\n      });\n\n      this.assert(found);\n    });\n  }\n\n  /**\n   * Exact comparison using === to be one of supplied objects.\n   *\n   * @name equalOneOf\n   * @memberOf Assertion\n   * @category assertion equality\n   * @param {Array|*} vals Expected values\n   * @example\n   *\n   * 'ab'.should.be.equalOneOf('a', 10, 'ab');\n   * 'ab'.should.be.equalOneOf(['a', 10, 'ab']);\n   */\n  addOneOf('equalOneOf', 'to be equals one of', 'equal');\n\n  /**\n   * Exact comparison using .eql to be one of supplied objects.\n   *\n   * @name oneOf\n   * @memberOf Assertion\n   * @category assertion equality\n   * @param {Array|*} vals Expected values\n   * @example\n   *\n   * ({a: 10}).should.be.oneOf('a', 10, 'ab', {a: 10});\n   * ({a: 10}).should.be.oneOf(['a', 10, 'ab', {a: 10}]);\n   */\n  addOneOf('oneOf', 'to be one of', 'eql');\n\n};","blocks":{"total":12,"seen":3,"missing":9,"percentage":0.25}},"hash":"40f2630d4fa79a1153b49bec410ec442"},"/home/ryan/Desktop/node/node_modules/should/lib/ext/type.js":{"stats":{"percentage":0.8526785714285714,"lines":[{"lineno":17},{"lineno":19},{"lineno":30},{"lineno":32},{"lineno":46},{"lineno":48},{"lineno":61},{"lineno":63},{"lineno":75},{"lineno":77},{"lineno":87},{"lineno":89},{"lineno":99},{"lineno":101},{"lineno":111},{"lineno":113},{"lineno":123},{"lineno":125},{"lineno":135},{"lineno":137},{"lineno":148},{"lineno":150},{"lineno":163},{"lineno":165},{"lineno":178},{"lineno":180},{"lineno":193},{"lineno":195},{"lineno":206},{"lineno":208},{"lineno":218},{"lineno":220},{"lineno":222}],"missing":33,"seen":191,"total":224,"coverage":{"17":{"partial":false,"source":"    this.params = {operator: 'to be a number'};","missing":[{"startCol":4,"endCol":47}]},"19":{"partial":false,"source":"    this.have.type('number');","missing":[{"startCol":4,"endCol":28}]},"30":{"partial":false,"source":"    this.params = {operator: 'to be arguments'};","missing":[{"startCol":4,"endCol":48}]},"32":{"partial":false,"source":"    this.have.class('Arguments');","missing":[{"startCol":4,"endCol":32}]},"46":{"partial":false,"source":"    this.params = {operator: 'to have type ' + type, message: description};","missing":[{"startCol":4,"endCol":75},{"startCol":29,"endCol":51},{"startCol":47,"endCol":51}]},"48":{"partial":false,"source":"    should(typeof this.obj).be.exactly(type);","missing":[{"startCol":4,"endCol":27},{"startCol":11,"endCol":26}]},"61":{"partial":false,"source":"    this.params = {operator: 'to be an instance of ' + util.functionName(constructor), message: description};","missing":[{"startCol":4,"endCol":109},{"startCol":29,"endCol":85},{"startCol":55,"endCol":85}]},"63":{"partial":false,"source":"    this.assert(Object(this.obj) instanceof constructor);","missing":[{"startCol":4,"endCol":56},{"startCol":16,"endCol":32},{"startCol":44,"endCol":55}]},"75":{"partial":false,"source":"    this.params = {operator: 'to be a function'};","missing":[{"startCol":4,"endCol":49}]},"77":{"partial":false,"source":"    this.have.type('function');","missing":[{"startCol":4,"endCol":30}]},"87":{"partial":false,"source":"    this.params = {operator: 'to be an object'};","missing":[{"startCol":4,"endCol":48}]},"89":{"partial":false,"source":"    this.is.not.null().and.have.type('object');","missing":[{"startCol":4,"endCol":22}]},"99":{"partial":false,"source":"    this.params = {operator: 'to be a string'};","missing":[{"startCol":4,"endCol":47}]},"101":{"partial":false,"source":"    this.have.type('string');","missing":[{"startCol":4,"endCol":28}]},"111":{"partial":false,"source":"    this.params = {operator: 'to be an array'};","missing":[{"startCol":4,"endCol":47}]},"113":{"partial":false,"source":"    this.have.class('Array');","missing":[{"startCol":4,"endCol":28}]},"123":{"partial":false,"source":"    this.params = {operator: 'to be a boolean'};","missing":[{"startCol":4,"endCol":48}]},"125":{"partial":false,"source":"    this.have.type('boolean');","missing":[{"startCol":4,"endCol":29}]},"135":{"partial":false,"source":"    this.params = {operator: 'to be an error'};","missing":[{"startCol":4,"endCol":47}]},"137":{"partial":false,"source":"    this.have.instanceOf(Error);","missing":[{"startCol":4,"endCol":31}]},"148":{"partial":false,"source":"    this.params = {operator: 'to be null'};","missing":[{"startCol":4,"endCol":43}]},"150":{"partial":false,"source":"    this.assert(this.obj === null);","missing":[{"startCol":4,"endCol":34},{"startCol":16,"endCol":33}]},"163":{"partial":false,"source":"    this.params = {operator: 'to have [[Class]] ' + cls};","missing":[{"startCol":4,"endCol":57},{"startCol":29,"endCol":55},{"startCol":52,"endCol":55}]},"165":{"partial":false,"source":"    this.assert(Object.prototype.toString.call(this.obj) === '[object ' + cls + ']');","missing":[{"startCol":4,"endCol":84},{"startCol":16,"endCol":56},{"startCol":61,"endCol":77},{"startCol":74,"endCol":77}]},"178":{"partial":false,"source":"    this.params = {operator: 'to be undefined'};","missing":[{"startCol":4,"endCol":48}]},"180":{"partial":false,"source":"    this.assert(this.obj === void 0);","missing":[{"startCol":4,"endCol":36},{"startCol":16,"endCol":35},{"startCol":29,"endCol":35}]},"193":{"partial":false,"source":"    this.params = {operator: 'to be iterable'};","missing":[{"startCol":4,"endCol":47}]},"195":{"partial":false,"source":"    should(this.obj).have.property(Symbol.iterator).which.is.a.Function();","missing":[{"startCol":4,"endCol":20}]},"206":{"partial":false,"source":"    this.params = {operator: 'to be iterator'};","missing":[{"startCol":4,"endCol":47}]},"208":{"partial":false,"source":"    should(this.obj).have.property('next').which.is.a.Function();","missing":[{"startCol":4,"endCol":20}]},"218":{"partial":false,"source":"    this.params = {operator: 'to be generator'};","missing":[{"startCol":4,"endCol":48}]},"220":{"partial":false,"source":"    should(this.obj).be.iterable","missing":[{},{"startCol":4,"endCol":20}]},"221":{"partial":false,"source":"      .and.iterator","missing":[{}]},"222":{"partial":false,"source":"      .and.it.is.equal(this.obj[Symbol.iterator]());","missing":[{"startCol":23,"endCol":50},{}]}},"source":"/*\n * Should\n * Copyright(c) 2010-2014 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar util = require('../util');\n\nmodule.exports = function(should, Assertion) {\n  /**\n   * Assert given object is number\n   * @name Number\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Number', function() {\n    this.params = {operator: 'to be a number'};\n\n    this.have.type('number');\n  });\n\n  /**\n   * Assert given object is arguments\n   * @name arguments\n   * @alias Assertion#Arguments\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('arguments', function() {\n    this.params = {operator: 'to be arguments'};\n\n    this.have.class('Arguments');\n  });\n\n  Assertion.alias('arguments', 'Arguments');\n\n  /**\n   * Assert given object has some type using `typeof`\n   * @name type\n   * @memberOf Assertion\n   * @param {string} type Type name\n   * @param {string} [description] Optional message\n   * @category assertion types\n   */\n  Assertion.add('type', function(type, description) {\n    this.params = {operator: 'to have type ' + type, message: description};\n\n    should(typeof this.obj).be.exactly(type);\n  });\n\n  /**\n   * Assert given object is instance of `constructor`\n   * @name instanceof\n   * @alias Assertion#instanceOf\n   * @memberOf Assertion\n   * @param {Function} constructor Constructor function\n   * @param {string} [description] Optional message\n   * @category assertion types\n   */\n  Assertion.add('instanceof', function(constructor, description) {\n    this.params = {operator: 'to be an instance of ' + util.functionName(constructor), message: description};\n\n    this.assert(Object(this.obj) instanceof constructor);\n  });\n\n  Assertion.alias('instanceof', 'instanceOf');\n\n  /**\n   * Assert given object is function\n   * @name Function\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Function', function() {\n    this.params = {operator: 'to be a function'};\n\n    this.have.type('function');\n  });\n\n  /**\n   * Assert given object is object\n   * @name Object\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Object', function() {\n    this.params = {operator: 'to be an object'};\n\n    this.is.not.null().and.have.type('object');\n  });\n\n  /**\n   * Assert given object is string\n   * @name String\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('String', function() {\n    this.params = {operator: 'to be a string'};\n\n    this.have.type('string');\n  });\n\n  /**\n   * Assert given object is array\n   * @name Array\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Array', function() {\n    this.params = {operator: 'to be an array'};\n\n    this.have.class('Array');\n  });\n\n  /**\n   * Assert given object is boolean\n   * @name Boolean\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Boolean', function() {\n    this.params = {operator: 'to be a boolean'};\n\n    this.have.type('boolean');\n  });\n\n  /**\n   * Assert given object is error\n   * @name Error\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('Error', function() {\n    this.params = {operator: 'to be an error'};\n\n    this.have.instanceOf(Error);\n  });\n\n  /**\n   * Assert given object is null\n   * @name null\n   * @alias Assertion#Null\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('null', function() {\n    this.params = {operator: 'to be null'};\n\n    this.assert(this.obj === null);\n  });\n\n  Assertion.alias('null', 'Null');\n\n  /**\n   * Assert given object has some internal [[Class]], via Object.prototype.toString call\n   * @name class\n   * @alias Assertion#Class\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('class', function(cls) {\n    this.params = {operator: 'to have [[Class]] ' + cls};\n\n    this.assert(Object.prototype.toString.call(this.obj) === '[object ' + cls + ']');\n  });\n\n  Assertion.alias('class', 'Class');\n\n  /**\n   * Assert given object is undefined\n   * @name undefined\n   * @alias Assertion#Undefined\n   * @memberOf Assertion\n   * @category assertion types\n   */\n  Assertion.add('undefined', function() {\n    this.params = {operator: 'to be undefined'};\n\n    this.assert(this.obj === void 0);\n  });\n\n  Assertion.alias('undefined', 'Undefined');\n\n  /**\n   * Assert given object supports es6 iterable protocol (just check\n   * that object has property Symbol.iterator, which is a function)\n   * @name iterable\n   * @memberOf Assertion\n   * @category assertion es6\n   */\n  Assertion.add('iterable', function() {\n    this.params = {operator: 'to be iterable'};\n\n    should(this.obj).have.property(Symbol.iterator).which.is.a.Function();\n  });\n\n  /**\n   * Assert given object supports es6 iterator protocol (just check\n   * that object has property next, which is a function)\n   * @name iterator\n   * @memberOf Assertion\n   * @category assertion es6\n   */\n  Assertion.add('iterator', function() {\n    this.params = {operator: 'to be iterator'};\n\n    should(this.obj).have.property('next').which.is.a.Function();\n  });\n\n  /**\n   * Assert given object is a generator object\n   * @name generator\n   * @memberOf Assertion\n   * @category assertion es6\n   */\n  Assertion.add('generator', function() {\n    this.params = {operator: 'to be generator'};\n\n    should(this.obj).be.iterable\n      .and.iterator\n      .and.it.is.equal(this.obj[Symbol.iterator]());\n  });\n};","blocks":{"total":17,"seen":1,"missing":16,"percentage":0.058823529411764705}},"hash":"e523906cf7c3eeba90c69ffc581987e7"},"/home/ryan/Desktop/node/node_modules/should/lib/ext/string.js":{"stats":{"percentage":0.9024390243902439,"lines":[{"lineno":20},{"lineno":22},{"lineno":37},{"lineno":39}],"missing":4,"seen":37,"total":41,"coverage":{"20":{"partial":false,"source":"    this.params = { operator: 'to start with ' + should.format(str), message: description };","missing":[{"startCol":4,"endCol":92},{"startCol":30,"endCol":67},{"startCol":49,"endCol":67}]},"22":{"partial":false,"source":"    this.assert(0 === this.obj.indexOf(str));","missing":[{"startCol":4,"endCol":44},{"startCol":16,"endCol":43},{"startCol":22,"endCol":43}]},"37":{"partial":false,"source":"    this.params = { operator: 'to end with ' + should.format(str), message: description };","missing":[{"startCol":4,"endCol":90},{"startCol":30,"endCol":65},{"startCol":47,"endCol":65}]},"39":{"partial":false,"source":"    this.assert(this.obj.indexOf(str, this.obj.length - str.length) >= 0);","missing":[{"startCol":4,"endCol":73},{"startCol":16,"endCol":67},{"startCol":38,"endCol":66}]}},"source":"/*\n * Should\n * Copyright(c) 2010-2014 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nmodule.exports = function(should, Assertion) {\n  /**\n   * Assert given string starts with prefix\n   * @name startWith\n   * @memberOf Assertion\n   * @category assertion strings\n   * @param {string} str Prefix\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * 'abc'.should.startWith('a');\n   */\n  Assertion.add('startWith', function(str, description) {\n    this.params = { operator: 'to start with ' + should.format(str), message: description };\n\n    this.assert(0 === this.obj.indexOf(str));\n  });\n\n  /**\n   * Assert given string starts with prefix\n   * @name endWith\n   * @memberOf Assertion\n   * @category assertion strings\n   * @param {string} str Prefix\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * 'abca'.should.endWith('a');\n   */\n  Assertion.add('endWith', function(str, description) {\n    this.params = { operator: 'to end with ' + should.format(str), message: description };\n\n    this.assert(this.obj.indexOf(str, this.obj.length - str.length) >= 0);\n  });\n};","blocks":{"total":3,"seen":1,"missing":2,"percentage":0.3333333333333333}},"hash":"fe0445a24f3c232a4df49eaf6f3c1eb1"},"/home/ryan/Desktop/node/node_modules/should/lib/ext/property.js":{"stats":{"percentage":0.6918918918918919,"lines":[{"lineno":27},{"lineno":28},{"lineno":29},{"lineno":30},{"lineno":34},{"lineno":35},{"lineno":36},{"lineno":38},{"lineno":39},{"lineno":40},{"lineno":41},{"lineno":42},{"lineno":44},{"lineno":45},{"lineno":48},{"lineno":65},{"lineno":67},{"lineno":68},{"lineno":71},{"lineno":72},{"lineno":73},{"lineno":88},{"lineno":90},{"lineno":91},{"lineno":94},{"lineno":95},{"lineno":96},{"lineno":113},{"lineno":114},{"lineno":115},{"lineno":116},{"lineno":117},{"lineno":119},{"lineno":121},{"lineno":138},{"lineno":139},{"lineno":140},{"lineno":141},{"lineno":142},{"lineno":143},{"lineno":145},{"lineno":146},{"lineno":150},{"lineno":153},{"lineno":154},{"lineno":157},{"lineno":158},{"lineno":159},{"lineno":161},{"lineno":162},{"lineno":166},{"lineno":167},{"lineno":169},{"lineno":173},{"lineno":176},{"lineno":178},{"lineno":179},{"lineno":182},{"lineno":183},{"lineno":184},{"lineno":185},{"lineno":187},{"lineno":191},{"lineno":192},{"lineno":195},{"lineno":196},{"lineno":198},{"lineno":202},{"lineno":220},{"lineno":241},{"lineno":242},{"lineno":244},{"lineno":248},{"lineno":250},{"lineno":268},{"lineno":270},{"lineno":271},{"lineno":273},{"lineno":275},{"lineno":296},{"lineno":297},{"lineno":298},{"lineno":300},{"lineno":302},{"lineno":305},{"lineno":306},{"lineno":307},{"lineno":308},{"lineno":312},{"lineno":313},{"lineno":314},{"lineno":315},{"lineno":319},{"lineno":320},{"lineno":322},{"lineno":324},{"lineno":325},{"lineno":327},{"lineno":328},{"lineno":330},{"lineno":347},{"lineno":348},{"lineno":349},{"lineno":351},{"lineno":353},{"lineno":355},{"lineno":357},{"lineno":359},{"lineno":360},{"lineno":361},{"lineno":362},{"lineno":363},{"lineno":366},{"lineno":368}],"missing":114,"seen":256,"total":370,"coverage":{"27":{"partial":false,"source":"    this.params = {actual: this.obj, operator: 'to have own property with descriptor ' + i(desc)};","missing":[{"startCol":4,"endCol":98},{"startCol":47,"endCol":96},{"startCol":89,"endCol":96}]},"28":{"partial":false,"source":"    var obj = this.obj;","missing":[{"startCol":4,"endCol":23}]},"29":{"partial":false,"source":"    this.have.ownProperty(name);","missing":[{"startCol":4,"endCol":31}]},"30":{"partial":false,"source":"    should(Object.getOwnPropertyDescriptor(Object(obj), name)).have.properties(desc);","missing":[{"startCol":4,"endCol":62},{"startCol":11,"endCol":61},{"startCol":43,"endCol":54}]},"34":{"partial":false,"source":"    var args = {};","missing":[{"startCol":4,"endCol":18}]},"35":{"partial":false,"source":"    if(arguments.length > 1) {","missing":[{"startCol":7,"endCol":27}]},"36":{"partial":false,"source":"      args.names = aSlice.call(arguments);","missing":[{"startCol":6,"endCol":42},{"startCol":19,"endCol":41}]},"38":{"partial":false,"source":"      var arg = arguments[0];","missing":[{"startCol":6,"endCol":29}]},"39":{"partial":false,"source":"      if(typeof arg === 'string') {","missing":[{"startCol":9,"endCol":19}]},"40":{"partial":false,"source":"        args.names = [arg];","missing":[{"startCol":8,"endCol":27}]},"41":{"partial":false,"source":"      } else if(util.isIndexable(arg)) {","missing":[{"startCol":16,"endCol":37}]},"42":{"partial":false,"source":"        args.names = arg;","missing":[{"startCol":8,"endCol":25}]},"44":{"partial":false,"source":"        args.names = Object.keys(arg);","missing":[{"startCol":8,"endCol":38},{"startCol":21,"endCol":37}]},"45":{"partial":false,"source":"        args.values = arg;","missing":[{"startCol":8,"endCol":26}]},"48":{"partial":false,"source":"    return args;","missing":[{"startCol":4,"endCol":16}]},"65":{"partial":false,"source":"    name = util.convertPropertyName(name);","missing":[{"startCol":4,"endCol":42},{"startCol":11,"endCol":41}]},"67":{"partial":false,"source":"    this.params = {","missing":[{}]},"68":{"partial":false,"source":"      operator: \"to have enumerable property \" + util.formatProp(name) + (arguments.length > 1 ? \" equal to \" + i(val): \"\")","missing":[{"startCol":16,"endCol":70},{},{"startCol":49,"endCol":70},{"startCol":74,"endCol":94},{"startCol":97,"endCol":118},{"startCol":112,"endCol":118},{"startCol":120,"endCol":122}]},"69":{"partial":false,"source":"    };","missing":[{}]},"71":{"partial":false,"source":"    var desc = { enumerable: true };","missing":[{"startCol":4,"endCol":36}]},"72":{"partial":false,"source":"    if(arguments.length > 1) desc.value = val;","missing":[{"startCol":7,"endCol":27},{"startCol":29,"endCol":46}]},"73":{"partial":false,"source":"    this.have.propertyWithDescriptor(name, desc);","missing":[{"startCol":4,"endCol":48}]},"88":{"partial":false,"source":"    var args = processPropsArgs.apply(null, arguments);","missing":[{"startCol":4,"endCol":55},{"startCol":15,"endCol":54}]},"90":{"partial":false,"source":"    this.params = {","missing":[{}]},"91":{"partial":false,"source":"      operator: \"to have enumerables \" + args.names.map(util.formatProp)","missing":[{"startCol":16,"endCol":72},{"startCol":41,"endCol":72},{}]},"92":{"partial":false,"source":"    };","missing":[{}]},"94":{"partial":false,"source":"    var obj = this.obj;","missing":[{"startCol":4,"endCol":23}]},"95":{"partial":false,"source":"    args.names.forEach(function(name) {","missing":[{}]},"96":{"partial":false,"source":"      should(obj).have.enumerable(name);","missing":[{"startCol":6,"endCol":17},{}]},"97":{"partial":false,"source":"    });","missing":[{}]},"113":{"partial":false,"source":"    name = util.convertPropertyName(name);","missing":[{"startCol":4,"endCol":42},{"startCol":11,"endCol":41}]},"114":{"partial":false,"source":"    if(arguments.length > 1) {","missing":[{"startCol":7,"endCol":27}]},"115":{"partial":false,"source":"      var p = {};","missing":[{"startCol":6,"endCol":17}]},"116":{"partial":false,"source":"      p[name] = val;","missing":[{"startCol":6,"endCol":20}]},"117":{"partial":false,"source":"      this.have.properties(p);","missing":[{"startCol":6,"endCol":29}]},"119":{"partial":false,"source":"      this.have.properties(name);","missing":[{"startCol":6,"endCol":32}]},"121":{"partial":false,"source":"    this.obj = this.obj[name];","missing":[{"startCol":4,"endCol":30}]},"138":{"partial":false,"source":"    var values = {};","missing":[{"startCol":4,"endCol":20}]},"139":{"partial":false,"source":"    if(arguments.length > 1) {","missing":[{"startCol":7,"endCol":27}]},"140":{"partial":false,"source":"      names = aSlice.call(arguments);","missing":[{"startCol":6,"endCol":37},{"startCol":14,"endCol":36}]},"141":{"partial":false,"source":"    } else if(!Array.isArray(names)) {","missing":[{"startCol":14,"endCol":35},{"startCol":15,"endCol":35}]},"142":{"partial":false,"source":"      if(typeof names == 'string' || typeof names == 'symbol') {","missing":[{"startCol":9,"endCol":21},{"startCol":37,"endCol":49}]},"143":{"partial":false,"source":"        names = [names];","missing":[{"startCol":8,"endCol":24}]},"145":{"partial":false,"source":"        values = names;","missing":[{"startCol":8,"endCol":23}]},"146":{"partial":false,"source":"        names = Object.keys(names);","missing":[{"startCol":8,"endCol":35},{"startCol":16,"endCol":34}]},"150":{"partial":false,"source":"    var obj = Object(this.obj), missingProperties = [];","missing":[{"startCol":4,"endCol":55},{"startCol":14,"endCol":30}]},"153":{"partial":false,"source":"    names.forEach(function(name) {","missing":[{}]},"154":{"partial":false,"source":"      if(!(name in obj)) missingProperties.push(util.formatProp(name));","missing":[{"startCol":9,"endCol":23},{"startCol":11,"endCol":15},{"startCol":19,"endCol":22},{"startCol":25,"endCol":70},{},{"startCol":48,"endCol":69}]},"155":{"partial":false,"source":"    });","missing":[{}]},"157":{"partial":false,"source":"    var props = missingProperties;","missing":[{"startCol":4,"endCol":34}]},"158":{"partial":false,"source":"    if(props.length === 0) {","missing":[{"startCol":7,"endCol":25}]},"159":{"partial":false,"source":"      props = names.map(util.formatProp);","missing":[{"startCol":6,"endCol":41},{"startCol":14,"endCol":40}]},"161":{"partial":false,"source":"      props = names.filter(function(name) {","missing":[{}]},"162":{"partial":false,"source":"        return missingProperties.indexOf(util.formatProp(name)) < 0;","missing":[{"startCol":8,"endCol":68},{"startCol":15,"endCol":63},{},{"startCol":41,"endCol":62}]},"163":{"partial":false,"source":"      }).map(util.formatProp);","missing":[{}]},"166":{"partial":false,"source":"    var operator = (props.length === 1 ?","missing":[{},{"startCol":20,"endCol":38}]},"167":{"partial":false,"source":"        'to have property ' : 'to have ' + (this.anyOne ? 'any of ' : '') + 'properties ') + props.join(', ');","missing":[{"startCol":8,"endCol":27},{"startCol":30,"endCol":73},{},{"startCol":58,"endCol":67},{"startCol":70,"endCol":72},{"startCol":93,"endCol":109}]},"169":{"partial":false,"source":"    this.params = {obj: this.obj, operator: operator};","missing":[{"startCol":4,"endCol":54}]},"173":{"partial":false,"source":"    this.assert(missingProperties.length === 0 || (this.anyOne && missingProperties.length != names.length));","missing":[{"startCol":4,"endCol":108},{"startCol":16,"endCol":46},{"startCol":51,"endCol":106},{"startCol":66,"endCol":106}]},"176":{"partial":false,"source":"    var valueCheckNames = Object.keys(values);","missing":[{"startCol":4,"endCol":46},{"startCol":26,"endCol":45}]},"178":{"partial":false,"source":"      var wrongValues = [];","missing":[{"startCol":6,"endCol":27}]},"179":{"partial":false,"source":"      props = [];","missing":[{"startCol":6,"endCol":17}]},"182":{"partial":false,"source":"      valueCheckNames.forEach(function(name) {","missing":[{}]},"183":{"partial":false,"source":"        var value = values[name];","missing":[{},{"startCol":8,"endCol":33}]},"184":{"partial":false,"source":"        if(!eql(obj[name], value).result) {","missing":[{"startCol":11,"endCol":40},{"startCol":12,"endCol":33},{}]},"185":{"partial":false,"source":"          wrongValues.push(util.formatProp(name) + ' of ' + i(value) + ' (got ' + i(obj[name]) + ')');","missing":[{"startCol":10,"endCol":101},{"startCol":27,"endCol":48},{},{"startCol":60,"endCol":68},{"startCol":82,"endCol":94}]},"186":{"partial":false,"source":"        } else {","missing":[{}]},"187":{"partial":false,"source":"          props.push(util.formatProp(name) + ' of ' + i(value));","missing":[{"startCol":10,"endCol":63},{"startCol":21,"endCol":42},{},{"startCol":54,"endCol":62}]},"188":{"partial":false,"source":"        }","missing":[{}]},"189":{"partial":false,"source":"      });","missing":[{}]},"191":{"partial":false,"source":"      if((wrongValues.length !== 0 && !this.anyOne) || (this.anyOne && props.length === 0)) {","missing":[{"startCol":9,"endCol":90},{"startCol":10,"endCol":34},{"startCol":38,"endCol":50},{"startCol":56,"endCol":89},{"startCol":71,"endCol":89}]},"192":{"partial":false,"source":"        props = wrongValues;","missing":[{"startCol":8,"endCol":28}]},"195":{"partial":false,"source":"      operator = (props.length === 1 ?","missing":[{},{"startCol":18,"endCol":36}]},"196":{"partial":false,"source":"        'to have property ' : 'to have ' + (this.anyOne ? 'any of ' : '') + 'properties ') + props.join(', ');","missing":[{"startCol":58,"endCol":67},{"startCol":8,"endCol":27},{"startCol":30,"endCol":89},{"startCol":93,"endCol":109},{"startCol":70,"endCol":72},{}]},"198":{"partial":false,"source":"      this.params = {obj: this.obj, operator: operator};","missing":[{"startCol":6,"endCol":56}]},"202":{"partial":false,"source":"      this.assert(wrongValues.length === 0 || (this.anyOne && wrongValues.length != valueCheckNames.length));","missing":[{"startCol":6,"endCol":108},{"startCol":18,"endCol":42},{"startCol":47,"endCol":106},{"startCol":62,"endCol":106}]},"220":{"partial":false,"source":"    this.have.property('length', n, description);","missing":[{"startCol":4,"endCol":48}]},"241":{"partial":false,"source":"    name = util.convertPropertyName(name);","missing":[{"startCol":4,"endCol":42},{"startCol":11,"endCol":41}]},"242":{"partial":false,"source":"    this.params = {","missing":[{}]},"243":{"partial":false,"source":"      actual: this.obj,","missing":[{}]},"244":{"partial":false,"source":"      operator: 'to have own property ' + util.formatProp(name),","missing":[{},{"startCol":16,"endCol":63},{"startCol":42,"endCol":63}]},"245":{"partial":false,"source":"      message: description","missing":[{}]},"246":{"partial":false,"source":"    };","missing":[{}]},"248":{"partial":false,"source":"    this.assert(hasOwnProperty.call(this.obj, name));","missing":[{"startCol":4,"endCol":52},{"startCol":16,"endCol":51}]},"250":{"partial":false,"source":"    this.obj = this.obj[name];","missing":[{"startCol":4,"endCol":30}]},"268":{"partial":false,"source":"    this.params = {operator: 'to be empty'};","missing":[{"startCol":4,"endCol":44}]},"270":{"partial":false,"source":"    if(util.length(this.obj) !== void 0) {","missing":[{"startCol":7,"endCol":28},{"startCol":33,"endCol":39}]},"271":{"partial":false,"source":"      should(this.obj).have.property('length', 0);","missing":[{"startCol":6,"endCol":22}]},"273":{"partial":false,"source":"      var obj = Object(this.obj); // wrap to reference for booleans and numbers","missing":[{"startCol":6,"endCol":33},{"startCol":16,"endCol":32}]},"275":{"partial":false,"source":"        should(this.obj).not.have.ownProperty(prop);","missing":[{"startCol":8,"endCol":24}]},"296":{"partial":false,"source":"    if(arguments.length > 1) keys = aSlice.call(arguments);","missing":[{"startCol":7,"endCol":27},{"startCol":29,"endCol":59},{"startCol":36,"endCol":58}]},"297":{"partial":false,"source":"    else if(arguments.length === 1 && typeof keys === 'string') keys = [keys];","missing":[{"startCol":12,"endCol":34},{"startCol":38,"endCol":49},{"startCol":64,"endCol":78}]},"298":{"partial":false,"source":"    else if(arguments.length === 0) keys = [];","missing":[{"startCol":12,"endCol":34},{"startCol":36,"endCol":46}]},"300":{"partial":false,"source":"    keys = keys.map(String);","missing":[{"startCol":4,"endCol":28},{"startCol":11,"endCol":27}]},"302":{"partial":false,"source":"    var obj = Object(this.obj);","missing":[{"startCol":4,"endCol":31},{"startCol":14,"endCol":30}]},"305":{"partial":false,"source":"    var missingKeys = [];","missing":[{"startCol":4,"endCol":25}]},"306":{"partial":false,"source":"    keys.forEach(function(key) {","missing":[{}]},"307":{"partial":false,"source":"      if(!hasOwnProperty.call(this.obj, key))","missing":[{"startCol":9,"endCol":44},{"startCol":10,"endCol":44},{}]},"308":{"partial":false,"source":"        missingKeys.push(util.formatProp(key));","missing":[{"startCol":25,"endCol":45},{"startCol":8,"endCol":46},{}]},"309":{"partial":false,"source":"    }, this);","missing":[{}]},"312":{"partial":false,"source":"    var extraKeys = [];","missing":[{"startCol":4,"endCol":23}]},"313":{"partial":false,"source":"    Object.keys(obj).forEach(function(key) {","missing":[{},{"startCol":4,"endCol":20}]},"314":{"partial":false,"source":"      if(keys.indexOf(key) < 0) {","missing":[{},{"startCol":9,"endCol":26}]},"315":{"partial":false,"source":"        extraKeys.push(util.formatProp(key));","missing":[{"startCol":23,"endCol":43},{},{"startCol":8,"endCol":44}]},"316":{"partial":false,"source":"      }","missing":[{}]},"317":{"partial":false,"source":"    });","missing":[{}]},"319":{"partial":false,"source":"    var verb = keys.length === 0 ? 'to be empty' :","missing":[{"startCol":35,"endCol":48},{},{"startCol":15,"endCol":32}]},"320":{"partial":false,"source":"    'to have ' + (keys.length === 1 ? 'key ' : 'keys ');","missing":[{},{"startCol":4,"endCol":55},{"startCol":18,"endCol":35},{"startCol":47,"endCol":54},{"startCol":38,"endCol":44}]},"322":{"partial":false,"source":"    this.params = {operator: verb + keys.map(util.formatProp).join(', ')};","missing":[{"startCol":4,"endCol":74},{"startCol":29,"endCol":33},{"startCol":36,"endCol":61}]},"324":{"partial":false,"source":"    if(missingKeys.length > 0)","missing":[{"startCol":7,"endCol":29}]},"325":{"partial":false,"source":"      this.params.operator += '\\n\\tmissing keys: ' + missingKeys.join(', ');","missing":[{"startCol":6,"endCol":76},{"startCol":30,"endCol":75},{"startCol":53,"endCol":75}]},"327":{"partial":false,"source":"    if(extraKeys.length > 0)","missing":[{"startCol":7,"endCol":27}]},"328":{"partial":false,"source":"      this.params.operator += '\\n\\textra keys: ' + extraKeys.join(', ');","missing":[{"startCol":6,"endCol":72},{"startCol":30,"endCol":71},{"startCol":51,"endCol":71}]},"330":{"partial":false,"source":"    this.assert(missingKeys.length === 0 && extraKeys.length === 0);","missing":[{"startCol":4,"endCol":67},{"startCol":16,"endCol":40},{"startCol":44,"endCol":66}]},"347":{"partial":false,"source":"    if(arguments.length > 1) properties = aSlice.call(arguments);","missing":[{"startCol":7,"endCol":27},{"startCol":29,"endCol":65},{"startCol":42,"endCol":64}]},"348":{"partial":false,"source":"    else if(arguments.length === 1 && typeof properties == 'string') properties = [properties];","missing":[{"startCol":12,"endCol":34},{"startCol":38,"endCol":55},{"startCol":69,"endCol":95}]},"349":{"partial":false,"source":"    else if(arguments.length === 0) properties = [];","missing":[{"startCol":12,"endCol":34},{"startCol":36,"endCol":52}]},"351":{"partial":false,"source":"    var allProps = properties.map(util.formatProp);","missing":[{"startCol":4,"endCol":51},{"startCol":19,"endCol":50}]},"353":{"partial":false,"source":"    properties = properties.map(String);","missing":[{"startCol":4,"endCol":40},{"startCol":17,"endCol":39}]},"355":{"partial":false,"source":"    var obj = should(Object(this.obj));","missing":[{"startCol":4,"endCol":39},{"startCol":14,"endCol":38},{"startCol":21,"endCol":37}]},"357":{"partial":false,"source":"    var foundProperties = [];","missing":[{"startCol":4,"endCol":29}]},"359":{"partial":false,"source":"    var currentProperty;","missing":[{"startCol":4,"endCol":24}]},"360":{"partial":false,"source":"    while(currentProperty = properties.shift()) {","missing":[{"startCol":28,"endCol":46}]},"361":{"partial":false,"source":"      this.params = {operator: 'to have property by path ' + allProps.join(', ') + ' - failed on ' + util.formatProp(currentProperty)};","missing":[{"startCol":6,"endCol":135},{"startCol":31,"endCol":80},{"startCol":61,"endCol":80},{"startCol":101,"endCol":133}]},"362":{"partial":false,"source":"      obj = obj.have.property(currentProperty);","missing":[{"startCol":6,"endCol":47},{"startCol":12,"endCol":46}]},"363":{"partial":false,"source":"      foundProperties.push(currentProperty);","missing":[{"startCol":6,"endCol":43}]},"366":{"partial":false,"source":"    this.params = {obj: this.obj, operator: 'to have property by path ' + allProps.join(', ')};","missing":[{"startCol":4,"endCol":95},{"startCol":44,"endCol":93},{"startCol":74,"endCol":93}]},"368":{"partial":false,"source":"    this.obj = obj.obj;","missing":[{"startCol":4,"endCol":23}]}},"source":"/*\n * Should\n * Copyright(c) 2010-2014 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar util = require('../util');\nvar eql = require('should-equal');\n\nvar aSlice = Array.prototype.slice;\n\nmodule.exports = function(should, Assertion) {\n  var i = should.format;\n  /**\n   * Asserts given object has some descriptor. **On success it change given object to be value of property**.\n   *\n   * @name propertyWithDescriptor\n   * @memberOf Assertion\n   * @category assertion property\n   * @param {string} name Name of property\n   * @param {Object} desc Descriptor like used in Object.defineProperty (not required to add all properties)\n   * @example\n   *\n   * ({ a: 10 }).should.have.propertyWithDescriptor('a', { enumerable: true });\n   */\n  Assertion.add('propertyWithDescriptor', function(name, desc) {\n    this.params = {actual: this.obj, operator: 'to have own property with descriptor ' + i(desc)};\n    var obj = this.obj;\n    this.have.ownProperty(name);\n    should(Object.getOwnPropertyDescriptor(Object(obj), name)).have.properties(desc);\n  });\n\n  function processPropsArgs() {\n    var args = {};\n    if(arguments.length > 1) {\n      args.names = aSlice.call(arguments);\n    } else {\n      var arg = arguments[0];\n      if(typeof arg === 'string') {\n        args.names = [arg];\n      } else if(util.isIndexable(arg)) {\n        args.names = arg;\n      } else {\n        args.names = Object.keys(arg);\n        args.values = arg;\n      }\n    }\n    return args;\n  }\n\n\n  /**\n   * Asserts given object has enumerable property with optionally value. **On success it change given object to be value of property**.\n   *\n   * @name enumerable\n   * @memberOf Assertion\n   * @category assertion property\n   * @param {string} name Name of property\n   * @param {*} [val] Optional property value to check\n   * @example\n   *\n   * ({ a: 10 }).should.have.enumerable('a');\n   */\n  Assertion.add('enumerable', function(name, val) {\n    name = util.convertPropertyName(name);\n\n    this.params = {\n      operator: \"to have enumerable property \" + util.formatProp(name) + (arguments.length > 1 ? \" equal to \" + i(val): \"\")\n    };\n\n    var desc = { enumerable: true };\n    if(arguments.length > 1) desc.value = val;\n    this.have.propertyWithDescriptor(name, desc);\n  });\n\n  /**\n   * Asserts given object has enumerable properties\n   *\n   * @name enumerables\n   * @memberOf Assertion\n   * @category assertion property\n   * @param {Array|...string|Object} names Names of property\n   * @example\n   *\n   * ({ a: 10, b: 10 }).should.have.enumerables('a');\n   */\n  Assertion.add('enumerables', function(names) {\n    var args = processPropsArgs.apply(null, arguments);\n\n    this.params = {\n      operator: \"to have enumerables \" + args.names.map(util.formatProp)\n    };\n\n    var obj = this.obj;\n    args.names.forEach(function(name) {\n      should(obj).have.enumerable(name);\n    });\n  });\n\n  /**\n   * Asserts given object has property with optionally value. **On success it change given object to be value of property**.\n   *\n   * @name property\n   * @memberOf Assertion\n   * @category assertion property\n   * @param {string} name Name of property\n   * @param {*} [val] Optional property value to check\n   * @example\n   *\n   * ({ a: 10 }).should.have.property('a');\n   */\n  Assertion.add('property', function(name, val) {\n    name = util.convertPropertyName(name);\n    if(arguments.length > 1) {\n      var p = {};\n      p[name] = val;\n      this.have.properties(p);\n    } else {\n      this.have.properties(name);\n    }\n    this.obj = this.obj[name];\n  });\n\n  /**\n   * Asserts given object has properties. On this method affect .any modifier, which allow to check not all properties.\n   *\n   * @name properties\n   * @memberOf Assertion\n   * @category assertion property\n   * @param {Array|...string|Object} names Names of property\n   * @example\n   *\n   * ({ a: 10 }).should.have.properties('a');\n   * ({ a: 10, b: 20 }).should.have.properties([ 'a' ]);\n   * ({ a: 10, b: 20 }).should.have.properties({ b: 20 });\n   */\n  Assertion.add('properties', function(names) {\n    var values = {};\n    if(arguments.length > 1) {\n      names = aSlice.call(arguments);\n    } else if(!Array.isArray(names)) {\n      if(typeof names == 'string' || typeof names == 'symbol') {\n        names = [names];\n      } else {\n        values = names;\n        names = Object.keys(names);\n      }\n    }\n\n    var obj = Object(this.obj), missingProperties = [];\n\n    //just enumerate properties and check if they all present\n    names.forEach(function(name) {\n      if(!(name in obj)) missingProperties.push(util.formatProp(name));\n    });\n\n    var props = missingProperties;\n    if(props.length === 0) {\n      props = names.map(util.formatProp);\n    } else if(this.anyOne) {\n      props = names.filter(function(name) {\n        return missingProperties.indexOf(util.formatProp(name)) < 0;\n      }).map(util.formatProp);\n    }\n\n    var operator = (props.length === 1 ?\n        'to have property ' : 'to have ' + (this.anyOne ? 'any of ' : '') + 'properties ') + props.join(', ');\n\n    this.params = {obj: this.obj, operator: operator};\n\n    //check that all properties presented\n    //or if we request one of them that at least one them presented\n    this.assert(missingProperties.length === 0 || (this.anyOne && missingProperties.length != names.length));\n\n    // check if values in object matched expected\n    var valueCheckNames = Object.keys(values);\n    if(valueCheckNames.length) {\n      var wrongValues = [];\n      props = [];\n\n      // now check values, as there we have all properties\n      valueCheckNames.forEach(function(name) {\n        var value = values[name];\n        if(!eql(obj[name], value).result) {\n          wrongValues.push(util.formatProp(name) + ' of ' + i(value) + ' (got ' + i(obj[name]) + ')');\n        } else {\n          props.push(util.formatProp(name) + ' of ' + i(value));\n        }\n      });\n\n      if((wrongValues.length !== 0 && !this.anyOne) || (this.anyOne && props.length === 0)) {\n        props = wrongValues;\n      }\n\n      operator = (props.length === 1 ?\n        'to have property ' : 'to have ' + (this.anyOne ? 'any of ' : '') + 'properties ') + props.join(', ');\n\n      this.params = {obj: this.obj, operator: operator};\n\n      //if there is no not matched values\n      //or there is at least one matched\n      this.assert(wrongValues.length === 0 || (this.anyOne && wrongValues.length != valueCheckNames.length));\n    }\n  });\n\n  /**\n   * Asserts given object has property `length` with given value `n`\n   *\n   * @name length\n   * @alias Assertion#lengthOf\n   * @memberOf Assertion\n   * @category assertion property\n   * @param {number} n Expected length\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * [1, 2].should.have.length(2);\n   */\n  Assertion.add('length', function(n, description) {\n    this.have.property('length', n, description);\n  });\n\n  Assertion.alias('length', 'lengthOf');\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  /**\n   * Asserts given object has own property. **On success it change given object to be value of property**.\n   *\n   * @name ownProperty\n   * @alias Assertion#hasOwnProperty\n   * @memberOf Assertion\n   * @category assertion property\n   * @param {string} name Name of property\n   * @param {string} [description] Optional message\n   * @example\n   *\n   * ({ a: 10 }).should.have.ownProperty('a');\n   */\n  Assertion.add('ownProperty', function(name, description) {\n    name = util.convertPropertyName(name);\n    this.params = {\n      actual: this.obj,\n      operator: 'to have own property ' + util.formatProp(name),\n      message: description\n    };\n\n    this.assert(hasOwnProperty.call(this.obj, name));\n\n    this.obj = this.obj[name];\n  });\n\n  Assertion.alias('ownProperty', 'hasOwnProperty');\n\n  /**\n   * Asserts given object is empty. For strings, arrays and arguments it checks .length property, for objects it checks keys.\n   *\n   * @name empty\n   * @memberOf Assertion\n   * @category assertion property\n   * @example\n   *\n   * ''.should.be.empty();\n   * [].should.be.empty();\n   * ({}).should.be.empty();\n   */\n  Assertion.add('empty', function() {\n    this.params = {operator: 'to be empty'};\n\n    if(util.length(this.obj) !== void 0) {\n      should(this.obj).have.property('length', 0);\n    } else {\n      var obj = Object(this.obj); // wrap to reference for booleans and numbers\n      for(var prop in obj) {\n        should(this.obj).not.have.ownProperty(prop);\n      }\n    }\n  }, true);\n\n  /**\n   * Asserts given object has exact keys. Compared to `properties`, `keys` does not accept Object as a argument.\n   *\n   * @name keys\n   * @alias Assertion#key\n   * @memberOf Assertion\n   * @category assertion property\n   * @param {Array|...string} [keys] Keys to check\n   * @example\n   *\n   * ({ a: 10 }).should.have.keys('a');\n   * ({ a: 10, b: 20 }).should.have.keys('a', 'b');\n   * ({ a: 10, b: 20 }).should.have.keys([ 'a', 'b' ]);\n   * ({}).should.have.keys();\n   */\n  Assertion.add('keys', function(keys) {\n    if(arguments.length > 1) keys = aSlice.call(arguments);\n    else if(arguments.length === 1 && typeof keys === 'string') keys = [keys];\n    else if(arguments.length === 0) keys = [];\n\n    keys = keys.map(String);\n\n    var obj = Object(this.obj);\n\n    // first check if some keys are missing\n    var missingKeys = [];\n    keys.forEach(function(key) {\n      if(!hasOwnProperty.call(this.obj, key))\n        missingKeys.push(util.formatProp(key));\n    }, this);\n\n    // second check for extra keys\n    var extraKeys = [];\n    Object.keys(obj).forEach(function(key) {\n      if(keys.indexOf(key) < 0) {\n        extraKeys.push(util.formatProp(key));\n      }\n    });\n\n    var verb = keys.length === 0 ? 'to be empty' :\n    'to have ' + (keys.length === 1 ? 'key ' : 'keys ');\n\n    this.params = {operator: verb + keys.map(util.formatProp).join(', ')};\n\n    if(missingKeys.length > 0)\n      this.params.operator += '\\n\\tmissing keys: ' + missingKeys.join(', ');\n\n    if(extraKeys.length > 0)\n      this.params.operator += '\\n\\textra keys: ' + extraKeys.join(', ');\n\n    this.assert(missingKeys.length === 0 && extraKeys.length === 0);\n  });\n\n  Assertion.alias(\"keys\", \"key\");\n\n  /**\n   * Asserts given object has nested property in depth by path. **On success it change given object to be value of final property**.\n   *\n   * @name propertyByPath\n   * @memberOf Assertion\n   * @category assertion property\n   * @param {Array|...string} properties Properties path to search\n   * @example\n   *\n   * ({ a: {b: 10}}).should.have.propertyByPath('a', 'b').eql(10);\n   */\n  Assertion.add('propertyByPath', function(properties) {\n    if(arguments.length > 1) properties = aSlice.call(arguments);\n    else if(arguments.length === 1 && typeof properties == 'string') properties = [properties];\n    else if(arguments.length === 0) properties = [];\n\n    var allProps = properties.map(util.formatProp);\n\n    properties = properties.map(String);\n\n    var obj = should(Object(this.obj));\n\n    var foundProperties = [];\n\n    var currentProperty;\n    while(currentProperty = properties.shift()) {\n      this.params = {operator: 'to have property by path ' + allProps.join(', ') + ' - failed on ' + util.formatProp(currentProperty)};\n      obj = obj.have.property(currentProperty);\n      foundProperties.push(currentProperty);\n    }\n\n    this.params = {obj: this.obj, operator: 'to have property by path ' + allProps.join(', ')};\n\n    this.obj = obj.obj;\n  });\n};","blocks":{"total":51,"seen":1,"missing":50,"percentage":0.0196078431372549}},"hash":"73ed02397434559e48d1d977e365b212"},"/home/ryan/Desktop/node/node_modules/should/lib/ext/error.js":{"stats":{"percentage":0.6422018348623854,"lines":[{"lineno":36},{"lineno":41},{"lineno":42},{"lineno":43},{"lineno":44},{"lineno":47},{"lineno":49},{"lineno":52},{"lineno":54},{"lineno":55},{"lineno":58},{"lineno":59},{"lineno":60},{"lineno":61},{"lineno":62},{"lineno":63},{"lineno":64},{"lineno":65},{"lineno":66},{"lineno":68},{"lineno":70},{"lineno":71},{"lineno":72},{"lineno":74},{"lineno":79},{"lineno":80},{"lineno":81},{"lineno":82},{"lineno":83},{"lineno":85},{"lineno":87},{"lineno":89},{"lineno":90},{"lineno":91},{"lineno":93},{"lineno":98},{"lineno":102},{"lineno":104},{"lineno":105}],"missing":39,"seen":70,"total":109,"coverage":{"36":{"partial":false,"source":"    var fn = this.obj","missing":[{}]},"37":{"partial":false,"source":"      , err = {}","missing":[{}]},"38":{"partial":false,"source":"      , errorInfo = ''","missing":[{}]},"39":{"partial":false,"source":"      , thrown = false;","missing":[{}]},"41":{"partial":false,"source":"    if(util.isGeneratorFunction(fn)) {","missing":[{"startCol":7,"endCol":35}]},"42":{"partial":false,"source":"      return should(fn()).throw(message, properties);","missing":[{"startCol":6,"endCol":53},{"startCol":13,"endCol":25},{"startCol":20,"endCol":24}]},"43":{"partial":false,"source":"    } else if(util.isGeneratorObject(fn)) {","missing":[{"startCol":14,"endCol":40}]},"44":{"partial":false,"source":"      return should(fn.next.bind(fn)).throw(message, properties);","missing":[{"startCol":6,"endCol":65},{"startCol":13,"endCol":37},{"startCol":20,"endCol":36}]},"47":{"partial":false,"source":"    this.is.a.Function();","missing":[{"startCol":4,"endCol":24}]},"49":{"partial":false,"source":"    var errorMatched = true;","missing":[{"startCol":4,"endCol":28}]},"52":{"partial":false,"source":"      fn();","missing":[{"startCol":6,"endCol":10}]},"54":{"partial":false,"source":"      thrown = true;","missing":[{"startCol":6,"endCol":20}]},"55":{"partial":false,"source":"      err = e;","missing":[{"startCol":6,"endCol":14}]},"58":{"partial":false,"source":"    if(thrown) {","missing":[{"startCol":7,"endCol":13}]},"59":{"partial":false,"source":"      if(message) {","missing":[{"startCol":9,"endCol":16}]},"60":{"partial":false,"source":"        if('string' == typeof message) {","missing":[{"startCol":11,"endCol":37},{"startCol":23,"endCol":37}]},"61":{"partial":false,"source":"          errorMatched = message == err.message;","missing":[{"startCol":10,"endCol":48},{"startCol":25,"endCol":32}]},"62":{"partial":false,"source":"        } else if(message instanceof RegExp) {","missing":[{"startCol":18,"endCol":25},{"startCol":37,"endCol":43}]},"63":{"partial":false,"source":"          errorMatched = message.test(err.message);","missing":[{"startCol":10,"endCol":51},{"startCol":25,"endCol":50}]},"64":{"partial":false,"source":"        } else if('function' == typeof message) {","missing":[{"startCol":18,"endCol":46},{"startCol":32,"endCol":46}]},"65":{"partial":false,"source":"          errorMatched = err instanceof message;","missing":[{"startCol":10,"endCol":48},{"startCol":25,"endCol":28},{"startCol":40,"endCol":47}]},"66":{"partial":false,"source":"        } else if(null != message) {","missing":[{"startCol":18,"endCol":33},{"startCol":26,"endCol":33}]},"68":{"partial":false,"source":"            should(err).match(message);","missing":[{"startCol":12,"endCol":23}]},"70":{"partial":false,"source":"            if(e instanceof should.AssertionError) {","missing":[{"startCol":15,"endCol":16}]},"71":{"partial":false,"source":"              errorInfo = \": \" + e.message;","missing":[{"startCol":14,"endCol":43},{"startCol":26,"endCol":42}]},"72":{"partial":false,"source":"              errorMatched = false;","missing":[{"startCol":14,"endCol":35}]},"74":{"partial":false,"source":"              throw e;","missing":[{"startCol":14,"endCol":22}]},"79":{"partial":false,"source":"        if(!errorMatched) {","missing":[{"startCol":11,"endCol":24},{"startCol":12,"endCol":24}]},"80":{"partial":false,"source":"          if('string' == typeof message || message instanceof RegExp) {","missing":[{"startCol":13,"endCol":39},{"startCol":25,"endCol":39},{"startCol":43,"endCol":50},{"startCol":62,"endCol":68}]},"81":{"partial":false,"source":"            errorInfo = \" with a message matching \" + i(message) + \", but got '\" + err.message + \"'\";","missing":[{"startCol":12,"endCol":101},{"startCol":24,"endCol":64},{"startCol":54,"endCol":64}]},"82":{"partial":false,"source":"          } else if('function' == typeof message) {","missing":[{"startCol":20,"endCol":48},{"startCol":34,"endCol":48}]},"83":{"partial":false,"source":"            errorInfo = \" of type \" + util.functionName(message) + \", but got \" + util.functionName(err.constructor);","missing":[{"startCol":12,"endCol":117},{"startCol":24,"endCol":64},{"startCol":38,"endCol":64},{"startCol":82,"endCol":116}]},"85":{"partial":false,"source":"        } else if('function' == typeof message && properties) {","missing":[{"startCol":18,"endCol":46},{"startCol":32,"endCol":46},{"startCol":50,"endCol":60}]},"87":{"partial":false,"source":"            should(err).match(properties);","missing":[{"startCol":12,"endCol":23}]},"89":{"partial":false,"source":"            if(e instanceof should.AssertionError) {","missing":[{"startCol":15,"endCol":16}]},"90":{"partial":false,"source":"              errorInfo = \": \" + e.message;","missing":[{"startCol":14,"endCol":43},{"startCol":26,"endCol":42}]},"91":{"partial":false,"source":"              errorMatched = false;","missing":[{"startCol":14,"endCol":35}]},"93":{"partial":false,"source":"              throw e;","missing":[{"startCol":14,"endCol":22}]},"98":{"partial":false,"source":"        errorInfo = \" (got \" + i(err) + \")\";","missing":[{"startCol":8,"endCol":44},{"startCol":20,"endCol":37},{"startCol":31,"endCol":37}]},"102":{"partial":false,"source":"    this.params = { operator: 'to throw exception' + errorInfo };","missing":[{"startCol":4,"endCol":65},{"startCol":30,"endCol":62},{"startCol":53,"endCol":62}]},"104":{"partial":false,"source":"    this.assert(thrown);","missing":[{"startCol":4,"endCol":23}]},"105":{"partial":false,"source":"    this.assert(errorMatched);","missing":[{"startCol":4,"endCol":29}]}},"source":"/*\n * Should\n * Copyright(c) 2010-2014 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\nvar util = require('../util');\n\nmodule.exports = function(should, Assertion) {\n  var i = should.format;\n\n  /**\n   * Assert given function throws error with such message.\n   *\n   * @name throw\n   * @memberOf Assertion\n   * @category assertion errors\n   * @alias Assertion#throwError\n   * @param {string|RegExp|Function|Object|GeneratorFunction|GeneratorObject} [message] Message to match or properties\n   * @param {Object} [properties] Optional properties that will be matched to thrown error\n   * @example\n   *\n   * (function(){ throw new Error('fail') }).should.throw();\n   * (function(){ throw new Error('fail') }).should.throw('fail');\n   * (function(){ throw new Error('fail') }).should.throw(/fail/);\n   *\n   * (function(){ throw new Error('fail') }).should.throw(Error);\n   * var error = new Error();\n   * error.a = 10;\n   * (function(){ throw error; }).should.throw(Error, { a: 10 });\n   * (function(){ throw error; }).should.throw({ a: 10 });\n   * (function*() {\n   *   yield throwError();\n   * }).should.throw();\n   */\n  Assertion.add('throw', function(message, properties) {\n    var fn = this.obj\n      , err = {}\n      , errorInfo = ''\n      , thrown = false;\n\n    if(util.isGeneratorFunction(fn)) {\n      return should(fn()).throw(message, properties);\n    } else if(util.isGeneratorObject(fn)) {\n      return should(fn.next.bind(fn)).throw(message, properties);\n    }\n\n    this.is.a.Function();\n\n    var errorMatched = true;\n\n    try {\n      fn();\n    } catch(e) {\n      thrown = true;\n      err = e;\n    }\n\n    if(thrown) {\n      if(message) {\n        if('string' == typeof message) {\n          errorMatched = message == err.message;\n        } else if(message instanceof RegExp) {\n          errorMatched = message.test(err.message);\n        } else if('function' == typeof message) {\n          errorMatched = err instanceof message;\n        } else if(null != message) {\n          try {\n            should(err).match(message);\n          } catch(e) {\n            if(e instanceof should.AssertionError) {\n              errorInfo = \": \" + e.message;\n              errorMatched = false;\n            } else {\n              throw e;\n            }\n          }\n        }\n\n        if(!errorMatched) {\n          if('string' == typeof message || message instanceof RegExp) {\n            errorInfo = \" with a message matching \" + i(message) + \", but got '\" + err.message + \"'\";\n          } else if('function' == typeof message) {\n            errorInfo = \" of type \" + util.functionName(message) + \", but got \" + util.functionName(err.constructor);\n          }\n        } else if('function' == typeof message && properties) {\n          try {\n            should(err).match(properties);\n          } catch(e) {\n            if(e instanceof should.AssertionError) {\n              errorInfo = \": \" + e.message;\n              errorMatched = false;\n            } else {\n              throw e;\n            }\n          }\n        }\n      } else {\n        errorInfo = \" (got \" + i(err) + \")\";\n      }\n    }\n\n    this.params = { operator: 'to throw exception' + errorInfo };\n\n    this.assert(thrown);\n    this.assert(errorMatched);\n  });\n\n  Assertion.alias('throw', 'throwError');\n};","blocks":{"total":25,"seen":1,"missing":24,"percentage":0.04}},"hash":"9cd566ae1a53c51e28cbaefa4b66676d"},"/home/ryan/Desktop/node/node_modules/should/lib/ext/match.js":{"stats":{"percentage":0.7696335078534031,"lines":[{"lineno":53},{"lineno":55},{"lineno":56},{"lineno":58},{"lineno":60},{"lineno":61},{"lineno":62},{"lineno":63},{"lineno":65},{"lineno":67},{"lineno":68},{"lineno":69},{"lineno":70},{"lineno":74},{"lineno":76},{"lineno":78},{"lineno":80},{"lineno":81},{"lineno":83},{"lineno":90},{"lineno":91},{"lineno":93},{"lineno":94},{"lineno":95},{"lineno":97},{"lineno":99},{"lineno":100},{"lineno":102},{"lineno":103},{"lineno":105},{"lineno":111},{"lineno":113},{"lineno":115},{"lineno":117},{"lineno":144},{"lineno":146},{"lineno":147},{"lineno":173},{"lineno":175},{"lineno":177},{"lineno":178},{"lineno":180},{"lineno":182},{"lineno":184}],"missing":44,"seen":147,"total":191,"coverage":{"53":{"partial":false,"source":"    this.params = {operator: 'to match ' + i(other), message: description};","missing":[{"startCol":4,"endCol":75},{"startCol":29,"endCol":51},{"startCol":43,"endCol":51}]},"55":{"partial":false,"source":"    if(!eql(this.obj, other).result) {","missing":[{"startCol":7,"endCol":35},{"startCol":8,"endCol":28}]},"56":{"partial":false,"source":"      if(other instanceof RegExp) { // something - regex","missing":[{"startCol":9,"endCol":14},{"startCol":26,"endCol":32}]},"58":{"partial":false,"source":"        if(typeof this.obj == 'string') {","missing":[{"startCol":11,"endCol":26}]},"60":{"partial":false,"source":"          this.assert(other.exec(this.obj));","missing":[{"startCol":10,"endCol":43},{"startCol":22,"endCol":42}]},"61":{"partial":false,"source":"        } else if(util.isIndexable(this.obj)) {","missing":[{"startCol":18,"endCol":44}]},"62":{"partial":false,"source":"          util.forEach(this.obj, function(item) {","missing":[{}]},"63":{"partial":false,"source":"            this.assert(other.exec(item));// should we try to convert to String and exec?","missing":[{"startCol":24,"endCol":40},{},{"startCol":12,"endCol":42}]},"64":{"partial":false,"source":"          }, this);","missing":[{}]},"65":{"partial":false,"source":"        } else if(null != this.obj && typeof this.obj == 'object') {","missing":[{"startCol":18,"endCol":34},{"startCol":38,"endCol":53}]},"67":{"partial":false,"source":"          var notMatchedProps = [], matchedProps = [];","missing":[{"startCol":10,"endCol":54}]},"68":{"partial":false,"source":"          util.forEach(this.obj, function(value, name) {","missing":[{}]},"69":{"partial":false,"source":"            if(other.exec(value)) matchedProps.push(util.formatProp(name));","missing":[{},{"startCol":15,"endCol":32},{"startCol":34,"endCol":74},{"startCol":52,"endCol":73}]},"70":{"partial":false,"source":"            else notMatchedProps.push(util.formatProp(name) + ' (' + i(value) + ')');","missing":[{"startCol":17,"endCol":84},{"startCol":38,"endCol":59},{},{"startCol":69,"endCol":77}]},"71":{"partial":false,"source":"          }, this);","missing":[{}]},"74":{"partial":false,"source":"            this.params.operator += '\\n    not matched properties: ' + notMatchedProps.join(', ');","missing":[{"startCol":12,"endCol":98},{"startCol":36,"endCol":97},{"startCol":71,"endCol":97}]},"76":{"partial":false,"source":"            this.params.operator += '\\n    matched properties: ' + matchedProps.join(', ');","missing":[{"startCol":12,"endCol":91},{"startCol":36,"endCol":90},{"startCol":67,"endCol":90}]},"78":{"partial":false,"source":"          this.assert(notMatchedProps.length === 0);","missing":[{"startCol":10,"endCol":51},{"startCol":22,"endCol":50}]},"80":{"partial":false,"source":"      } else if(typeof other == 'function') {","missing":[{"startCol":16,"endCol":28}]},"81":{"partial":false,"source":"        var res;","missing":[{"startCol":8,"endCol":16}]},"83":{"partial":false,"source":"        res = other(this.obj);","missing":[{"startCol":8,"endCol":30},{"startCol":14,"endCol":29}]},"90":{"partial":false,"source":"        if(typeof res == 'boolean') {","missing":[{"startCol":11,"endCol":21}]},"91":{"partial":false,"source":"          this.assert(res); // if it is just boolean function assert on it","missing":[{"startCol":10,"endCol":26}]},"93":{"partial":false,"source":"      } else if(other != null && typeof other == 'object') { // try to match properties (for Object and Array)","missing":[{"startCol":16,"endCol":21},{"startCol":33,"endCol":45}]},"94":{"partial":false,"source":"        notMatchedProps = [];","missing":[{"startCol":8,"endCol":29}]},"95":{"partial":false,"source":"        matchedProps = [];","missing":[{"startCol":8,"endCol":26}]},"97":{"partial":false,"source":"        util.forEach(other, function(value, key) {","missing":[{}]},"98":{"partial":false,"source":"          try {","missing":[{}]},"99":{"partial":false,"source":"            should(this.obj).have.property(key).which.match(value);","missing":[{},{"startCol":12,"endCol":67}]},"100":{"partial":false,"source":"            matchedProps.push(util.formatProp(key));","missing":[{"startCol":12,"endCol":51},{"startCol":30,"endCol":50},{}]},"101":{"partial":false,"source":"          } catch(e) {","missing":[{}]},"102":{"partial":false,"source":"            if(e instanceof should.AssertionError) {","missing":[{"startCol":15,"endCol":16},{}]},"103":{"partial":false,"source":"              notMatchedProps.push(util.formatProp(key) + ' (' + i(this.obj[key]) + ')');","missing":[{"startCol":14,"endCol":88},{"startCol":35,"endCol":81},{},{"startCol":65,"endCol":81}]},"104":{"partial":false,"source":"            } else {","missing":[{}]},"105":{"partial":false,"source":"              throw e;","missing":[{},{"startCol":14,"endCol":22}]},"106":{"partial":false,"source":"            }","missing":[{}]},"107":{"partial":false,"source":"          }","missing":[{}]},"108":{"partial":false,"source":"        }, this);","missing":[{}]},"111":{"partial":false,"source":"          this.params.operator += '\\n    not matched properties: ' + notMatchedProps.join(', ');","missing":[{"startCol":10,"endCol":96},{"startCol":34,"endCol":95},{"startCol":69,"endCol":95}]},"113":{"partial":false,"source":"          this.params.operator += '\\n    matched properties: ' + matchedProps.join(', ');","missing":[{"startCol":10,"endCol":89},{"startCol":34,"endCol":88},{"startCol":65,"endCol":88}]},"115":{"partial":false,"source":"        this.assert(notMatchedProps.length === 0);","missing":[{"startCol":8,"endCol":49},{"startCol":20,"endCol":48}]},"117":{"partial":false,"source":"        this.assert(false);","missing":[{"startCol":8,"endCol":26}]},"144":{"partial":false,"source":"    this.params = {operator: 'to match each ' + i(other), message: description};","missing":[{"startCol":4,"endCol":80},{"startCol":29,"endCol":56},{"startCol":48,"endCol":56}]},"146":{"partial":false,"source":"    util.forEach(this.obj, function(value) {","missing":[{}]},"147":{"partial":false,"source":"      should(value).match(other);","missing":[{"startCol":6,"endCol":19},{}]},"148":{"partial":false,"source":"    }, this);","missing":[{}]},"173":{"partial":false,"source":"    this.params = {operator: 'to match any ' + i(other), message: description};","missing":[{"startCol":4,"endCol":79},{"startCol":29,"endCol":55},{"startCol":47,"endCol":55}]},"175":{"partial":false,"source":"    this.assert(util.some(this.obj, function(value) {","missing":[{}]},"176":{"partial":false,"source":"      try {","missing":[{}]},"177":{"partial":false,"source":"        should(value).match(other);","missing":[{},{"startCol":8,"endCol":34}]},"178":{"partial":false,"source":"        return true;","missing":[{},{"startCol":8,"endCol":20}]},"179":{"partial":false,"source":"      } catch(e) {","missing":[{}]},"180":{"partial":false,"source":"        if(e instanceof should.AssertionError) {","missing":[{"startCol":11,"endCol":12},{}]},"181":{"partial":false,"source":"          // Caught an AssertionError, return false to the iterator","missing":[{}]},"182":{"partial":false,"source":"          return false;","missing":[{},{"startCol":10,"endCol":23}]},"183":{"partial":false,"source":"        }","missing":[{}]},"184":{"partial":false,"source":"        throw e;","missing":[{},{"startCol":8,"endCol":16}]},"185":{"partial":false,"source":"      }","missing":[{}]},"186":{"partial":false,"source":"    }));","missing":[{}]}},"source":"/*\n * Should\n * Copyright(c) 2010-2014 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar util = require('../util');\nvar eql = require('should-equal');\n\nmodule.exports = function(should, Assertion) {\n  var i = should.format;\n\n  /**\n   * Asserts if given object match `other` object, using some assumptions:\n   * First object matched if they are equal,\n   * If `other` is a regexp and given object is a string check on matching with regexp\n   * If `other` is a regexp and given object is an array check if all elements matched regexp\n   * If `other` is a regexp and given object is an object check values on matching regexp\n   * If `other` is a function check if this function throws AssertionError on given object or return false - it will be assumed as not matched\n   * If `other` is an object check if the same keys matched with above rules\n   * All other cases failed\n   *\n   * @name match\n   * @memberOf Assertion\n   * @category assertion matching\n   * @param {*} other Object to match\n   * @param {string} [description] Optional message\n   * @example\n   * 'foobar'.should.match(/^foo/);\n   * 'foobar'.should.not.match(/^bar/);\n   *\n   * ({ a: 'foo', c: 'barfoo' }).should.match(/foo$/);\n   *\n   * ['a', 'b', 'c'].should.match(/[a-z]/);\n   *\n   * (5).should.not.match(function(n) {\n   *   return n < 0;\n   * });\n   * (5).should.not.match(function(it) {\n   *    it.should.be.an.Array();\n   * });\n   * ({ a: 10, b: 'abc', c: { d: 10 }, d: 0 }).should\n   * .match({ a: 10, b: /c$/, c: function(it) {\n   *    return it.should.have.property('d', 10);\n   * }});\n   *\n   * [10, 'abc', { d: 10 }, 0].should\n   * .match({ '0': 10, '1': /c$/, '2': function(it) {\n   *    return it.should.have.property('d', 10);\n   * }});\n   */\n  Assertion.add('match', function(other, description) {\n    this.params = {operator: 'to match ' + i(other), message: description};\n\n    if(!eql(this.obj, other).result) {\n      if(other instanceof RegExp) { // something - regex\n\n        if(typeof this.obj == 'string') {\n\n          this.assert(other.exec(this.obj));\n        } else if(util.isIndexable(this.obj)) {\n          util.forEach(this.obj, function(item) {\n            this.assert(other.exec(item));// should we try to convert to String and exec?\n          }, this);\n        } else if(null != this.obj && typeof this.obj == 'object') {\n\n          var notMatchedProps = [], matchedProps = [];\n          util.forEach(this.obj, function(value, name) {\n            if(other.exec(value)) matchedProps.push(util.formatProp(name));\n            else notMatchedProps.push(util.formatProp(name) + ' (' + i(value) + ')');\n          }, this);\n\n          if(notMatchedProps.length)\n            this.params.operator += '\\n    not matched properties: ' + notMatchedProps.join(', ');\n          if(matchedProps.length)\n            this.params.operator += '\\n    matched properties: ' + matchedProps.join(', ');\n\n          this.assert(notMatchedProps.length === 0);\n        } // should we try to convert to String and exec?\n      } else if(typeof other == 'function') {\n        var res;\n\n        res = other(this.obj);\n\n        //if(res instanceof Assertion) {\n        //  this.params.operator += '\\n    ' + res.getMessage();\n        //}\n\n        //if we throw exception ok - it is used .should inside\n        if(typeof res == 'boolean') {\n          this.assert(res); // if it is just boolean function assert on it\n        }\n      } else if(other != null && typeof other == 'object') { // try to match properties (for Object and Array)\n        notMatchedProps = [];\n        matchedProps = [];\n\n        util.forEach(other, function(value, key) {\n          try {\n            should(this.obj).have.property(key).which.match(value);\n            matchedProps.push(util.formatProp(key));\n          } catch(e) {\n            if(e instanceof should.AssertionError) {\n              notMatchedProps.push(util.formatProp(key) + ' (' + i(this.obj[key]) + ')');\n            } else {\n              throw e;\n            }\n          }\n        }, this);\n\n        if(notMatchedProps.length)\n          this.params.operator += '\\n    not matched properties: ' + notMatchedProps.join(', ');\n        if(matchedProps.length)\n          this.params.operator += '\\n    matched properties: ' + matchedProps.join(', ');\n\n        this.assert(notMatchedProps.length === 0);\n      } else {\n        this.assert(false);\n      }\n    }\n  });\n\n  /**\n   * Asserts if given object values or array elements all match `other` object, using some assumptions:\n   * First object matched if they are equal,\n   * If `other` is a regexp - matching with regexp\n   * If `other` is a function check if this function throws AssertionError on given object or return false - it will be assumed as not matched\n   * All other cases check if this `other` equal to each element\n   *\n   * @name matchEach\n   * @memberOf Assertion\n   * @category assertion matching\n   * @alias Assertion#matchSome\n   * @param {*} other Object to match\n   * @param {string} [description] Optional message\n   * @example\n   * [ 'a', 'b', 'c'].should.matchEach(/\\w+/);\n   * [ 'a', 'a', 'a'].should.matchEach('a');\n   *\n   * [ 'a', 'a', 'a'].should.matchEach(function(value) { value.should.be.eql('a') });\n   *\n   * { a: 'a', b: 'a', c: 'a' }.should.matchEach(function(value) { value.should.be.eql('a') });\n   */\n  Assertion.add('matchEach', function(other, description) {\n    this.params = {operator: 'to match each ' + i(other), message: description};\n\n    util.forEach(this.obj, function(value) {\n      should(value).match(other);\n    }, this);\n  });\n\n  /**\n  * Asserts if any of given object values or array elements match `other` object, using some assumptions:\n  * First object matched if they are equal,\n  * If `other` is a regexp - matching with regexp\n  * If `other` is a function check if this function throws AssertionError on given object or return false - it will be assumed as not matched\n  * All other cases check if this `other` equal to each element\n  *\n  * @name matchAny\n  * @memberOf Assertion\n  * @category assertion matching\n  * @param {*} other Object to match\n  * @alias Assertion#matchEvery\n  * @param {string} [description] Optional message\n  * @example\n  * [ 'a', 'b', 'c'].should.matchAny(/\\w+/);\n  * [ 'a', 'b', 'c'].should.matchAny('a');\n  *\n  * [ 'a', 'b', 'c'].should.matchAny(function(value) { value.should.be.eql('a') });\n  *\n  * { a: 'a', b: 'b', c: 'c' }.should.matchAny(function(value) { value.should.be.eql('a') });\n  */\n  Assertion.add('matchAny', function(other, description) {\n    this.params = {operator: 'to match any ' + i(other), message: description};\n\n    this.assert(util.some(this.obj, function(value) {\n      try {\n        should(value).match(other);\n        return true;\n      } catch(e) {\n        if(e instanceof should.AssertionError) {\n          // Caught an AssertionError, return false to the iterator\n          return false;\n        }\n        throw e;\n      }\n    }));\n  });\n\n  Assertion.alias('matchAny', 'matchSome');\n  Assertion.alias('matchEach', 'matchEvery');\n};","blocks":{"total":31,"seen":1,"missing":30,"percentage":0.03225806451612903}},"hash":"00af135242c9c645ccaae03d617e4da5"},"/home/ryan/Desktop/node/node_modules/should/lib/ext/contain.js":{"stats":{"percentage":0.7025316455696202,"lines":[{"lineno":38},{"lineno":40},{"lineno":42},{"lineno":44},{"lineno":45},{"lineno":46},{"lineno":47},{"lineno":48},{"lineno":51},{"lineno":75},{"lineno":77},{"lineno":78},{"lineno":79},{"lineno":80},{"lineno":81},{"lineno":83},{"lineno":84},{"lineno":86},{"lineno":89},{"lineno":93},{"lineno":94},{"lineno":95},{"lineno":96},{"lineno":100},{"lineno":101},{"lineno":104},{"lineno":121},{"lineno":123},{"lineno":124},{"lineno":125},{"lineno":126},{"lineno":127},{"lineno":128},{"lineno":129},{"lineno":130},{"lineno":133},{"lineno":134},{"lineno":135},{"lineno":137},{"lineno":138},{"lineno":140},{"lineno":144},{"lineno":145},{"lineno":146},{"lineno":150},{"lineno":151},{"lineno":154}],"missing":47,"seen":111,"total":158,"coverage":{"38":{"partial":false,"source":"    this.params = {operator: 'to contain ' + i(other)};","missing":[{"startCol":4,"endCol":55},{"startCol":29,"endCol":53},{"startCol":45,"endCol":53}]},"40":{"partial":false,"source":"    this.is.not.null().and.not.undefined();","missing":[{"startCol":4,"endCol":22}]},"42":{"partial":false,"source":"    var obj = this.obj;","missing":[{"startCol":4,"endCol":23}]},"44":{"partial":false,"source":"    if(typeof obj == 'string') {","missing":[{"startCol":7,"endCol":17}]},"45":{"partial":false,"source":"      this.assert(obj.indexOf(String(other)) >= 0);","missing":[{"startCol":6,"endCol":50},{"startCol":18,"endCol":44},{"startCol":30,"endCol":43}]},"46":{"partial":false,"source":"    } else if(util.isIndexable(obj)) {","missing":[{"startCol":14,"endCol":35}]},"47":{"partial":false,"source":"      this.assert(util.some(obj, function(v) {","missing":[{}]},"48":{"partial":false,"source":"        return eql(v, other).result;","missing":[{},{"startCol":8,"endCol":36},{"startCol":15,"endCol":28}]},"49":{"partial":false,"source":"      }));","missing":[{}]},"51":{"partial":false,"source":"      this.have.properties(other);","missing":[{"startCol":6,"endCol":33}]},"75":{"partial":false,"source":"    this.params = {operator: 'to contain ' + i(other)};","missing":[{"startCol":4,"endCol":55},{"startCol":29,"endCol":53},{"startCol":45,"endCol":53}]},"77":{"partial":false,"source":"    var obj = this.obj;","missing":[{"startCol":4,"endCol":23}]},"78":{"partial":false,"source":"    if(typeof obj == 'string') {// expect other to be string","missing":[{"startCol":7,"endCol":17}]},"79":{"partial":false,"source":"      this.is.equal(String(other));","missing":[{"startCol":6,"endCol":34},{"startCol":20,"endCol":33}]},"80":{"partial":false,"source":"    } else if(util.isIndexable(obj) && util.isIndexable(other)) {","missing":[{"startCol":14,"endCol":35},{"startCol":39,"endCol":62}]},"81":{"partial":false,"source":"      for(var objIdx = 0, otherIdx = 0, objLength = util.length(obj), otherLength = util.length(other); objIdx < objLength && otherIdx < otherLength; objIdx++) {","missing":[{"startCol":52,"endCol":68},{"startCol":84,"endCol":102},{"startCol":104,"endCol":110},{"startCol":113,"endCol":122},{"startCol":126,"endCol":134},{"startCol":137,"endCol":148},{"startCol":150,"endCol":158}]},"83":{"partial":false,"source":"          should(obj[objIdx]).containDeepOrdered(other[otherIdx]);","missing":[{"startCol":10,"endCol":29}]},"84":{"partial":false,"source":"          otherIdx++;","missing":[{"startCol":10,"endCol":20}]},"86":{"partial":false,"source":"          if(e instanceof should.AssertionError) {","missing":[{"startCol":13,"endCol":14}]},"89":{"partial":false,"source":"          throw e;","missing":[{"startCol":10,"endCol":18}]},"93":{"partial":false,"source":"      this.assert(otherIdx === otherLength);","missing":[{"startCol":6,"endCol":43},{"startCol":18,"endCol":26},{"startCol":31,"endCol":42}]},"94":{"partial":false,"source":"    } else if(obj != null && other != null && typeof obj == 'object' && typeof other == 'object') {// object contains object case","missing":[{"startCol":14,"endCol":17},{"startCol":29,"endCol":34},{"startCol":46,"endCol":56},{"startCol":72,"endCol":84}]},"95":{"partial":false,"source":"      util.forEach(other, function(value, key) {","missing":[{}]},"96":{"partial":false,"source":"        should(obj[key]).containDeepOrdered(value);","missing":[{"startCol":8,"endCol":24},{}]},"97":{"partial":false,"source":"      });","missing":[{}]},"100":{"partial":false,"source":"      if(util.isEmptyObject(other)) {","missing":[{"startCol":9,"endCol":34}]},"101":{"partial":false,"source":"        this.eql(other);","missing":[{"startCol":8,"endCol":23}]},"104":{"partial":false,"source":"      this.eql(other);","missing":[{"startCol":6,"endCol":21}]},"121":{"partial":false,"source":"    this.params = {operator: 'to contain ' + i(other)};","missing":[{"startCol":4,"endCol":55},{"startCol":29,"endCol":53},{"startCol":45,"endCol":53}]},"123":{"partial":false,"source":"    var obj = this.obj;","missing":[{"startCol":4,"endCol":23}]},"124":{"partial":false,"source":"    if(typeof obj == 'string') {// expect other to be string","missing":[{"startCol":7,"endCol":17}]},"125":{"partial":false,"source":"      this.is.equal(String(other));","missing":[{"startCol":6,"endCol":34},{"startCol":20,"endCol":33}]},"126":{"partial":false,"source":"    } else if(util.isIndexable(obj) && util.isIndexable(other)) {","missing":[{"startCol":14,"endCol":35},{"startCol":39,"endCol":62}]},"127":{"partial":false,"source":"      var usedKeys = {};","missing":[{"startCol":6,"endCol":24}]},"128":{"partial":false,"source":"      util.forEach(other, function(otherItem) {","missing":[{}]},"129":{"partial":false,"source":"        this.assert(util.some(obj, function(item, index) {","missing":[{}]},"130":{"partial":false,"source":"          if(index in usedKeys) return false;","missing":[{},{"startCol":22,"endCol":30},{"startCol":13,"endCol":30},{"startCol":32,"endCol":45}]},"131":{"partial":false,"source":"","missing":[{}]},"132":{"partial":false,"source":"          try {","missing":[{}]},"133":{"partial":false,"source":"            should(item).containDeep(otherItem);","missing":[{"startCol":12,"endCol":24},{}]},"134":{"partial":false,"source":"            usedKeys[index] = true;","missing":[{},{"startCol":12,"endCol":35}]},"135":{"partial":false,"source":"            return true;","missing":[{},{"startCol":12,"endCol":24}]},"136":{"partial":false,"source":"          } catch(e) {","missing":[{}]},"137":{"partial":false,"source":"            if(e instanceof should.AssertionError) {","missing":[{"startCol":15,"endCol":49},{}]},"138":{"partial":false,"source":"              return false;","missing":[{},{"startCol":14,"endCol":27}]},"139":{"partial":false,"source":"            }","missing":[{}]},"140":{"partial":false,"source":"            throw e;","missing":[{},{"startCol":12,"endCol":20}]},"141":{"partial":false,"source":"          }","missing":[{}]},"142":{"partial":false,"source":"        }));","missing":[{}]},"143":{"partial":false,"source":"      }, this);","missing":[{}]},"144":{"partial":false,"source":"    } else if(obj != null && other != null && typeof obj == 'object' && typeof other == 'object') {// object contains object case","missing":[{"startCol":14,"endCol":17},{"startCol":29,"endCol":34},{"startCol":46,"endCol":56},{"startCol":72,"endCol":84}]},"145":{"partial":false,"source":"      util.forEach(other, function(value, key) {","missing":[{}]},"146":{"partial":false,"source":"        should(obj[key]).containDeep(value);","missing":[{},{"startCol":8,"endCol":24}]},"147":{"partial":false,"source":"      });","missing":[{}]},"150":{"partial":false,"source":"      if(util.isEmptyObject(other)) {","missing":[{"startCol":9,"endCol":34}]},"151":{"partial":false,"source":"        this.eql(other);","missing":[{"startCol":8,"endCol":23}]},"154":{"partial":false,"source":"      this.eql(other);","missing":[{"startCol":6,"endCol":21}]}},"source":"/*\n * Should\n * Copyright(c) 2010-2014 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nvar util = require('../util');\nvar eql = require('should-equal');\n\nmodule.exports = function(should, Assertion) {\n  var i = should.format;\n\n  /**\n   * Assert that given object contain something that equal to `other`. It uses `should-equal` for equality checks.\n   * If given object is array it search that one of elements was equal to `other`.\n   * If given object is string it checks if `other` is a substring - expected that `other` is a string.\n   * If given object is Object it checks that `other` is a subobject - expected that `other` is a object.\n   *\n   * @name containEql\n   * @memberOf Assertion\n   * @category assertion contain\n   * @param {*} other Nested object\n   * @example\n   *\n   * [1, 2, 3].should.containEql(1);\n   * [{ a: 1 }, 'a', 10].should.containEql({ a: 1 });\n   *\n   * 'abc'.should.containEql('b');\n   * 'ab1c'.should.containEql(1);\n   *\n   * ({ a: 10, c: { d: 10 }}).should.containEql({ a: 10 });\n   * ({ a: 10, c: { d: 10 }}).should.containEql({ c: { d: 10 }});\n   * ({ a: 10, c: { d: 10 }}).should.containEql({ b: 10 });\n   * // throws AssertionError: expected { a: 10, c: { d: 10 } } to contain { b: 10 }\n   * //            expected { a: 10, c: { d: 10 } } to have property b\n   */\n  Assertion.add('containEql', function(other) {\n    this.params = {operator: 'to contain ' + i(other)};\n\n    this.is.not.null().and.not.undefined();\n\n    var obj = this.obj;\n\n    if(typeof obj == 'string') {\n      this.assert(obj.indexOf(String(other)) >= 0);\n    } else if(util.isIndexable(obj)) {\n      this.assert(util.some(obj, function(v) {\n        return eql(v, other).result;\n      }));\n    } else {\n      this.have.properties(other);\n    }\n  });\n\n  /**\n   * Assert that given object is contain equally structured object on the same depth level.\n   * If given object is an array and `other` is an array it checks that the eql elements is going in the same sequence in given array (recursive)\n   * If given object is an object it checks that the same keys contain deep equal values (recursive)\n   * On other cases it try to check with `.eql`\n   *\n   * @name containDeepOrdered\n   * @memberOf Assertion\n   * @category assertion contain\n   * @param {*} other Nested object\n   * @example\n   *\n   * [ 1, 2, 3].should.containDeepOrdered([1, 2]);\n   * [ 1, 2, [ 1, 2, 3 ]].should.containDeepOrdered([ 1, [ 2, 3 ]]);\n   *\n   * ({ a: 10, b: { c: 10, d: [1, 2, 3] }}).should.containDeepOrdered({a: 10});\n   * ({ a: 10, b: { c: 10, d: [1, 2, 3] }}).should.containDeepOrdered({b: {c: 10}});\n   * ({ a: 10, b: { c: 10, d: [1, 2, 3] }}).should.containDeepOrdered({b: {d: [1, 3]}});\n   */\n  Assertion.add('containDeepOrdered', function(other) {\n    this.params = {operator: 'to contain ' + i(other)};\n\n    var obj = this.obj;\n    if(typeof obj == 'string') {// expect other to be string\n      this.is.equal(String(other));\n    } else if(util.isIndexable(obj) && util.isIndexable(other)) {\n      for(var objIdx = 0, otherIdx = 0, objLength = util.length(obj), otherLength = util.length(other); objIdx < objLength && otherIdx < otherLength; objIdx++) {\n        try {\n          should(obj[objIdx]).containDeepOrdered(other[otherIdx]);\n          otherIdx++;\n        } catch(e) {\n          if(e instanceof should.AssertionError) {\n            continue;\n          }\n          throw e;\n        }\n      }\n\n      this.assert(otherIdx === otherLength);\n    } else if(obj != null && other != null && typeof obj == 'object' && typeof other == 'object') {// object contains object case\n      util.forEach(other, function(value, key) {\n        should(obj[key]).containDeepOrdered(value);\n      });\n\n      // if both objects is empty means we finish traversing - and we need to compare for hidden values\n      if(util.isEmptyObject(other)) {\n        this.eql(other);\n      }\n    } else {\n      this.eql(other);\n    }\n  });\n\n  /**\n   * The same like `Assertion#containDeepOrdered` but all checks on arrays without order.\n   *\n   * @name containDeep\n   * @memberOf Assertion\n   * @category assertion contain\n   * @param {*} other Nested object\n   * @example\n   *\n   * [ 1, 2, 3].should.containDeep([2, 1]);\n   * [ 1, 2, [ 1, 2, 3 ]].should.containDeep([ 1, [ 3, 1 ]]);\n   */\n  Assertion.add('containDeep', function(other) {\n    this.params = {operator: 'to contain ' + i(other)};\n\n    var obj = this.obj;\n    if(typeof obj == 'string') {// expect other to be string\n      this.is.equal(String(other));\n    } else if(util.isIndexable(obj) && util.isIndexable(other)) {\n      var usedKeys = {};\n      util.forEach(other, function(otherItem) {\n        this.assert(util.some(obj, function(item, index) {\n          if(index in usedKeys) return false;\n\n          try {\n            should(item).containDeep(otherItem);\n            usedKeys[index] = true;\n            return true;\n          } catch(e) {\n            if(e instanceof should.AssertionError) {\n              return false;\n            }\n            throw e;\n          }\n        }));\n      }, this);\n    } else if(obj != null && other != null && typeof obj == 'object' && typeof other == 'object') {// object contains object case\n      util.forEach(other, function(value, key) {\n        should(obj[key]).containDeep(value);\n      });\n\n      // if both objects is empty means we finish traversing - and we need to compare for hidden values\n      if(util.isEmptyObject(other)) {\n        this.eql(other);\n      }\n    } else {\n      this.eql(other);\n    }\n  });\n\n};","blocks":{"total":30,"seen":1,"missing":29,"percentage":0.03333333333333333}},"hash":"e72ad024ed5d39569c05d7b642d7ba9e"}}}